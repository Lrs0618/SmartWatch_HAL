
SmartWatch_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078bc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d30  080079cc  080079cc  000089cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086fc  080086fc  0000a0c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080086fc  080086fc  0000a0c0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080086fc  080086fc  0000a0c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086fc  080086fc  000096fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008700  08008700  00009700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  08008704  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020a8  200000c0  080087c4  0000a0c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002168  080087c4  0000a168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a0c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000375e7  00000000  00000000  0000a0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d57  00000000  00000000  000416d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d00  00000000  00000000  00047428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015de  00000000  00000000  00049128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c4ff  00000000  00000000  0004a706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000231fb  00000000  00000000  00066c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2850  00000000  00000000  00089e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c650  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007934  00000000  00000000  0012c694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00133fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000c0 	.word	0x200000c0
 800012c:	00000000 	.word	0x00000000
 8000130:	080079b4 	.word	0x080079b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000c4 	.word	0x200000c4
 800014c:	080079b4 	.word	0x080079b4

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001a2:	2afd      	cmp	r2, #253	@ 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	@ 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	@ 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_d2f>:
 8000630:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000634:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000638:	bf24      	itt	cs
 800063a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800063e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000642:	d90d      	bls.n	8000660 <__aeabi_d2f+0x30>
 8000644:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000648:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800064c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000650:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000654:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000658:	bf08      	it	eq
 800065a:	f020 0001 	biceq.w	r0, r0, #1
 800065e:	4770      	bx	lr
 8000660:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000664:	d121      	bne.n	80006aa <__aeabi_d2f+0x7a>
 8000666:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800066a:	bfbc      	itt	lt
 800066c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000670:	4770      	bxlt	lr
 8000672:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000676:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800067a:	f1c2 0218 	rsb	r2, r2, #24
 800067e:	f1c2 0c20 	rsb	ip, r2, #32
 8000682:	fa10 f30c 	lsls.w	r3, r0, ip
 8000686:	fa20 f002 	lsr.w	r0, r0, r2
 800068a:	bf18      	it	ne
 800068c:	f040 0001 	orrne.w	r0, r0, #1
 8000690:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000694:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000698:	fa03 fc0c 	lsl.w	ip, r3, ip
 800069c:	ea40 000c 	orr.w	r0, r0, ip
 80006a0:	fa23 f302 	lsr.w	r3, r3, r2
 80006a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006a8:	e7cc      	b.n	8000644 <__aeabi_d2f+0x14>
 80006aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006ae:	d107      	bne.n	80006c0 <__aeabi_d2f+0x90>
 80006b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006b4:	bf1e      	ittt	ne
 80006b6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80006ba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80006be:	4770      	bxne	lr
 80006c0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80006c4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80006c8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop

080006d0 <__aeabi_frsub>:
 80006d0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80006d4:	e002      	b.n	80006dc <__addsf3>
 80006d6:	bf00      	nop

080006d8 <__aeabi_fsub>:
 80006d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080006dc <__addsf3>:
 80006dc:	0042      	lsls	r2, r0, #1
 80006de:	bf1f      	itttt	ne
 80006e0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80006e4:	ea92 0f03 	teqne	r2, r3
 80006e8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80006ec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006f0:	d06a      	beq.n	80007c8 <__addsf3+0xec>
 80006f2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80006f6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006fa:	bfc1      	itttt	gt
 80006fc:	18d2      	addgt	r2, r2, r3
 80006fe:	4041      	eorgt	r1, r0
 8000700:	4048      	eorgt	r0, r1
 8000702:	4041      	eorgt	r1, r0
 8000704:	bfb8      	it	lt
 8000706:	425b      	neglt	r3, r3
 8000708:	2b19      	cmp	r3, #25
 800070a:	bf88      	it	hi
 800070c:	4770      	bxhi	lr
 800070e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000712:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000716:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800071a:	bf18      	it	ne
 800071c:	4240      	negne	r0, r0
 800071e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000722:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000726:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800072a:	bf18      	it	ne
 800072c:	4249      	negne	r1, r1
 800072e:	ea92 0f03 	teq	r2, r3
 8000732:	d03f      	beq.n	80007b4 <__addsf3+0xd8>
 8000734:	f1a2 0201 	sub.w	r2, r2, #1
 8000738:	fa41 fc03 	asr.w	ip, r1, r3
 800073c:	eb10 000c 	adds.w	r0, r0, ip
 8000740:	f1c3 0320 	rsb	r3, r3, #32
 8000744:	fa01 f103 	lsl.w	r1, r1, r3
 8000748:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800074c:	d502      	bpl.n	8000754 <__addsf3+0x78>
 800074e:	4249      	negs	r1, r1
 8000750:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000754:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000758:	d313      	bcc.n	8000782 <__addsf3+0xa6>
 800075a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800075e:	d306      	bcc.n	800076e <__addsf3+0x92>
 8000760:	0840      	lsrs	r0, r0, #1
 8000762:	ea4f 0131 	mov.w	r1, r1, rrx
 8000766:	f102 0201 	add.w	r2, r2, #1
 800076a:	2afe      	cmp	r2, #254	@ 0xfe
 800076c:	d251      	bcs.n	8000812 <__addsf3+0x136>
 800076e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000772:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000776:	bf08      	it	eq
 8000778:	f020 0001 	biceq.w	r0, r0, #1
 800077c:	ea40 0003 	orr.w	r0, r0, r3
 8000780:	4770      	bx	lr
 8000782:	0049      	lsls	r1, r1, #1
 8000784:	eb40 0000 	adc.w	r0, r0, r0
 8000788:	3a01      	subs	r2, #1
 800078a:	bf28      	it	cs
 800078c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000790:	d2ed      	bcs.n	800076e <__addsf3+0x92>
 8000792:	fab0 fc80 	clz	ip, r0
 8000796:	f1ac 0c08 	sub.w	ip, ip, #8
 800079a:	ebb2 020c 	subs.w	r2, r2, ip
 800079e:	fa00 f00c 	lsl.w	r0, r0, ip
 80007a2:	bfaa      	itet	ge
 80007a4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007a8:	4252      	neglt	r2, r2
 80007aa:	4318      	orrge	r0, r3
 80007ac:	bfbc      	itt	lt
 80007ae:	40d0      	lsrlt	r0, r2
 80007b0:	4318      	orrlt	r0, r3
 80007b2:	4770      	bx	lr
 80007b4:	f092 0f00 	teq	r2, #0
 80007b8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80007bc:	bf06      	itte	eq
 80007be:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80007c2:	3201      	addeq	r2, #1
 80007c4:	3b01      	subne	r3, #1
 80007c6:	e7b5      	b.n	8000734 <__addsf3+0x58>
 80007c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80007cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80007d0:	bf18      	it	ne
 80007d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007d6:	d021      	beq.n	800081c <__addsf3+0x140>
 80007d8:	ea92 0f03 	teq	r2, r3
 80007dc:	d004      	beq.n	80007e8 <__addsf3+0x10c>
 80007de:	f092 0f00 	teq	r2, #0
 80007e2:	bf08      	it	eq
 80007e4:	4608      	moveq	r0, r1
 80007e6:	4770      	bx	lr
 80007e8:	ea90 0f01 	teq	r0, r1
 80007ec:	bf1c      	itt	ne
 80007ee:	2000      	movne	r0, #0
 80007f0:	4770      	bxne	lr
 80007f2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80007f6:	d104      	bne.n	8000802 <__addsf3+0x126>
 80007f8:	0040      	lsls	r0, r0, #1
 80007fa:	bf28      	it	cs
 80007fc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000800:	4770      	bx	lr
 8000802:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000806:	bf3c      	itt	cc
 8000808:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800080c:	4770      	bxcc	lr
 800080e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000812:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000816:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800081a:	4770      	bx	lr
 800081c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000820:	bf16      	itet	ne
 8000822:	4608      	movne	r0, r1
 8000824:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000828:	4601      	movne	r1, r0
 800082a:	0242      	lsls	r2, r0, #9
 800082c:	bf06      	itte	eq
 800082e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000832:	ea90 0f01 	teqeq	r0, r1
 8000836:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800083a:	4770      	bx	lr

0800083c <__aeabi_ui2f>:
 800083c:	f04f 0300 	mov.w	r3, #0
 8000840:	e004      	b.n	800084c <__aeabi_i2f+0x8>
 8000842:	bf00      	nop

08000844 <__aeabi_i2f>:
 8000844:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000848:	bf48      	it	mi
 800084a:	4240      	negmi	r0, r0
 800084c:	ea5f 0c00 	movs.w	ip, r0
 8000850:	bf08      	it	eq
 8000852:	4770      	bxeq	lr
 8000854:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000858:	4601      	mov	r1, r0
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	e01c      	b.n	800089a <__aeabi_l2f+0x2a>

08000860 <__aeabi_ul2f>:
 8000860:	ea50 0201 	orrs.w	r2, r0, r1
 8000864:	bf08      	it	eq
 8000866:	4770      	bxeq	lr
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	e00a      	b.n	8000884 <__aeabi_l2f+0x14>
 800086e:	bf00      	nop

08000870 <__aeabi_l2f>:
 8000870:	ea50 0201 	orrs.w	r2, r0, r1
 8000874:	bf08      	it	eq
 8000876:	4770      	bxeq	lr
 8000878:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800087c:	d502      	bpl.n	8000884 <__aeabi_l2f+0x14>
 800087e:	4240      	negs	r0, r0
 8000880:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000884:	ea5f 0c01 	movs.w	ip, r1
 8000888:	bf02      	ittt	eq
 800088a:	4684      	moveq	ip, r0
 800088c:	4601      	moveq	r1, r0
 800088e:	2000      	moveq	r0, #0
 8000890:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000894:	bf08      	it	eq
 8000896:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800089a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800089e:	fabc f28c 	clz	r2, ip
 80008a2:	3a08      	subs	r2, #8
 80008a4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008a8:	db10      	blt.n	80008cc <__aeabi_l2f+0x5c>
 80008aa:	fa01 fc02 	lsl.w	ip, r1, r2
 80008ae:	4463      	add	r3, ip
 80008b0:	fa00 fc02 	lsl.w	ip, r0, r2
 80008b4:	f1c2 0220 	rsb	r2, r2, #32
 80008b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80008bc:	fa20 f202 	lsr.w	r2, r0, r2
 80008c0:	eb43 0002 	adc.w	r0, r3, r2
 80008c4:	bf08      	it	eq
 80008c6:	f020 0001 	biceq.w	r0, r0, #1
 80008ca:	4770      	bx	lr
 80008cc:	f102 0220 	add.w	r2, r2, #32
 80008d0:	fa01 fc02 	lsl.w	ip, r1, r2
 80008d4:	f1c2 0220 	rsb	r2, r2, #32
 80008d8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80008dc:	fa21 f202 	lsr.w	r2, r1, r2
 80008e0:	eb43 0002 	adc.w	r0, r3, r2
 80008e4:	bf08      	it	eq
 80008e6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008ea:	4770      	bx	lr

080008ec <__gesf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpsf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__lesf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpsf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpsf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000908:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800090c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000910:	bf18      	it	ne
 8000912:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000916:	d011      	beq.n	800093c <__cmpsf2+0x40>
 8000918:	b001      	add	sp, #4
 800091a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800091e:	bf18      	it	ne
 8000920:	ea90 0f01 	teqne	r0, r1
 8000924:	bf58      	it	pl
 8000926:	ebb2 0003 	subspl.w	r0, r2, r3
 800092a:	bf88      	it	hi
 800092c:	17c8      	asrhi	r0, r1, #31
 800092e:	bf38      	it	cc
 8000930:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000934:	bf18      	it	ne
 8000936:	f040 0001 	orrne.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000940:	d102      	bne.n	8000948 <__cmpsf2+0x4c>
 8000942:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000946:	d105      	bne.n	8000954 <__cmpsf2+0x58>
 8000948:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800094c:	d1e4      	bne.n	8000918 <__cmpsf2+0x1c>
 800094e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000952:	d0e1      	beq.n	8000918 <__cmpsf2+0x1c>
 8000954:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <__aeabi_cfrcmple>:
 800095c:	4684      	mov	ip, r0
 800095e:	4608      	mov	r0, r1
 8000960:	4661      	mov	r1, ip
 8000962:	e7ff      	b.n	8000964 <__aeabi_cfcmpeq>

08000964 <__aeabi_cfcmpeq>:
 8000964:	b50f      	push	{r0, r1, r2, r3, lr}
 8000966:	f7ff ffc9 	bl	80008fc <__cmpsf2>
 800096a:	2800      	cmp	r0, #0
 800096c:	bf48      	it	mi
 800096e:	f110 0f00 	cmnmi.w	r0, #0
 8000972:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000974 <__aeabi_fcmpeq>:
 8000974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000978:	f7ff fff4 	bl	8000964 <__aeabi_cfcmpeq>
 800097c:	bf0c      	ite	eq
 800097e:	2001      	moveq	r0, #1
 8000980:	2000      	movne	r0, #0
 8000982:	f85d fb08 	ldr.w	pc, [sp], #8
 8000986:	bf00      	nop

08000988 <__aeabi_fcmplt>:
 8000988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800098c:	f7ff ffea 	bl	8000964 <__aeabi_cfcmpeq>
 8000990:	bf34      	ite	cc
 8000992:	2001      	movcc	r0, #1
 8000994:	2000      	movcs	r0, #0
 8000996:	f85d fb08 	ldr.w	pc, [sp], #8
 800099a:	bf00      	nop

0800099c <__aeabi_fcmple>:
 800099c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a0:	f7ff ffe0 	bl	8000964 <__aeabi_cfcmpeq>
 80009a4:	bf94      	ite	ls
 80009a6:	2001      	movls	r0, #1
 80009a8:	2000      	movhi	r0, #0
 80009aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ae:	bf00      	nop

080009b0 <__aeabi_fcmpge>:
 80009b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b4:	f7ff ffd2 	bl	800095c <__aeabi_cfrcmple>
 80009b8:	bf94      	ite	ls
 80009ba:	2001      	movls	r0, #1
 80009bc:	2000      	movhi	r0, #0
 80009be:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c2:	bf00      	nop

080009c4 <__aeabi_fcmpgt>:
 80009c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c8:	f7ff ffc8 	bl	800095c <__aeabi_cfrcmple>
 80009cc:	bf34      	ite	cc
 80009ce:	2001      	movcc	r0, #1
 80009d0:	2000      	movcs	r0, #0
 80009d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d6:	bf00      	nop

080009d8 <__aeabi_f2iz>:
 80009d8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80009e0:	d30f      	bcc.n	8000a02 <__aeabi_f2iz+0x2a>
 80009e2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80009e6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009ea:	d90d      	bls.n	8000a08 <__aeabi_f2iz+0x30>
 80009ec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009f4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009f8:	fa23 f002 	lsr.w	r0, r3, r2
 80009fc:	bf18      	it	ne
 80009fe:	4240      	negne	r0, r0
 8000a00:	4770      	bx	lr
 8000a02:	f04f 0000 	mov.w	r0, #0
 8000a06:	4770      	bx	lr
 8000a08:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000a0c:	d101      	bne.n	8000a12 <__aeabi_f2iz+0x3a>
 8000a0e:	0242      	lsls	r2, r0, #9
 8000a10:	d105      	bne.n	8000a1e <__aeabi_f2iz+0x46>
 8000a12:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000a16:	bf08      	it	eq
 8000a18:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a1c:	4770      	bx	lr
 8000a1e:	f04f 0000 	mov.w	r0, #0
 8000a22:	4770      	bx	lr

08000a24 <__aeabi_f2uiz>:
 8000a24:	0042      	lsls	r2, r0, #1
 8000a26:	d20e      	bcs.n	8000a46 <__aeabi_f2uiz+0x22>
 8000a28:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000a2c:	d30b      	bcc.n	8000a46 <__aeabi_f2uiz+0x22>
 8000a2e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000a32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a36:	d409      	bmi.n	8000a4c <__aeabi_f2uiz+0x28>
 8000a38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a40:	fa23 f002 	lsr.w	r0, r3, r2
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr
 8000a4c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000a50:	d101      	bne.n	8000a56 <__aeabi_f2uiz+0x32>
 8000a52:	0242      	lsls	r2, r0, #9
 8000a54:	d102      	bne.n	8000a5c <__aeabi_f2uiz+0x38>
 8000a56:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <u8x8_gpio_and_delay_stm32>:
#include "ssd1306_u8g2_driver.h"
#include "spi.h"

uint8_t u8x8_gpio_and_delay_stm32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	72fb      	strb	r3, [r7, #11]
 8000a72:	4613      	mov	r3, r2
 8000a74:	72bb      	strb	r3, [r7, #10]
	switch(msg){
 8000a76:	7afb      	ldrb	r3, [r7, #11]
 8000a78:	2b4b      	cmp	r3, #75	@ 0x4b
 8000a7a:	d01d      	beq.n	8000ab8 <u8x8_gpio_and_delay_stm32+0x54>
 8000a7c:	2b4b      	cmp	r3, #75	@ 0x4b
 8000a7e:	dc22      	bgt.n	8000ac6 <u8x8_gpio_and_delay_stm32+0x62>
 8000a80:	2b4a      	cmp	r3, #74	@ 0x4a
 8000a82:	d012      	beq.n	8000aaa <u8x8_gpio_and_delay_stm32+0x46>
 8000a84:	2b4a      	cmp	r3, #74	@ 0x4a
 8000a86:	dc1e      	bgt.n	8000ac6 <u8x8_gpio_and_delay_stm32+0x62>
 8000a88:	2b29      	cmp	r3, #41	@ 0x29
 8000a8a:	d002      	beq.n	8000a92 <u8x8_gpio_and_delay_stm32+0x2e>
 8000a8c:	2b49      	cmp	r3, #73	@ 0x49
 8000a8e:	d005      	beq.n	8000a9c <u8x8_gpio_and_delay_stm32+0x38>
 8000a90:	e019      	b.n	8000ac6 <u8x8_gpio_and_delay_stm32+0x62>
//				/* HAL initialization contains all what we need so we can skip this part. */
//			break;

			//Function which implements a delay, arg_int contains the amount of ms
			case U8X8_MSG_DELAY_MILLI:
			HAL_Delay(arg_int);
 8000a92:	7abb      	ldrb	r3, [r7, #10]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 fc15 	bl	80012c4 <HAL_Delay>
			break;
 8000a9a:	e018      	b.n	8000ace <u8x8_gpio_and_delay_stm32+0x6a>

			 //Function to define the logic level of the CS line
			case U8X8_MSG_GPIO_CS:
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, arg_int);
 8000a9c:	7abb      	ldrb	r3, [r7, #10]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	2110      	movs	r1, #16
 8000aa2:	480d      	ldr	r0, [pc, #52]	@ (8000ad8 <u8x8_gpio_and_delay_stm32+0x74>)
 8000aa4:	f000 fead 	bl	8001802 <HAL_GPIO_WritePin>
			break;
 8000aa8:	e011      	b.n	8000ace <u8x8_gpio_and_delay_stm32+0x6a>

			//Function to define the logic level of the Data/ Command line
			case U8X8_MSG_GPIO_DC:
				HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, arg_int);
 8000aaa:	7abb      	ldrb	r3, [r7, #10]
 8000aac:	461a      	mov	r2, r3
 8000aae:	2108      	movs	r1, #8
 8000ab0:	4809      	ldr	r0, [pc, #36]	@ (8000ad8 <u8x8_gpio_and_delay_stm32+0x74>)
 8000ab2:	f000 fea6 	bl	8001802 <HAL_GPIO_WritePin>
			break;
 8000ab6:	e00a      	b.n	8000ace <u8x8_gpio_and_delay_stm32+0x6a>

			//Function to define the logic level of the RESET line
			case U8X8_MSG_GPIO_RESET:
				HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, arg_int);
 8000ab8:	7abb      	ldrb	r3, [r7, #10]
 8000aba:	461a      	mov	r2, r3
 8000abc:	2140      	movs	r1, #64	@ 0x40
 8000abe:	4806      	ldr	r0, [pc, #24]	@ (8000ad8 <u8x8_gpio_and_delay_stm32+0x74>)
 8000ac0:	f000 fe9f 	bl	8001802 <HAL_GPIO_WritePin>
			break;
 8000ac4:	e003      	b.n	8000ace <u8x8_gpio_and_delay_stm32+0x6a>

			default:
				u8x8_SetGPIOResult(u8x8, 1);
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	2201      	movs	r2, #1
 8000aca:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		}

		return 1; // command processed successfully.
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40010800 	.word	0x40010800

08000adc <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	72fb      	strb	r3, [r7, #11]
 8000aea:	4613      	mov	r3, r2
 8000aec:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 8000aee:	7afb      	ldrb	r3, [r7, #11]
 8000af0:	3b14      	subs	r3, #20
 8000af2:	2b0c      	cmp	r3, #12
 8000af4:	d859      	bhi.n	8000baa <u8x8_byte_stm32_hw_spi+0xce>
 8000af6:	a201      	add	r2, pc, #4	@ (adr r2, 8000afc <u8x8_byte_stm32_hw_spi+0x20>)
 8000af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000afc:	08000b43 	.word	0x08000b43
 8000b00:	08000bab 	.word	0x08000bab
 8000b04:	08000bab 	.word	0x08000bab
 8000b08:	08000b31 	.word	0x08000b31
 8000b0c:	08000b63 	.word	0x08000b63
 8000b10:	08000b87 	.word	0x08000b87
 8000b14:	08000bab 	.word	0x08000bab
 8000b18:	08000bab 	.word	0x08000bab
 8000b1c:	08000bab 	.word	0x08000bab
 8000b20:	08000bab 	.word	0x08000bab
 8000b24:	08000bab 	.word	0x08000bab
 8000b28:	08000bab 	.word	0x08000bab
 8000b2c:	08000b55 	.word	0x08000b55
	    case U8X8_MSG_BYTE_SEND:
	      HAL_SPI_Transmit(&hspi1, (uint8_t*)arg_ptr, arg_int, 1000);
 8000b30:	7abb      	ldrb	r3, [r7, #10]
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b38:	6879      	ldr	r1, [r7, #4]
 8000b3a:	481f      	ldr	r0, [pc, #124]	@ (8000bb8 <u8x8_byte_stm32_hw_spi+0xdc>)
 8000b3c:	f001 fb5a 	bl	80021f4 <HAL_SPI_Transmit>
	      break;
 8000b40:	e035      	b.n	8000bae <u8x8_byte_stm32_hw_spi+0xd2>

	    case U8X8_MSG_BYTE_INIT:
	      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	785b      	ldrb	r3, [r3, #1]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	2149      	movs	r1, #73	@ 0x49
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f004 f86f 	bl	8004c30 <u8x8_gpio_call>
	      break;
 8000b52:	e02c      	b.n	8000bae <u8x8_byte_stm32_hw_spi+0xd2>

	    case U8X8_MSG_BYTE_SET_DC:
	      u8x8_gpio_SetDC(u8x8, arg_int);
 8000b54:	7abb      	ldrb	r3, [r7, #10]
 8000b56:	461a      	mov	r2, r3
 8000b58:	214a      	movs	r1, #74	@ 0x4a
 8000b5a:	68f8      	ldr	r0, [r7, #12]
 8000b5c:	f004 f868 	bl	8004c30 <u8x8_gpio_call>
	      break;
 8000b60:	e025      	b.n	8000bae <u8x8_byte_stm32_hw_spi+0xd2>

	    case U8X8_MSG_BYTE_START_TRANSFER:
	      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	2149      	movs	r1, #73	@ 0x49
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f004 f85f 	bl	8004c30 <u8x8_gpio_call>
	      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	695c      	ldr	r4, [r3, #20]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	789a      	ldrb	r2, [r3, #2]
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	212c      	movs	r1, #44	@ 0x2c
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	47a0      	blx	r4
	      break;
 8000b84:	e013      	b.n	8000bae <u8x8_byte_stm32_hw_spi+0xd2>

	    case U8X8_MSG_BYTE_END_TRANSFER:
	      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	695c      	ldr	r4, [r3, #20]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	78da      	ldrb	r2, [r3, #3]
 8000b90:	2300      	movs	r3, #0
 8000b92:	212c      	movs	r1, #44	@ 0x2c
 8000b94:	68f8      	ldr	r0, [r7, #12]
 8000b96:	47a0      	blx	r4
	      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	785b      	ldrb	r3, [r3, #1]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	2149      	movs	r1, #73	@ 0x49
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f004 f844 	bl	8004c30 <u8x8_gpio_call>
	      break;
 8000ba8:	e001      	b.n	8000bae <u8x8_byte_stm32_hw_spi+0xd2>

	    default:
	      return 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e000      	b.n	8000bb0 <u8x8_byte_stm32_hw_spi+0xd4>
	  }
	  return 1;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd90      	pop	{r4, r7, pc}
 8000bb8:	200000e4 	.word	0x200000e4

08000bbc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000bc0:	4a08      	ldr	r2, [pc, #32]	@ (8000be4 <MX_FREERTOS_Init+0x28>)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4808      	ldr	r0, [pc, #32]	@ (8000be8 <MX_FREERTOS_Init+0x2c>)
 8000bc6:	f004 f92d 	bl	8004e24 <osThreadNew>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4a07      	ldr	r2, [pc, #28]	@ (8000bec <MX_FREERTOS_Init+0x30>)
 8000bce:	6013      	str	r3, [r2, #0]

  /* creation of render_ui_Task */
  render_ui_TaskHandle = osThreadNew(ui_renderer, NULL, &render_ui_Task_attributes);
 8000bd0:	4a07      	ldr	r2, [pc, #28]	@ (8000bf0 <MX_FREERTOS_Init+0x34>)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4807      	ldr	r0, [pc, #28]	@ (8000bf4 <MX_FREERTOS_Init+0x38>)
 8000bd6:	f004 f925 	bl	8004e24 <osThreadNew>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4a06      	ldr	r2, [pc, #24]	@ (8000bf8 <MX_FREERTOS_Init+0x3c>)
 8000bde:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	08007a08 	.word	0x08007a08
 8000be8:	08000bfd 	.word	0x08000bfd
 8000bec:	200000dc 	.word	0x200000dc
 8000bf0:	08007a2c 	.word	0x08007a2c
 8000bf4:	08000c21 	.word	0x08000c21
 8000bf8:	200000e0 	.word	0x200000e0

08000bfc <StartDefaultTask>:
  * @retval None
  */

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(test_light_GPIO_Port, test_light_Pin);
 8000c04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c08:	4804      	ldr	r0, [pc, #16]	@ (8000c1c <StartDefaultTask+0x20>)
 8000c0a:	f000 fe12 	bl	8001832 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000c0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c12:	f000 fb57 	bl	80012c4 <HAL_Delay>
	  HAL_GPIO_TogglePin(test_light_GPIO_Port, test_light_Pin);
 8000c16:	bf00      	nop
 8000c18:	e7f4      	b.n	8000c04 <StartDefaultTask+0x8>
 8000c1a:	bf00      	nop
 8000c1c:	40011000 	.word	0x40011000

08000c20 <ui_renderer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ui_renderer */
void ui_renderer(void *argument)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ui_renderer */

	ui_setup();
 8000c28:	f001 ff64 	bl	8002af4 <ui_setup>

	ui_animation_on(&ui_page_welcome);
 8000c2c:	4813      	ldr	r0, [pc, #76]	@ (8000c7c <ui_renderer+0x5c>)
 8000c2e:	f001 ff81 	bl	8002b34 <ui_animation_on>
  /* Infinite loop */
  for(;;)
  {
	  u8g2_ClearBuffer(&u8g2);
 8000c32:	4813      	ldr	r0, [pc, #76]	@ (8000c80 <ui_renderer+0x60>)
 8000c34:	f002 fa42 	bl	80030bc <u8g2_ClearBuffer>
	  switch(ui_page){
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <ui_renderer+0x64>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d012      	beq.n	8000c66 <ui_renderer+0x46>
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	dc16      	bgt.n	8000c72 <ui_renderer+0x52>
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d002      	beq.n	8000c4e <ui_renderer+0x2e>
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d006      	beq.n	8000c5a <ui_renderer+0x3a>
 8000c4c:	e011      	b.n	8000c72 <ui_renderer+0x52>

	  case UI_Page_Welcome:
		  ui_draw_page(&ui_page_welcome, ui_page_welcome_renderer, easeOutQuad);
 8000c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c88 <ui_renderer+0x68>)
 8000c50:	490e      	ldr	r1, [pc, #56]	@ (8000c8c <ui_renderer+0x6c>)
 8000c52:	480a      	ldr	r0, [pc, #40]	@ (8000c7c <ui_renderer+0x5c>)
 8000c54:	f002 f936 	bl	8002ec4 <ui_draw_page>
		  break;
 8000c58:	e00b      	b.n	8000c72 <ui_renderer+0x52>

	  case UI_Page_Home:
		  ui_draw_page(&ui_page_home, ui_page_home_renderer, easeOutQuad);
 8000c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c88 <ui_renderer+0x68>)
 8000c5c:	490c      	ldr	r1, [pc, #48]	@ (8000c90 <ui_renderer+0x70>)
 8000c5e:	480d      	ldr	r0, [pc, #52]	@ (8000c94 <ui_renderer+0x74>)
 8000c60:	f002 f930 	bl	8002ec4 <ui_draw_page>
		  break;
 8000c64:	e005      	b.n	8000c72 <ui_renderer+0x52>

	  case UI_Page_Menu:
		  ui_draw_page(&ui_page_menu, ui_page_menu_renderer, easeOutQuad);
 8000c66:	4a08      	ldr	r2, [pc, #32]	@ (8000c88 <ui_renderer+0x68>)
 8000c68:	490b      	ldr	r1, [pc, #44]	@ (8000c98 <ui_renderer+0x78>)
 8000c6a:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <ui_renderer+0x7c>)
 8000c6c:	f002 f92a 	bl	8002ec4 <ui_draw_page>
		  break;
 8000c70:	bf00      	nop

	  }
	  vTaskDelay(42);
 8000c72:	202a      	movs	r0, #42	@ 0x2a
 8000c74:	f005 f900 	bl	8005e78 <vTaskDelay>
	  u8g2_ClearBuffer(&u8g2);
 8000c78:	e7db      	b.n	8000c32 <ui_renderer+0x12>
 8000c7a:	bf00      	nop
 8000c7c:	2000003c 	.word	0x2000003c
 8000c80:	200001a8 	.word	0x200001a8
 8000c84:	2000023c 	.word	0x2000023c
 8000c88:	08002df1 	.word	0x08002df1
 8000c8c:	08002a91 	.word	0x08002a91
 8000c90:	08002a6d 	.word	0x08002a6d
 8000c94:	2000000c 	.word	0x2000000c
 8000c98:	08002a7f 	.word	0x08002a7f
 8000c9c:	20000024 	.word	0x20000024

08000ca0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	f107 0310 	add.w	r3, r7, #16
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb4:	4b40      	ldr	r3, [pc, #256]	@ (8000db8 <MX_GPIO_Init+0x118>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a3f      	ldr	r2, [pc, #252]	@ (8000db8 <MX_GPIO_Init+0x118>)
 8000cba:	f043 0310 	orr.w	r3, r3, #16
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b3d      	ldr	r3, [pc, #244]	@ (8000db8 <MX_GPIO_Init+0x118>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8000db8 <MX_GPIO_Init+0x118>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a39      	ldr	r2, [pc, #228]	@ (8000db8 <MX_GPIO_Init+0x118>)
 8000cd2:	f043 0320 	orr.w	r3, r3, #32
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b37      	ldr	r3, [pc, #220]	@ (8000db8 <MX_GPIO_Init+0x118>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0320 	and.w	r3, r3, #32
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce4:	4b34      	ldr	r3, [pc, #208]	@ (8000db8 <MX_GPIO_Init+0x118>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a33      	ldr	r2, [pc, #204]	@ (8000db8 <MX_GPIO_Init+0x118>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b31      	ldr	r3, [pc, #196]	@ (8000db8 <MX_GPIO_Init+0x118>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0304 	and.w	r3, r3, #4
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8000db8 <MX_GPIO_Init+0x118>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a2d      	ldr	r2, [pc, #180]	@ (8000db8 <MX_GPIO_Init+0x118>)
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b2b      	ldr	r3, [pc, #172]	@ (8000db8 <MX_GPIO_Init+0x118>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0308 	and.w	r3, r3, #8
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(test_light_GPIO_Port, test_light_Pin, GPIO_PIN_SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d1a:	4828      	ldr	r0, [pc, #160]	@ (8000dbc <MX_GPIO_Init+0x11c>)
 8000d1c:	f000 fd71 	bl	8001802 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_Pin|CS_Pin|RES_Pin, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2158      	movs	r1, #88	@ 0x58
 8000d24:	4826      	ldr	r0, [pc, #152]	@ (8000dc0 <MX_GPIO_Init+0x120>)
 8000d26:	f000 fd6c 	bl	8001802 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : test_light_Pin */
  GPIO_InitStruct.Pin = test_light_Pin;
 8000d2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(test_light_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	4619      	mov	r1, r3
 8000d42:	481e      	ldr	r0, [pc, #120]	@ (8000dbc <MX_GPIO_Init+0x11c>)
 8000d44:	f000 fbc2 	bl	80014cc <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_Pin CS_Pin RES_Pin */
  GPIO_InitStruct.Pin = DC_Pin|CS_Pin|RES_Pin;
 8000d48:	2358      	movs	r3, #88	@ 0x58
 8000d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4818      	ldr	r0, [pc, #96]	@ (8000dc0 <MX_GPIO_Init+0x120>)
 8000d60:	f000 fbb4 	bl	80014cc <HAL_GPIO_Init>

  /*Configure GPIO pins : encoder_B_Pin encoder_A_Pin button_B_Pin button_A_Pin */
  GPIO_InitStruct.Pin = encoder_B_Pin|encoder_A_Pin|button_B_Pin|button_A_Pin;
 8000d64:	f640 4303 	movw	r3, #3075	@ 0xc03
 8000d68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d6a:	4b16      	ldr	r3, [pc, #88]	@ (8000dc4 <MX_GPIO_Init+0x124>)
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4619      	mov	r1, r3
 8000d78:	4813      	ldr	r0, [pc, #76]	@ (8000dc8 <MX_GPIO_Init+0x128>)
 8000d7a:	f000 fba7 	bl	80014cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2105      	movs	r1, #5
 8000d82:	2006      	movs	r0, #6
 8000d84:	f000 fb77 	bl	8001476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d88:	2006      	movs	r0, #6
 8000d8a:	f000 fb90 	bl	80014ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2105      	movs	r1, #5
 8000d92:	2007      	movs	r0, #7
 8000d94:	f000 fb6f 	bl	8001476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d98:	2007      	movs	r0, #7
 8000d9a:	f000 fb88 	bl	80014ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2105      	movs	r1, #5
 8000da2:	2028      	movs	r0, #40	@ 0x28
 8000da4:	f000 fb67 	bl	8001476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000da8:	2028      	movs	r0, #40	@ 0x28
 8000daa:	f000 fb80 	bl	80014ae <HAL_NVIC_EnableIRQ>

}
 8000dae:	bf00      	nop
 8000db0:	3720      	adds	r7, #32
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40011000 	.word	0x40011000
 8000dc0:	40010800 	.word	0x40010800
 8000dc4:	10210000 	.word	0x10210000
 8000dc8:	40010c00 	.word	0x40010c00

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd0:	f000 fa46 	bl	8001260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd4:	f000 f80c 	bl	8000df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd8:	f7ff ff62 	bl	8000ca0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ddc:	f000 f866 	bl	8000eac <MX_SPI1_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000de0:	f003 ffd8 	bl	8004d94 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000de4:	f7ff feea 	bl	8000bbc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000de8:	f003 fff6 	bl	8004dd8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <main+0x20>

08000df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b090      	sub	sp, #64	@ 0x40
 8000df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df6:	f107 0318 	add.w	r3, r7, #24
 8000dfa:	2228      	movs	r2, #40	@ 0x28
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f006 fcea 	bl	80077d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e12:	2301      	movs	r3, #1
 8000e14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e20:	2301      	movs	r3, #1
 8000e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e24:	2302      	movs	r3, #2
 8000e26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e2e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e34:	f107 0318 	add.w	r3, r7, #24
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fd2b 	bl	8001894 <HAL_RCC_OscConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e44:	f000 f82c 	bl	8000ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e48:	230f      	movs	r3, #15
 8000e4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2102      	movs	r1, #2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 ff98 	bl	8001d98 <HAL_RCC_ClockConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e6e:	f000 f817 	bl	8000ea0 <Error_Handler>
  }
}
 8000e72:	bf00      	nop
 8000e74:	3740      	adds	r7, #64	@ 0x40
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000e8e:	f000 f9fd 	bl	800128c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40012c00 	.word	0x40012c00

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea4:	b672      	cpsid	i
}
 8000ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <Error_Handler+0x8>

08000eac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	@ (8000f10 <MX_SPI1_Init+0x64>)
 8000eb2:	4a18      	ldr	r2, [pc, #96]	@ (8000f14 <MX_SPI1_Init+0x68>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <MX_SPI1_Init+0x64>)
 8000eb8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ebc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ebe:	4b14      	ldr	r3, [pc, #80]	@ (8000f10 <MX_SPI1_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <MX_SPI1_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eca:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <MX_SPI1_Init+0x64>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <MX_SPI1_Init+0x64>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <MX_SPI1_Init+0x64>)
 8000ed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000edc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ede:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <MX_SPI1_Init+0x64>)
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <MX_SPI1_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eea:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <MX_SPI1_Init+0x64>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef0:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <MX_SPI1_Init+0x64>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ef6:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <MX_SPI1_Init+0x64>)
 8000ef8:	220a      	movs	r2, #10
 8000efa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000efc:	4804      	ldr	r0, [pc, #16]	@ (8000f10 <MX_SPI1_Init+0x64>)
 8000efe:	f001 f8f5 	bl	80020ec <HAL_SPI_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f08:	f7ff ffca 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200000e4 	.word	0x200000e4
 8000f14:	40013000 	.word	0x40013000

08000f18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a15      	ldr	r2, [pc, #84]	@ (8000f88 <HAL_SPI_MspInit+0x70>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d123      	bne.n	8000f80 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f38:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <HAL_SPI_MspInit+0x74>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a13      	ldr	r2, [pc, #76]	@ (8000f8c <HAL_SPI_MspInit+0x74>)
 8000f3e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <HAL_SPI_MspInit+0x74>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <HAL_SPI_MspInit+0x74>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <HAL_SPI_MspInit+0x74>)
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <HAL_SPI_MspInit+0x74>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f68:	23a0      	movs	r3, #160	@ 0xa0
 8000f6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <HAL_SPI_MspInit+0x78>)
 8000f7c:	f000 faa6 	bl	80014cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f80:	bf00      	nop
 8000f82:	3720      	adds	r7, #32
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40013000 	.word	0x40013000
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010800 	.word	0x40010800

08000f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f9a:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <HAL_MspInit+0x68>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	4a17      	ldr	r2, [pc, #92]	@ (8000ffc <HAL_MspInit+0x68>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6193      	str	r3, [r2, #24]
 8000fa6:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <HAL_MspInit+0x68>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <HAL_MspInit+0x68>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	4a11      	ldr	r2, [pc, #68]	@ (8000ffc <HAL_MspInit+0x68>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fbc:	61d3      	str	r3, [r2, #28]
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <HAL_MspInit+0x68>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	210f      	movs	r1, #15
 8000fce:	f06f 0001 	mvn.w	r0, #1
 8000fd2:	f000 fa50 	bl	8001476 <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <HAL_MspInit+0x6c>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <HAL_MspInit+0x6c>)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40010000 	.word	0x40010000

08001004 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08c      	sub	sp, #48	@ 0x30
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800100c:	2300      	movs	r3, #0
 800100e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800101a:	4b2e      	ldr	r3, [pc, #184]	@ (80010d4 <HAL_InitTick+0xd0>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	4a2d      	ldr	r2, [pc, #180]	@ (80010d4 <HAL_InitTick+0xd0>)
 8001020:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001024:	6193      	str	r3, [r2, #24]
 8001026:	4b2b      	ldr	r3, [pc, #172]	@ (80010d4 <HAL_InitTick+0xd0>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001032:	f107 020c 	add.w	r2, r7, #12
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f001 f807 	bl	8002050 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001042:	f000 fff1 	bl	8002028 <HAL_RCC_GetPCLK2Freq>
 8001046:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800104a:	4a23      	ldr	r2, [pc, #140]	@ (80010d8 <HAL_InitTick+0xd4>)
 800104c:	fba2 2303 	umull	r2, r3, r2, r3
 8001050:	0c9b      	lsrs	r3, r3, #18
 8001052:	3b01      	subs	r3, #1
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001056:	4b21      	ldr	r3, [pc, #132]	@ (80010dc <HAL_InitTick+0xd8>)
 8001058:	4a21      	ldr	r2, [pc, #132]	@ (80010e0 <HAL_InitTick+0xdc>)
 800105a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800105c:	4b1f      	ldr	r3, [pc, #124]	@ (80010dc <HAL_InitTick+0xd8>)
 800105e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001062:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001064:	4a1d      	ldr	r2, [pc, #116]	@ (80010dc <HAL_InitTick+0xd8>)
 8001066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001068:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800106a:	4b1c      	ldr	r3, [pc, #112]	@ (80010dc <HAL_InitTick+0xd8>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <HAL_InitTick+0xd8>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001076:	4b19      	ldr	r3, [pc, #100]	@ (80010dc <HAL_InitTick+0xd8>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800107c:	4817      	ldr	r0, [pc, #92]	@ (80010dc <HAL_InitTick+0xd8>)
 800107e:	f001 fab6 	bl	80025ee <HAL_TIM_Base_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001088:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800108c:	2b00      	cmp	r3, #0
 800108e:	d11b      	bne.n	80010c8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001090:	4812      	ldr	r0, [pc, #72]	@ (80010dc <HAL_InitTick+0xd8>)
 8001092:	f001 fb05 	bl	80026a0 <HAL_TIM_Base_Start_IT>
 8001096:	4603      	mov	r3, r0
 8001098:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800109c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d111      	bne.n	80010c8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80010a4:	2019      	movs	r0, #25
 80010a6:	f000 fa02 	bl	80014ae <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d808      	bhi.n	80010c2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	2019      	movs	r0, #25
 80010b6:	f000 f9de 	bl	8001476 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ba:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <HAL_InitTick+0xe0>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	e002      	b.n	80010c8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80010c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3730      	adds	r7, #48	@ 0x30
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40021000 	.word	0x40021000
 80010d8:	431bde83 	.word	0x431bde83
 80010dc:	2000013c 	.word	0x2000013c
 80010e0:	40012c00 	.word	0x40012c00
 80010e4:	20000004 	.word	0x20000004

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <NMI_Handler+0x4>

080010f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <HardFault_Handler+0x4>

080010f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <MemManage_Handler+0x4>

08001100 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <UsageFault_Handler+0x4>

08001110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(encoder_B_Pin);
 8001120:	2001      	movs	r0, #1
 8001122:	f000 fb9f 	bl	8001864 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}

0800112a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(encoder_A_Pin);
 800112e:	2002      	movs	r0, #2
 8001130:	f000 fb98 	bl	8001864 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800113c:	4802      	ldr	r0, [pc, #8]	@ (8001148 <TIM1_UP_IRQHandler+0x10>)
 800113e:	f001 fb01 	bl	8002744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000013c 	.word	0x2000013c

0800114c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_B_Pin);
 8001150:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001154:	f000 fb86 	bl	8001864 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button_A_Pin);
 8001158:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800115c:	f000 fb82 	bl	8001864 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == encoder_A_Pin){
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d110      	bne.n	8001196 <HAL_GPIO_EXTI_Callback+0x32>

		if(HAL_GPIO_ReadPin(encoder_B_GPIO_Port, encoder_B_Pin)){ //旋钮 顺时针旋转时触发
 8001174:	2101      	movs	r1, #1
 8001176:	4822      	ldr	r0, [pc, #136]	@ (8001200 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001178:	f000 fb2c 	bl	80017d4 <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <HAL_GPIO_EXTI_Callback+0x32>

			switch(ui_page){
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d002      	beq.n	8001190 <HAL_GPIO_EXTI_Callback+0x2c>
 800118a:	2b02      	cmp	r3, #2
 800118c:	d002      	beq.n	8001194 <HAL_GPIO_EXTI_Callback+0x30>
			case UI_Page_Menu:

				break;

			default:
				break;
 800118e:	e002      	b.n	8001196 <HAL_GPIO_EXTI_Callback+0x32>
				break;
 8001190:	bf00      	nop
 8001192:	e000      	b.n	8001196 <HAL_GPIO_EXTI_Callback+0x32>
				break;
 8001194:	bf00      	nop

	    }

	}

	if(GPIO_Pin == encoder_B_Pin){
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d110      	bne.n	80011be <HAL_GPIO_EXTI_Callback+0x5a>

		if(HAL_GPIO_ReadPin(encoder_A_GPIO_Port, encoder_A_Pin)){ //旋钮 逆时针旋转时触发
 800119c:	2102      	movs	r1, #2
 800119e:	4818      	ldr	r0, [pc, #96]	@ (8001200 <HAL_GPIO_EXTI_Callback+0x9c>)
 80011a0:	f000 fb18 	bl	80017d4 <HAL_GPIO_ReadPin>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d009      	beq.n	80011be <HAL_GPIO_EXTI_Callback+0x5a>

			switch(ui_page){
 80011aa:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <HAL_GPIO_EXTI_Callback+0xa0>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d002      	beq.n	80011b8 <HAL_GPIO_EXTI_Callback+0x54>
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d002      	beq.n	80011bc <HAL_GPIO_EXTI_Callback+0x58>
			case UI_Page_Menu:

				break;

			default:
				break;
 80011b6:	e002      	b.n	80011be <HAL_GPIO_EXTI_Callback+0x5a>
				break;
 80011b8:	bf00      	nop
 80011ba:	e000      	b.n	80011be <HAL_GPIO_EXTI_Callback+0x5a>
				break;
 80011bc:	bf00      	nop

	    }

	}

	if(GPIO_Pin == button_A_Pin){ //按钮A 按下时触发
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80011c4:	d109      	bne.n	80011da <HAL_GPIO_EXTI_Callback+0x76>

		switch(ui_page){
 80011c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <HAL_GPIO_EXTI_Callback+0xa0>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d002      	beq.n	80011d4 <HAL_GPIO_EXTI_Callback+0x70>
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d002      	beq.n	80011d8 <HAL_GPIO_EXTI_Callback+0x74>
		case UI_Page_Menu:

			break;

		default:
			break;
 80011d2:	e002      	b.n	80011da <HAL_GPIO_EXTI_Callback+0x76>
			break;
 80011d4:	bf00      	nop
 80011d6:	e000      	b.n	80011da <HAL_GPIO_EXTI_Callback+0x76>
			break;
 80011d8:	bf00      	nop

		}
	}

	if(GPIO_Pin == button_B_Pin){ //按钮B 按下时触发
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011e0:	d109      	bne.n	80011f6 <HAL_GPIO_EXTI_Callback+0x92>

		switch(ui_page){
 80011e2:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <HAL_GPIO_EXTI_Callback+0xa0>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d002      	beq.n	80011f0 <HAL_GPIO_EXTI_Callback+0x8c>
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d002      	beq.n	80011f4 <HAL_GPIO_EXTI_Callback+0x90>
		case UI_Page_Menu:

			break;

		default:
			break;
 80011ee:	e002      	b.n	80011f6 <HAL_GPIO_EXTI_Callback+0x92>
			break;
 80011f0:	bf00      	nop
 80011f2:	e000      	b.n	80011f6 <HAL_GPIO_EXTI_Callback+0x92>
			break;
 80011f4:	bf00      	nop

		}

	}

}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40010c00 	.word	0x40010c00
 8001204:	2000023c 	.word	0x2000023c

08001208 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001214:	f7ff fff8 	bl	8001208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001218:	480b      	ldr	r0, [pc, #44]	@ (8001248 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800121a:	490c      	ldr	r1, [pc, #48]	@ (800124c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800121c:	4a0c      	ldr	r2, [pc, #48]	@ (8001250 <LoopFillZerobss+0x16>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001220:	e002      	b.n	8001228 <LoopCopyDataInit>

08001222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001226:	3304      	adds	r3, #4

08001228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800122c:	d3f9      	bcc.n	8001222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122e:	4a09      	ldr	r2, [pc, #36]	@ (8001254 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001230:	4c09      	ldr	r4, [pc, #36]	@ (8001258 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001234:	e001      	b.n	800123a <LoopFillZerobss>

08001236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001238:	3204      	adds	r2, #4

0800123a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800123c:	d3fb      	bcc.n	8001236 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800123e:	f006 fb31 	bl	80078a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001242:	f7ff fdc3 	bl	8000dcc <main>
  bx lr
 8001246:	4770      	bx	lr
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001250:	08008704 	.word	0x08008704
  ldr r2, =_sbss
 8001254:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001258:	20002168 	.word	0x20002168

0800125c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC1_2_IRQHandler>
	...

08001260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001264:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <HAL_Init+0x28>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a07      	ldr	r2, [pc, #28]	@ (8001288 <HAL_Init+0x28>)
 800126a:	f043 0310 	orr.w	r3, r3, #16
 800126e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001270:	2003      	movs	r0, #3
 8001272:	f000 f8f5 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001276:	200f      	movs	r0, #15
 8001278:	f7ff fec4 	bl	8001004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800127c:	f7ff fe8a 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40022000 	.word	0x40022000

0800128c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001290:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <HAL_IncTick+0x1c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <HAL_IncTick+0x20>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a03      	ldr	r2, [pc, #12]	@ (80012ac <HAL_IncTick+0x20>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	20000008 	.word	0x20000008
 80012ac:	20000184 	.word	0x20000184

080012b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return uwTick;
 80012b4:	4b02      	ldr	r3, [pc, #8]	@ (80012c0 <HAL_GetTick+0x10>)
 80012b6:	681b      	ldr	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	20000184 	.word	0x20000184

080012c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff fff0 	bl	80012b0 <HAL_GetTick>
 80012d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012dc:	d005      	beq.n	80012ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012de:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <HAL_Delay+0x44>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ea:	bf00      	nop
 80012ec:	f7ff ffe0 	bl	80012b0 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d8f7      	bhi.n	80012ec <HAL_Delay+0x28>
  {
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000008 	.word	0x20000008

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	@ (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	@ (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db0b      	blt.n	800139a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	4906      	ldr	r1, [pc, #24]	@ (80013a4 <__NVIC_EnableIRQ+0x34>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	@ (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	@ (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	@ 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	@ 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff4f 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001488:	f7ff ff64 	bl	8001354 <__NVIC_GetPriorityGrouping>
 800148c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	f7ff ffb2 	bl	80013fc <NVIC_EncodePriority>
 8001498:	4602      	mov	r2, r0
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff81 	bl	80013a8 <__NVIC_SetPriority>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff57 	bl	8001370 <__NVIC_EnableIRQ>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b08b      	sub	sp, #44	@ 0x2c
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014de:	e169      	b.n	80017b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014e0:	2201      	movs	r2, #1
 80014e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	f040 8158 	bne.w	80017ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4a9a      	ldr	r2, [pc, #616]	@ (800176c <HAL_GPIO_Init+0x2a0>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d05e      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 8001508:	4a98      	ldr	r2, [pc, #608]	@ (800176c <HAL_GPIO_Init+0x2a0>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d875      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 800150e:	4a98      	ldr	r2, [pc, #608]	@ (8001770 <HAL_GPIO_Init+0x2a4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d058      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 8001514:	4a96      	ldr	r2, [pc, #600]	@ (8001770 <HAL_GPIO_Init+0x2a4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d86f      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 800151a:	4a96      	ldr	r2, [pc, #600]	@ (8001774 <HAL_GPIO_Init+0x2a8>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d052      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 8001520:	4a94      	ldr	r2, [pc, #592]	@ (8001774 <HAL_GPIO_Init+0x2a8>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d869      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 8001526:	4a94      	ldr	r2, [pc, #592]	@ (8001778 <HAL_GPIO_Init+0x2ac>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d04c      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 800152c:	4a92      	ldr	r2, [pc, #584]	@ (8001778 <HAL_GPIO_Init+0x2ac>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d863      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 8001532:	4a92      	ldr	r2, [pc, #584]	@ (800177c <HAL_GPIO_Init+0x2b0>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d046      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 8001538:	4a90      	ldr	r2, [pc, #576]	@ (800177c <HAL_GPIO_Init+0x2b0>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d85d      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 800153e:	2b12      	cmp	r3, #18
 8001540:	d82a      	bhi.n	8001598 <HAL_GPIO_Init+0xcc>
 8001542:	2b12      	cmp	r3, #18
 8001544:	d859      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 8001546:	a201      	add	r2, pc, #4	@ (adr r2, 800154c <HAL_GPIO_Init+0x80>)
 8001548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154c:	080015c7 	.word	0x080015c7
 8001550:	080015a1 	.word	0x080015a1
 8001554:	080015b3 	.word	0x080015b3
 8001558:	080015f5 	.word	0x080015f5
 800155c:	080015fb 	.word	0x080015fb
 8001560:	080015fb 	.word	0x080015fb
 8001564:	080015fb 	.word	0x080015fb
 8001568:	080015fb 	.word	0x080015fb
 800156c:	080015fb 	.word	0x080015fb
 8001570:	080015fb 	.word	0x080015fb
 8001574:	080015fb 	.word	0x080015fb
 8001578:	080015fb 	.word	0x080015fb
 800157c:	080015fb 	.word	0x080015fb
 8001580:	080015fb 	.word	0x080015fb
 8001584:	080015fb 	.word	0x080015fb
 8001588:	080015fb 	.word	0x080015fb
 800158c:	080015fb 	.word	0x080015fb
 8001590:	080015a9 	.word	0x080015a9
 8001594:	080015bd 	.word	0x080015bd
 8001598:	4a79      	ldr	r2, [pc, #484]	@ (8001780 <HAL_GPIO_Init+0x2b4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d013      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800159e:	e02c      	b.n	80015fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	623b      	str	r3, [r7, #32]
          break;
 80015a6:	e029      	b.n	80015fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	3304      	adds	r3, #4
 80015ae:	623b      	str	r3, [r7, #32]
          break;
 80015b0:	e024      	b.n	80015fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	3308      	adds	r3, #8
 80015b8:	623b      	str	r3, [r7, #32]
          break;
 80015ba:	e01f      	b.n	80015fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	330c      	adds	r3, #12
 80015c2:	623b      	str	r3, [r7, #32]
          break;
 80015c4:	e01a      	b.n	80015fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d102      	bne.n	80015d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ce:	2304      	movs	r3, #4
 80015d0:	623b      	str	r3, [r7, #32]
          break;
 80015d2:	e013      	b.n	80015fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015dc:	2308      	movs	r3, #8
 80015de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	611a      	str	r2, [r3, #16]
          break;
 80015e6:	e009      	b.n	80015fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e8:	2308      	movs	r3, #8
 80015ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	615a      	str	r2, [r3, #20]
          break;
 80015f2:	e003      	b.n	80015fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
          break;
 80015f8:	e000      	b.n	80015fc <HAL_GPIO_Init+0x130>
          break;
 80015fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2bff      	cmp	r3, #255	@ 0xff
 8001600:	d801      	bhi.n	8001606 <HAL_GPIO_Init+0x13a>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	e001      	b.n	800160a <HAL_GPIO_Init+0x13e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3304      	adds	r3, #4
 800160a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2bff      	cmp	r3, #255	@ 0xff
 8001610:	d802      	bhi.n	8001618 <HAL_GPIO_Init+0x14c>
 8001612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	e002      	b.n	800161e <HAL_GPIO_Init+0x152>
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	3b08      	subs	r3, #8
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	210f      	movs	r1, #15
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	401a      	ands	r2, r3
 8001630:	6a39      	ldr	r1, [r7, #32]
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	431a      	orrs	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 80b1 	beq.w	80017ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800164c:	4b4d      	ldr	r3, [pc, #308]	@ (8001784 <HAL_GPIO_Init+0x2b8>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a4c      	ldr	r2, [pc, #304]	@ (8001784 <HAL_GPIO_Init+0x2b8>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b4a      	ldr	r3, [pc, #296]	@ (8001784 <HAL_GPIO_Init+0x2b8>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001664:	4a48      	ldr	r2, [pc, #288]	@ (8001788 <HAL_GPIO_Init+0x2bc>)
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	3302      	adds	r3, #2
 800166c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001670:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	220f      	movs	r2, #15
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	4013      	ands	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a40      	ldr	r2, [pc, #256]	@ (800178c <HAL_GPIO_Init+0x2c0>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d013      	beq.n	80016b8 <HAL_GPIO_Init+0x1ec>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a3f      	ldr	r2, [pc, #252]	@ (8001790 <HAL_GPIO_Init+0x2c4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d00d      	beq.n	80016b4 <HAL_GPIO_Init+0x1e8>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a3e      	ldr	r2, [pc, #248]	@ (8001794 <HAL_GPIO_Init+0x2c8>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d007      	beq.n	80016b0 <HAL_GPIO_Init+0x1e4>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a3d      	ldr	r2, [pc, #244]	@ (8001798 <HAL_GPIO_Init+0x2cc>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d101      	bne.n	80016ac <HAL_GPIO_Init+0x1e0>
 80016a8:	2303      	movs	r3, #3
 80016aa:	e006      	b.n	80016ba <HAL_GPIO_Init+0x1ee>
 80016ac:	2304      	movs	r3, #4
 80016ae:	e004      	b.n	80016ba <HAL_GPIO_Init+0x1ee>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e002      	b.n	80016ba <HAL_GPIO_Init+0x1ee>
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <HAL_GPIO_Init+0x1ee>
 80016b8:	2300      	movs	r3, #0
 80016ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016bc:	f002 0203 	and.w	r2, r2, #3
 80016c0:	0092      	lsls	r2, r2, #2
 80016c2:	4093      	lsls	r3, r2
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ca:	492f      	ldr	r1, [pc, #188]	@ (8001788 <HAL_GPIO_Init+0x2bc>)
 80016cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	3302      	adds	r3, #2
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d006      	beq.n	80016f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016e4:	4b2d      	ldr	r3, [pc, #180]	@ (800179c <HAL_GPIO_Init+0x2d0>)
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	492c      	ldr	r1, [pc, #176]	@ (800179c <HAL_GPIO_Init+0x2d0>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	608b      	str	r3, [r1, #8]
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016f2:	4b2a      	ldr	r3, [pc, #168]	@ (800179c <HAL_GPIO_Init+0x2d0>)
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	4928      	ldr	r1, [pc, #160]	@ (800179c <HAL_GPIO_Init+0x2d0>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d006      	beq.n	800171a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800170c:	4b23      	ldr	r3, [pc, #140]	@ (800179c <HAL_GPIO_Init+0x2d0>)
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	4922      	ldr	r1, [pc, #136]	@ (800179c <HAL_GPIO_Init+0x2d0>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	60cb      	str	r3, [r1, #12]
 8001718:	e006      	b.n	8001728 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800171a:	4b20      	ldr	r3, [pc, #128]	@ (800179c <HAL_GPIO_Init+0x2d0>)
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	43db      	mvns	r3, r3
 8001722:	491e      	ldr	r1, [pc, #120]	@ (800179c <HAL_GPIO_Init+0x2d0>)
 8001724:	4013      	ands	r3, r2
 8001726:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001734:	4b19      	ldr	r3, [pc, #100]	@ (800179c <HAL_GPIO_Init+0x2d0>)
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4918      	ldr	r1, [pc, #96]	@ (800179c <HAL_GPIO_Init+0x2d0>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
 8001740:	e006      	b.n	8001750 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001742:	4b16      	ldr	r3, [pc, #88]	@ (800179c <HAL_GPIO_Init+0x2d0>)
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	43db      	mvns	r3, r3
 800174a:	4914      	ldr	r1, [pc, #80]	@ (800179c <HAL_GPIO_Init+0x2d0>)
 800174c:	4013      	ands	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d021      	beq.n	80017a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800175c:	4b0f      	ldr	r3, [pc, #60]	@ (800179c <HAL_GPIO_Init+0x2d0>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	490e      	ldr	r1, [pc, #56]	@ (800179c <HAL_GPIO_Init+0x2d0>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
 8001768:	e021      	b.n	80017ae <HAL_GPIO_Init+0x2e2>
 800176a:	bf00      	nop
 800176c:	10320000 	.word	0x10320000
 8001770:	10310000 	.word	0x10310000
 8001774:	10220000 	.word	0x10220000
 8001778:	10210000 	.word	0x10210000
 800177c:	10120000 	.word	0x10120000
 8001780:	10110000 	.word	0x10110000
 8001784:	40021000 	.word	0x40021000
 8001788:	40010000 	.word	0x40010000
 800178c:	40010800 	.word	0x40010800
 8001790:	40010c00 	.word	0x40010c00
 8001794:	40011000 	.word	0x40011000
 8001798:	40011400 	.word	0x40011400
 800179c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017a0:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <HAL_GPIO_Init+0x304>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	4909      	ldr	r1, [pc, #36]	@ (80017d0 <HAL_GPIO_Init+0x304>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b0:	3301      	adds	r3, #1
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ba:	fa22 f303 	lsr.w	r3, r2, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f47f ae8e 	bne.w	80014e0 <HAL_GPIO_Init+0x14>
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	372c      	adds	r7, #44	@ 0x2c
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr
 80017d0:	40010400 	.word	0x40010400

080017d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
 80017f0:	e001      	b.n	80017f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	460b      	mov	r3, r1
 800180c:	807b      	strh	r3, [r7, #2]
 800180e:	4613      	mov	r3, r2
 8001810:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001812:	787b      	ldrb	r3, [r7, #1]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001818:	887a      	ldrh	r2, [r7, #2]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800181e:	e003      	b.n	8001828 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001820:	887b      	ldrh	r3, [r7, #2]
 8001822:	041a      	lsls	r2, r3, #16
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	611a      	str	r2, [r3, #16]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001832:	b480      	push	{r7}
 8001834:	b085      	sub	sp, #20
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	460b      	mov	r3, r1
 800183c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001844:	887a      	ldrh	r2, [r7, #2]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4013      	ands	r3, r2
 800184a:	041a      	lsls	r2, r3, #16
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	43d9      	mvns	r1, r3
 8001850:	887b      	ldrh	r3, [r7, #2]
 8001852:	400b      	ands	r3, r1
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	611a      	str	r2, [r3, #16]
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800186e:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	4013      	ands	r3, r2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d006      	beq.n	8001888 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800187a:	4a05      	ldr	r2, [pc, #20]	@ (8001890 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fc6e 	bl	8001164 <HAL_GPIO_EXTI_Callback>
  }
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40010400 	.word	0x40010400

08001894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e272      	b.n	8001d8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 8087 	beq.w	80019c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018b4:	4b92      	ldr	r3, [pc, #584]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d00c      	beq.n	80018da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018c0:	4b8f      	ldr	r3, [pc, #572]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d112      	bne.n	80018f2 <HAL_RCC_OscConfig+0x5e>
 80018cc:	4b8c      	ldr	r3, [pc, #560]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018d8:	d10b      	bne.n	80018f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018da:	4b89      	ldr	r3, [pc, #548]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d06c      	beq.n	80019c0 <HAL_RCC_OscConfig+0x12c>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d168      	bne.n	80019c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e24c      	b.n	8001d8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x76>
 80018fc:	4b80      	ldr	r3, [pc, #512]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a7f      	ldr	r2, [pc, #508]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001902:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	e02e      	b.n	8001968 <HAL_RCC_OscConfig+0xd4>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x98>
 8001912:	4b7b      	ldr	r3, [pc, #492]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a7a      	ldr	r2, [pc, #488]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001918:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4b78      	ldr	r3, [pc, #480]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a77      	ldr	r2, [pc, #476]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001924:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e01d      	b.n	8001968 <HAL_RCC_OscConfig+0xd4>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0xbc>
 8001936:	4b72      	ldr	r3, [pc, #456]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a71      	ldr	r2, [pc, #452]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 800193c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b6f      	ldr	r3, [pc, #444]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a6e      	ldr	r2, [pc, #440]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e00b      	b.n	8001968 <HAL_RCC_OscConfig+0xd4>
 8001950:	4b6b      	ldr	r3, [pc, #428]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a6a      	ldr	r2, [pc, #424]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b68      	ldr	r3, [pc, #416]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a67      	ldr	r2, [pc, #412]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001962:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001966:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d013      	beq.n	8001998 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff fc9e 	bl	80012b0 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff fc9a 	bl	80012b0 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	@ 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e200      	b.n	8001d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	4b5d      	ldr	r3, [pc, #372]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0xe4>
 8001996:	e014      	b.n	80019c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff fc8a 	bl	80012b0 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a0:	f7ff fc86 	bl	80012b0 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	@ 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e1ec      	b.n	8001d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b2:	4b53      	ldr	r3, [pc, #332]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x10c>
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d063      	beq.n	8001a96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019da:	4b49      	ldr	r3, [pc, #292]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d11c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x18c>
 80019e6:	4b46      	ldr	r3, [pc, #280]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d116      	bne.n	8001a20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f2:	4b43      	ldr	r3, [pc, #268]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d005      	beq.n	8001a0a <HAL_RCC_OscConfig+0x176>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d001      	beq.n	8001a0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e1c0      	b.n	8001d8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4939      	ldr	r1, [pc, #228]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1e:	e03a      	b.n	8001a96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d020      	beq.n	8001a6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a28:	4b36      	ldr	r3, [pc, #216]	@ (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fc3f 	bl	80012b0 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff fc3b 	bl	80012b0 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e1a1      	b.n	8001d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a48:	4b2d      	ldr	r3, [pc, #180]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a54:	4b2a      	ldr	r3, [pc, #168]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4927      	ldr	r1, [pc, #156]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]
 8001a68:	e015      	b.n	8001a96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a6a:	4b26      	ldr	r3, [pc, #152]	@ (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff fc1e 	bl	80012b0 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a78:	f7ff fc1a 	bl	80012b0 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e180      	b.n	8001d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d03a      	beq.n	8001b18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d019      	beq.n	8001ade <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aaa:	4b17      	ldr	r3, [pc, #92]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab0:	f7ff fbfe 	bl	80012b0 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab8:	f7ff fbfa 	bl	80012b0 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e160      	b.n	8001d8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aca:	4b0d      	ldr	r3, [pc, #52]	@ (8001b00 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f000 faea 	bl	80020b0 <RCC_Delay>
 8001adc:	e01c      	b.n	8001b18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ade:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae4:	f7ff fbe4 	bl	80012b0 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aea:	e00f      	b.n	8001b0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aec:	f7ff fbe0 	bl	80012b0 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d908      	bls.n	8001b0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e146      	b.n	8001d8c <HAL_RCC_OscConfig+0x4f8>
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	42420000 	.word	0x42420000
 8001b08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0c:	4b92      	ldr	r3, [pc, #584]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1e9      	bne.n	8001aec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 80a6 	beq.w	8001c72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2a:	4b8b      	ldr	r3, [pc, #556]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10d      	bne.n	8001b52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	4b88      	ldr	r3, [pc, #544]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	4a87      	ldr	r2, [pc, #540]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b40:	61d3      	str	r3, [r2, #28]
 8001b42:	4b85      	ldr	r3, [pc, #532]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b52:	4b82      	ldr	r3, [pc, #520]	@ (8001d5c <HAL_RCC_OscConfig+0x4c8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d118      	bne.n	8001b90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d5c <HAL_RCC_OscConfig+0x4c8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a7e      	ldr	r2, [pc, #504]	@ (8001d5c <HAL_RCC_OscConfig+0x4c8>)
 8001b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6a:	f7ff fba1 	bl	80012b0 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b72:	f7ff fb9d 	bl	80012b0 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b64      	cmp	r3, #100	@ 0x64
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e103      	b.n	8001d8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b84:	4b75      	ldr	r3, [pc, #468]	@ (8001d5c <HAL_RCC_OscConfig+0x4c8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x312>
 8001b98:	4b6f      	ldr	r3, [pc, #444]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	4a6e      	ldr	r2, [pc, #440]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6213      	str	r3, [r2, #32]
 8001ba4:	e02d      	b.n	8001c02 <HAL_RCC_OscConfig+0x36e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x334>
 8001bae:	4b6a      	ldr	r3, [pc, #424]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	4a69      	ldr	r2, [pc, #420]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	6213      	str	r3, [r2, #32]
 8001bba:	4b67      	ldr	r3, [pc, #412]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	4a66      	ldr	r2, [pc, #408]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	f023 0304 	bic.w	r3, r3, #4
 8001bc4:	6213      	str	r3, [r2, #32]
 8001bc6:	e01c      	b.n	8001c02 <HAL_RCC_OscConfig+0x36e>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	2b05      	cmp	r3, #5
 8001bce:	d10c      	bne.n	8001bea <HAL_RCC_OscConfig+0x356>
 8001bd0:	4b61      	ldr	r3, [pc, #388]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	4a60      	ldr	r2, [pc, #384]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	6213      	str	r3, [r2, #32]
 8001bdc:	4b5e      	ldr	r3, [pc, #376]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4a5d      	ldr	r2, [pc, #372]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6213      	str	r3, [r2, #32]
 8001be8:	e00b      	b.n	8001c02 <HAL_RCC_OscConfig+0x36e>
 8001bea:	4b5b      	ldr	r3, [pc, #364]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4a5a      	ldr	r2, [pc, #360]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	6213      	str	r3, [r2, #32]
 8001bf6:	4b58      	ldr	r3, [pc, #352]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4a57      	ldr	r2, [pc, #348]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001bfc:	f023 0304 	bic.w	r3, r3, #4
 8001c00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d015      	beq.n	8001c36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0a:	f7ff fb51 	bl	80012b0 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7ff fb4d 	bl	80012b0 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e0b1      	b.n	8001d8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c28:	4b4b      	ldr	r3, [pc, #300]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0ee      	beq.n	8001c12 <HAL_RCC_OscConfig+0x37e>
 8001c34:	e014      	b.n	8001c60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c36:	f7ff fb3b 	bl	80012b0 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3c:	e00a      	b.n	8001c54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3e:	f7ff fb37 	bl	80012b0 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e09b      	b.n	8001d8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c54:	4b40      	ldr	r3, [pc, #256]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ee      	bne.n	8001c3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c66:	4b3c      	ldr	r3, [pc, #240]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	4a3b      	ldr	r2, [pc, #236]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 8087 	beq.w	8001d8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c7c:	4b36      	ldr	r3, [pc, #216]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d061      	beq.n	8001d4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d146      	bne.n	8001d1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c90:	4b33      	ldr	r3, [pc, #204]	@ (8001d60 <HAL_RCC_OscConfig+0x4cc>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7ff fb0b 	bl	80012b0 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7ff fb07 	bl	80012b0 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e06d      	b.n	8001d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb0:	4b29      	ldr	r3, [pc, #164]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f0      	bne.n	8001c9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cc4:	d108      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cc6:	4b24      	ldr	r3, [pc, #144]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	4921      	ldr	r1, [pc, #132]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a19      	ldr	r1, [r3, #32]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce8:	430b      	orrs	r3, r1
 8001cea:	491b      	ldr	r1, [pc, #108]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d60 <HAL_RCC_OscConfig+0x4cc>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf6:	f7ff fadb 	bl	80012b0 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfe:	f7ff fad7 	bl	80012b0 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e03d      	b.n	8001d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d10:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x46a>
 8001d1c:	e035      	b.n	8001d8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1e:	4b10      	ldr	r3, [pc, #64]	@ (8001d60 <HAL_RCC_OscConfig+0x4cc>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fac4 	bl	80012b0 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2c:	f7ff fac0 	bl	80012b0 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e026      	b.n	8001d8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3e:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x498>
 8001d4a:	e01e      	b.n	8001d8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e019      	b.n	8001d8c <HAL_RCC_OscConfig+0x4f8>
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40007000 	.word	0x40007000
 8001d60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d64:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <HAL_RCC_OscConfig+0x500>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d106      	bne.n	8001d86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d001      	beq.n	8001d8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000

08001d98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0d0      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dac:	4b6a      	ldr	r3, [pc, #424]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d910      	bls.n	8001ddc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dba:	4b67      	ldr	r3, [pc, #412]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 0207 	bic.w	r2, r3, #7
 8001dc2:	4965      	ldr	r1, [pc, #404]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dca:	4b63      	ldr	r3, [pc, #396]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0b8      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d020      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df4:	4b59      	ldr	r3, [pc, #356]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4a58      	ldr	r2, [pc, #352]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e0c:	4b53      	ldr	r3, [pc, #332]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	4a52      	ldr	r2, [pc, #328]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001e16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e18:	4b50      	ldr	r3, [pc, #320]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	494d      	ldr	r1, [pc, #308]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d040      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d107      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3e:	4b47      	ldr	r3, [pc, #284]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d115      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e07f      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d107      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e56:	4b41      	ldr	r3, [pc, #260]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d109      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e073      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e66:	4b3d      	ldr	r3, [pc, #244]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e06b      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e76:	4b39      	ldr	r3, [pc, #228]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f023 0203 	bic.w	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	4936      	ldr	r1, [pc, #216]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e88:	f7ff fa12 	bl	80012b0 <HAL_GetTick>
 8001e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8e:	e00a      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e90:	f7ff fa0e 	bl	80012b0 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e053      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 020c 	and.w	r2, r3, #12
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d1eb      	bne.n	8001e90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b27      	ldr	r3, [pc, #156]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d210      	bcs.n	8001ee8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b24      	ldr	r3, [pc, #144]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 0207 	bic.w	r2, r3, #7
 8001ece:	4922      	ldr	r1, [pc, #136]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b20      	ldr	r3, [pc, #128]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e032      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d008      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef4:	4b19      	ldr	r3, [pc, #100]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4916      	ldr	r1, [pc, #88]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d009      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f12:	4b12      	ldr	r3, [pc, #72]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	490e      	ldr	r1, [pc, #56]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f26:	f000 f821 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	490a      	ldr	r1, [pc, #40]	@ (8001f60 <HAL_RCC_ClockConfig+0x1c8>)
 8001f38:	5ccb      	ldrb	r3, [r1, r3]
 8001f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3e:	4a09      	ldr	r2, [pc, #36]	@ (8001f64 <HAL_RCC_ClockConfig+0x1cc>)
 8001f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f42:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <HAL_RCC_ClockConfig+0x1d0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff f85c 	bl	8001004 <HAL_InitTick>

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40022000 	.word	0x40022000
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	08007a50 	.word	0x08007a50
 8001f64:	20000000 	.word	0x20000000
 8001f68:	20000004 	.word	0x20000004

08001f6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f86:	4b1e      	ldr	r3, [pc, #120]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d002      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x30>
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d003      	beq.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x36>
 8001f9a:	e027      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f9c:	4b19      	ldr	r3, [pc, #100]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f9e:	613b      	str	r3, [r7, #16]
      break;
 8001fa0:	e027      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	0c9b      	lsrs	r3, r3, #18
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	4a17      	ldr	r2, [pc, #92]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fac:	5cd3      	ldrb	r3, [r2, r3]
 8001fae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d010      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fba:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	0c5b      	lsrs	r3, r3, #17
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	4a11      	ldr	r2, [pc, #68]	@ (800200c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fc6:	5cd3      	ldrb	r3, [r2, r3]
 8001fc8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fce:	fb03 f202 	mul.w	r2, r3, r2
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	e004      	b.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a0c      	ldr	r2, [pc, #48]	@ (8002010 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fe0:	fb02 f303 	mul.w	r3, r2, r3
 8001fe4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	613b      	str	r3, [r7, #16]
      break;
 8001fea:	e002      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fec:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fee:	613b      	str	r3, [r7, #16]
      break;
 8001ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ff2:	693b      	ldr	r3, [r7, #16]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	371c      	adds	r7, #28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000
 8002004:	007a1200 	.word	0x007a1200
 8002008:	08007a68 	.word	0x08007a68
 800200c:	08007a78 	.word	0x08007a78
 8002010:	003d0900 	.word	0x003d0900

08002014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002018:	4b02      	ldr	r3, [pc, #8]	@ (8002024 <HAL_RCC_GetHCLKFreq+0x10>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	20000000 	.word	0x20000000

08002028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800202c:	f7ff fff2 	bl	8002014 <HAL_RCC_GetHCLKFreq>
 8002030:	4602      	mov	r2, r0
 8002032:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	0adb      	lsrs	r3, r3, #11
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	4903      	ldr	r1, [pc, #12]	@ (800204c <HAL_RCC_GetPCLK2Freq+0x24>)
 800203e:	5ccb      	ldrb	r3, [r1, r3]
 8002040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002044:	4618      	mov	r0, r3
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40021000 	.word	0x40021000
 800204c:	08007a60 	.word	0x08007a60

08002050 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	220f      	movs	r2, #15
 800205e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002060:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <HAL_RCC_GetClockConfig+0x58>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0203 	and.w	r2, r3, #3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800206c:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <HAL_RCC_GetClockConfig+0x58>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002078:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <HAL_RCC_GetClockConfig+0x58>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002084:	4b08      	ldr	r3, [pc, #32]	@ (80020a8 <HAL_RCC_GetClockConfig+0x58>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	08db      	lsrs	r3, r3, #3
 800208a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002092:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <HAL_RCC_GetClockConfig+0x5c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0207 	and.w	r2, r3, #7
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40022000 	.word	0x40022000

080020b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020b8:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <RCC_Delay+0x34>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0a      	ldr	r2, [pc, #40]	@ (80020e8 <RCC_Delay+0x38>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	0a5b      	lsrs	r3, r3, #9
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020cc:	bf00      	nop
  }
  while (Delay --);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1e5a      	subs	r2, r3, #1
 80020d2:	60fa      	str	r2, [r7, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f9      	bne.n	80020cc <RCC_Delay+0x1c>
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	20000000 	.word	0x20000000
 80020e8:	10624dd3 	.word	0x10624dd3

080020ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e076      	b.n	80021ec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002102:	2b00      	cmp	r3, #0
 8002104:	d108      	bne.n	8002118 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800210e:	d009      	beq.n	8002124 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	61da      	str	r2, [r3, #28]
 8002116:	e005      	b.n	8002124 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d106      	bne.n	8002144 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7fe feea 	bl	8000f18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2202      	movs	r2, #2
 8002148:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800215a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a8:	ea42 0103 	orr.w	r1, r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	0c1a      	lsrs	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f002 0204 	and.w	r2, r2, #4
 80021ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	69da      	ldr	r2, [r3, #28]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	4613      	mov	r3, r2
 8002202:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002204:	f7ff f854 	bl	80012b0 <HAL_GetTick>
 8002208:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d001      	beq.n	800221e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800221a:	2302      	movs	r3, #2
 800221c:	e12a      	b.n	8002474 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <HAL_SPI_Transmit+0x36>
 8002224:	88fb      	ldrh	r3, [r7, #6]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e122      	b.n	8002474 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_SPI_Transmit+0x48>
 8002238:	2302      	movs	r3, #2
 800223a:	e11b      	b.n	8002474 <HAL_SPI_Transmit+0x280>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2203      	movs	r2, #3
 8002248:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	88fa      	ldrh	r2, [r7, #6]
 800225c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	88fa      	ldrh	r2, [r7, #6]
 8002262:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800228a:	d10f      	bne.n	80022ac <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800229a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b6:	2b40      	cmp	r3, #64	@ 0x40
 80022b8:	d007      	beq.n	80022ca <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022d2:	d152      	bne.n	800237a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <HAL_SPI_Transmit+0xee>
 80022dc:	8b7b      	ldrh	r3, [r7, #26]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d145      	bne.n	800236e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	881a      	ldrh	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	1c9a      	adds	r2, r3, #2
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002306:	e032      	b.n	800236e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b02      	cmp	r3, #2
 8002314:	d112      	bne.n	800233c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	881a      	ldrh	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	1c9a      	adds	r2, r3, #2
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002330:	b29b      	uxth	r3, r3
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	86da      	strh	r2, [r3, #54]	@ 0x36
 800233a:	e018      	b.n	800236e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800233c:	f7fe ffb8 	bl	80012b0 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d803      	bhi.n	8002354 <HAL_SPI_Transmit+0x160>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002352:	d102      	bne.n	800235a <HAL_SPI_Transmit+0x166>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e082      	b.n	8002474 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002372:	b29b      	uxth	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1c7      	bne.n	8002308 <HAL_SPI_Transmit+0x114>
 8002378:	e053      	b.n	8002422 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <HAL_SPI_Transmit+0x194>
 8002382:	8b7b      	ldrh	r3, [r7, #26]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d147      	bne.n	8002418 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	330c      	adds	r3, #12
 8002392:	7812      	ldrb	r2, [r2, #0]
 8002394:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023ae:	e033      	b.n	8002418 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d113      	bne.n	80023e6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	330c      	adds	r3, #12
 80023c8:	7812      	ldrb	r2, [r2, #0]
 80023ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80023e4:	e018      	b.n	8002418 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023e6:	f7fe ff63 	bl	80012b0 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d803      	bhi.n	80023fe <HAL_SPI_Transmit+0x20a>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fc:	d102      	bne.n	8002404 <HAL_SPI_Transmit+0x210>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e02d      	b.n	8002474 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1c6      	bne.n	80023b0 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002422:	69fa      	ldr	r2, [r7, #28]
 8002424:	6839      	ldr	r1, [r7, #0]
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f8b0 	bl	800258c <SPI_EndRxTxTransaction>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2220      	movs	r2, #32
 8002436:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10a      	bne.n	8002456 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002472:	2300      	movs	r3, #0
  }
}
 8002474:	4618      	mov	r0, r3
 8002476:	3720      	adds	r7, #32
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	4613      	mov	r3, r2
 800248a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800248c:	f7fe ff10 	bl	80012b0 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	4413      	add	r3, r2
 800249a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800249c:	f7fe ff08 	bl	80012b0 <HAL_GetTick>
 80024a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024a2:	4b39      	ldr	r3, [pc, #228]	@ (8002588 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	015b      	lsls	r3, r3, #5
 80024a8:	0d1b      	lsrs	r3, r3, #20
 80024aa:	69fa      	ldr	r2, [r7, #28]
 80024ac:	fb02 f303 	mul.w	r3, r2, r3
 80024b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024b2:	e054      	b.n	800255e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ba:	d050      	beq.n	800255e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024bc:	f7fe fef8 	bl	80012b0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d902      	bls.n	80024d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d13d      	bne.n	800254e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80024e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024ea:	d111      	bne.n	8002510 <SPI_WaitFlagStateUntilTimeout+0x94>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024f4:	d004      	beq.n	8002500 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024fe:	d107      	bne.n	8002510 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800250e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002514:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002518:	d10f      	bne.n	800253a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002538:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e017      	b.n	800257e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	3b01      	subs	r3, #1
 800255c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4013      	ands	r3, r2
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	429a      	cmp	r2, r3
 800256c:	bf0c      	ite	eq
 800256e:	2301      	moveq	r3, #1
 8002570:	2300      	movne	r3, #0
 8002572:	b2db      	uxtb	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	429a      	cmp	r2, r3
 800257a:	d19b      	bne.n	80024b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3720      	adds	r7, #32
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000000 	.word	0x20000000

0800258c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af02      	add	r7, sp, #8
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2201      	movs	r2, #1
 80025a0:	2102      	movs	r1, #2
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f7ff ff6a 	bl	800247c <SPI_WaitFlagStateUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d007      	beq.n	80025be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b2:	f043 0220 	orr.w	r2, r3, #32
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e013      	b.n	80025e6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2200      	movs	r2, #0
 80025c6:	2180      	movs	r1, #128	@ 0x80
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f7ff ff57 	bl	800247c <SPI_WaitFlagStateUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d007      	beq.n	80025e4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d8:	f043 0220 	orr.w	r2, r3, #32
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e000      	b.n	80025e6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e041      	b.n	8002684 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d106      	bne.n	800261a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f839 	bl	800268c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2202      	movs	r2, #2
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3304      	adds	r3, #4
 800262a:	4619      	mov	r1, r3
 800262c:	4610      	mov	r0, r2
 800262e:	f000 f99d 	bl	800296c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr
	...

080026a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d001      	beq.n	80026b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e03a      	b.n	800272e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a18      	ldr	r2, [pc, #96]	@ (8002738 <HAL_TIM_Base_Start_IT+0x98>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00e      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x58>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026e2:	d009      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x58>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a14      	ldr	r2, [pc, #80]	@ (800273c <HAL_TIM_Base_Start_IT+0x9c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d004      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x58>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a13      	ldr	r2, [pc, #76]	@ (8002740 <HAL_TIM_Base_Start_IT+0xa0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d111      	bne.n	800271c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b06      	cmp	r3, #6
 8002708:	d010      	beq.n	800272c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0201 	orr.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271a:	e007      	b.n	800272c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	40012c00 	.word	0x40012c00
 800273c:	40000400 	.word	0x40000400
 8002740:	40000800 	.word	0x40000800

08002744 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d020      	beq.n	80027a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d01b      	beq.n	80027a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0202 	mvn.w	r2, #2
 8002778:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f8d1 	bl	8002936 <HAL_TIM_IC_CaptureCallback>
 8002794:	e005      	b.n	80027a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f8c4 	bl	8002924 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f8d3 	bl	8002948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d020      	beq.n	80027f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01b      	beq.n	80027f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0204 	mvn.w	r2, #4
 80027c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2202      	movs	r2, #2
 80027ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f8ab 	bl	8002936 <HAL_TIM_IC_CaptureCallback>
 80027e0:	e005      	b.n	80027ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f89e 	bl	8002924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f8ad 	bl	8002948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d020      	beq.n	8002840 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d01b      	beq.n	8002840 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0208 	mvn.w	r2, #8
 8002810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2204      	movs	r2, #4
 8002816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f885 	bl	8002936 <HAL_TIM_IC_CaptureCallback>
 800282c:	e005      	b.n	800283a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f878 	bl	8002924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f887 	bl	8002948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	2b00      	cmp	r3, #0
 8002848:	d020      	beq.n	800288c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01b      	beq.n	800288c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0210 	mvn.w	r2, #16
 800285c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2208      	movs	r2, #8
 8002862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f85f 	bl	8002936 <HAL_TIM_IC_CaptureCallback>
 8002878:	e005      	b.n	8002886 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f852 	bl	8002924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f861 	bl	8002948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00c      	beq.n	80028b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d007      	beq.n	80028b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0201 	mvn.w	r2, #1
 80028a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe fae6 	bl	8000e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00c      	beq.n	80028d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d007      	beq.n	80028d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80028cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f8c3 	bl	8002a5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00c      	beq.n	80028f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d007      	beq.n	80028f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80028f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f831 	bl	800295a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00c      	beq.n	800291c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b00      	cmp	r3, #0
 800290a:	d007      	beq.n	800291c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f06f 0220 	mvn.w	r2, #32
 8002914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f896 	bl	8002a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800291c:	bf00      	nop
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr

0800295a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a2f      	ldr	r2, [pc, #188]	@ (8002a3c <TIM_Base_SetConfig+0xd0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d00b      	beq.n	800299c <TIM_Base_SetConfig+0x30>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800298a:	d007      	beq.n	800299c <TIM_Base_SetConfig+0x30>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a2c      	ldr	r2, [pc, #176]	@ (8002a40 <TIM_Base_SetConfig+0xd4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d003      	beq.n	800299c <TIM_Base_SetConfig+0x30>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a2b      	ldr	r2, [pc, #172]	@ (8002a44 <TIM_Base_SetConfig+0xd8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d108      	bne.n	80029ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a22      	ldr	r2, [pc, #136]	@ (8002a3c <TIM_Base_SetConfig+0xd0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00b      	beq.n	80029ce <TIM_Base_SetConfig+0x62>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029bc:	d007      	beq.n	80029ce <TIM_Base_SetConfig+0x62>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a40 <TIM_Base_SetConfig+0xd4>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d003      	beq.n	80029ce <TIM_Base_SetConfig+0x62>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002a44 <TIM_Base_SetConfig+0xd8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d108      	bne.n	80029e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a0d      	ldr	r2, [pc, #52]	@ (8002a3c <TIM_Base_SetConfig+0xd0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d103      	bne.n	8002a14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f023 0201 	bic.w	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	611a      	str	r2, [r3, #16]
  }
}
 8002a32:	bf00      	nop
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	40012c00 	.word	0x40012c00
 8002a40:	40000400 	.word	0x40000400
 8002a44:	40000800 	.word	0x40000800

08002a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr

08002a5a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <ui_page_home_renderer>:
		.h = 0, 	//高度
		.r = 0  	//圆角
	}
};

void ui_page_home_renderer(UI_Animation_data* ani_dat){
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]



}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr

08002a7e <ui_page_menu_renderer>:
		.h = 0, 	//高度
		.r = 0  	//圆角
	}
};

void ui_page_menu_renderer(UI_Animation_data* ani_dat){
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]



}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <ui_page_welcome_renderer>:
		.h = 0, 	//高度
		.r = 0  	//圆角
	}
};

void ui_page_welcome_renderer(UI_Animation_data* ani_dat){
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	6078      	str	r0, [r7, #4]

	u8g2_DrawRBox(&u8g2, 16, ani_dat->cur_dat->y + 49, 96, 2, 1);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	88db      	ldrh	r3, [r3, #6]
 8002a9e:	b21b      	sxth	r3, r3
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	3331      	adds	r3, #49	@ 0x31
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	2302      	movs	r3, #2
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	2360      	movs	r3, #96	@ 0x60
 8002ab0:	2110      	movs	r1, #16
 8002ab2:	480d      	ldr	r0, [pc, #52]	@ (8002ae8 <ui_page_welcome_renderer+0x58>)
 8002ab4:	f000 fa52 	bl	8002f5c <u8g2_DrawRBox>

	(&ui_el_str)->tar_dat->y = ani_dat->cur_dat->y + 48;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	88db      	ldrh	r3, [r3, #6]
 8002abe:	b21b      	sxth	r3, r3
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	3330      	adds	r3, #48	@ 0x30
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	4b09      	ldr	r3, [pc, #36]	@ (8002aec <ui_page_welcome_renderer+0x5c>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	b212      	sxth	r2, r2
 8002acc:	80da      	strh	r2, [r3, #6]

	ui_animation_on(&ui_el_str);
 8002ace:	4807      	ldr	r0, [pc, #28]	@ (8002aec <ui_page_welcome_renderer+0x5c>)
 8002ad0:	f000 f830 	bl	8002b34 <ui_animation_on>
	ui_draw_element(UI_Element_Type_Str, &ui_el_str, easeOutQuad);
 8002ad4:	4a06      	ldr	r2, [pc, #24]	@ (8002af0 <ui_page_welcome_renderer+0x60>)
 8002ad6:	4905      	ldr	r1, [pc, #20]	@ (8002aec <ui_page_welcome_renderer+0x5c>)
 8002ad8:	2001      	movs	r0, #1
 8002ada:	f000 f9a3 	bl	8002e24 <ui_draw_element>

}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	200001a8 	.word	0x200001a8
 8002aec:	2000005c 	.word	0x2000005c
 8002af0:	08002df1 	.word	0x08002df1

08002af4 <ui_setup>:
		.h = 0, 	//高度
		.r = 0  	//圆角
	}
};

void ui_setup(){
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0

	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi, u8x8_gpio_and_delay_stm32);
 8002af8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b24 <ui_setup+0x30>)
 8002afa:	4a0b      	ldr	r2, [pc, #44]	@ (8002b28 <ui_setup+0x34>)
 8002afc:	490b      	ldr	r1, [pc, #44]	@ (8002b2c <ui_setup+0x38>)
 8002afe:	480c      	ldr	r0, [pc, #48]	@ (8002b30 <ui_setup+0x3c>)
 8002b00:	f000 fc92 	bl	8003428 <u8g2_Setup_ssd1306_128x64_noname_f>

	u8g2_InitDisplay(&u8g2);
 8002b04:	480a      	ldr	r0, [pc, #40]	@ (8002b30 <ui_setup+0x3c>)
 8002b06:	f002 f864 	bl	8004bd2 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4808      	ldr	r0, [pc, #32]	@ (8002b30 <ui_setup+0x3c>)
 8002b0e:	f002 f86f 	bl	8004bf0 <u8x8_SetPowerSave>

	u8g2_ClearBuffer(&u8g2);
 8002b12:	4807      	ldr	r0, [pc, #28]	@ (8002b30 <ui_setup+0x3c>)
 8002b14:	f000 fad2 	bl	80030bc <u8g2_ClearBuffer>

	u8g2_SendBuffer(&u8g2);
 8002b18:	4805      	ldr	r0, [pc, #20]	@ (8002b30 <ui_setup+0x3c>)
 8002b1a:	f000 fb42 	bl	80031a2 <u8g2_SendBuffer>

}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	08000a65 	.word	0x08000a65
 8002b28:	08000add 	.word	0x08000add
 8002b2c:	08008680 	.word	0x08008680
 8002b30:	200001a8 	.word	0x200001a8

08002b34 <ui_animation_on>:
 *      Author: QkLia
 */

#include "ui_animation.h"

void ui_animation_on(UI_Animation_data* ani_dat){
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]

	if(ani_dat->state == UI_Animation_Stop){
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	791b      	ldrb	r3, [r3, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d102      	bne.n	8002b4a <ui_animation_on+0x16>
		ani_dat->state = UI_Animation_Idle;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	711a      	strb	r2, [r3, #4]
	}

}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	0000      	movs	r0, r0
	...

08002b58 <ui_animation_calculator>:

void ui_animation_calculator(UI_Animation_data* ani_dat, float(*animation_func)(float)){
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]

	if(ani_dat->state == UI_Animation_Idle){
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	791b      	ldrb	r3, [r3, #4]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d107      	bne.n	8002b7a <ui_animation_calculator+0x22>
		ani_dat->now_time = 0;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
		ani_dat->state = UI_Animation_Running;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2202      	movs	r2, #2
 8002b76:	711a      	strb	r2, [r3, #4]
 8002b78:	e016      	b.n	8002ba8 <ui_animation_calculator+0x50>
	}
	else if(ani_dat->state == UI_Animation_Running){
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	791b      	ldrb	r3, [r3, #4]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d112      	bne.n	8002ba8 <ui_animation_calculator+0x50>
		ani_dat->now_time += 0.042;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fd fcfa 	bl	8000580 <__aeabi_f2d>
 8002b8c:	a396      	add	r3, pc, #600	@ (adr r3, 8002de8 <ui_animation_calculator+0x290>)
 8002b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b92:	f7fd fb97 	bl	80002c4 <__adddf3>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f7fd fd47 	bl	8000630 <__aeabi_d2f>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	601a      	str	r2, [r3, #0]
	}

	if(ani_dat->now_time >= 1){
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fd fefd 	bl	80009b0 <__aeabi_fcmpge>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <ui_animation_calculator+0x6a>
		ani_dat->state = UI_Animation_Stop;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	711a      	strb	r2, [r3, #4]
	}

	 // 如果处于过渡状态
	if (ani_dat->state == UI_Animation_Running){
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	791b      	ldrb	r3, [r3, #4]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	f040 80e7 	bne.w	8002d9a <ui_animation_calculator+0x242>

		int16_t ex = ani_dat->tar_dat->x - ani_dat->cur_dat->x;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	889b      	ldrh	r3, [r3, #4]
 8002bd2:	b21b      	sxth	r3, r3
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	889b      	ldrh	r3, [r3, #4]
 8002bdc:	b21b      	sxth	r3, r3
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	82fb      	strh	r3, [r7, #22]
		int16_t ey = ani_dat->tar_dat->y - ani_dat->cur_dat->y;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	88db      	ldrh	r3, [r3, #6]
 8002bec:	b21b      	sxth	r3, r3
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	88db      	ldrh	r3, [r3, #6]
 8002bf6:	b21b      	sxth	r3, r3
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	82bb      	strh	r3, [r7, #20]
		int8_t ew = ani_dat->tar_dat->w - ani_dat->cur_dat->w;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	74fb      	strb	r3, [r7, #19]
		int8_t eh = ani_dat->tar_dat->h - ani_dat->cur_dat->h;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	785b      	ldrb	r3, [r3, #1]
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	785b      	ldrb	r3, [r3, #1]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	74bb      	strb	r3, [r7, #18]
		int8_t er = ani_dat->tar_dat->r - ani_dat->cur_dat->r;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	789b      	ldrb	r3, [r3, #2]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	789b      	ldrb	r3, [r3, #2]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	747b      	strb	r3, [r7, #17]

		float easedProgress = animation_func(ani_dat->now_time);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4798      	blx	r3
 8002c4c:	60f8      	str	r0, [r7, #12]
		// 更新原始数据为当前状态
		ani_dat->cur_dat->x += ex * easedProgress;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	889b      	ldrh	r3, [r3, #4]
 8002c54:	b21b      	sxth	r3, r3
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fd fdf4 	bl	8000844 <__aeabi_i2f>
 8002c5c:	4604      	mov	r4, r0
 8002c5e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fdee 	bl	8000844 <__aeabi_i2f>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	68f9      	ldr	r1, [r7, #12]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fd fa6f 	bl	8000150 <__aeabi_fmul>
 8002c72:	4603      	mov	r3, r0
 8002c74:	4619      	mov	r1, r3
 8002c76:	4620      	mov	r0, r4
 8002c78:	f7fd fd30 	bl	80006dc <__addsf3>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	461a      	mov	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689c      	ldr	r4, [r3, #8]
 8002c84:	4610      	mov	r0, r2
 8002c86:	f7fd fea7 	bl	80009d8 <__aeabi_f2iz>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	b21b      	sxth	r3, r3
 8002c8e:	80a3      	strh	r3, [r4, #4]
		ani_dat->cur_dat->y += ey * easedProgress;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	88db      	ldrh	r3, [r3, #6]
 8002c96:	b21b      	sxth	r3, r3
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fd fdd3 	bl	8000844 <__aeabi_i2f>
 8002c9e:	4604      	mov	r4, r0
 8002ca0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd fdcd 	bl	8000844 <__aeabi_i2f>
 8002caa:	4603      	mov	r3, r0
 8002cac:	68f9      	ldr	r1, [r7, #12]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fd fa4e 	bl	8000150 <__aeabi_fmul>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f7fd fd0f 	bl	80006dc <__addsf3>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689c      	ldr	r4, [r3, #8]
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	f7fd fe86 	bl	80009d8 <__aeabi_f2iz>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	b21b      	sxth	r3, r3
 8002cd0:	80e3      	strh	r3, [r4, #6]
		ani_dat->cur_dat->w += ew * easedProgress;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fdb2 	bl	8000844 <__aeabi_i2f>
 8002ce0:	4604      	mov	r4, r0
 8002ce2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fd fdac 	bl	8000844 <__aeabi_i2f>
 8002cec:	4603      	mov	r3, r0
 8002cee:	68f9      	ldr	r1, [r7, #12]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fd fa2d 	bl	8000150 <__aeabi_fmul>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f7fd fcee 	bl	80006dc <__addsf3>
 8002d00:	4603      	mov	r3, r0
 8002d02:	461a      	mov	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689c      	ldr	r4, [r3, #8]
 8002d08:	4610      	mov	r0, r2
 8002d0a:	f7fd fe8b 	bl	8000a24 <__aeabi_f2uiz>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	7023      	strb	r3, [r4, #0]
		ani_dat->cur_dat->h += eh * easedProgress;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	785b      	ldrb	r3, [r3, #1]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fd fd91 	bl	8000844 <__aeabi_i2f>
 8002d22:	4604      	mov	r4, r0
 8002d24:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fd fd8b 	bl	8000844 <__aeabi_i2f>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	68f9      	ldr	r1, [r7, #12]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd fa0c 	bl	8000150 <__aeabi_fmul>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f7fd fccd 	bl	80006dc <__addsf3>
 8002d42:	4603      	mov	r3, r0
 8002d44:	461a      	mov	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689c      	ldr	r4, [r3, #8]
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	f7fd fe6a 	bl	8000a24 <__aeabi_f2uiz>
 8002d50:	4603      	mov	r3, r0
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	7063      	strb	r3, [r4, #1]
		ani_dat->cur_dat->r += er * easedProgress;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	789b      	ldrb	r3, [r3, #2]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd fd70 	bl	8000844 <__aeabi_i2f>
 8002d64:	4604      	mov	r4, r0
 8002d66:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fd fd6a 	bl	8000844 <__aeabi_i2f>
 8002d70:	4603      	mov	r3, r0
 8002d72:	68f9      	ldr	r1, [r7, #12]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fd f9eb 	bl	8000150 <__aeabi_fmul>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f7fd fcac 	bl	80006dc <__addsf3>
 8002d84:	4603      	mov	r3, r0
 8002d86:	461a      	mov	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689c      	ldr	r4, [r3, #8]
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	f7fd fe49 	bl	8000a24 <__aeabi_f2uiz>
 8002d92:	4603      	mov	r3, r0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	70a3      	strb	r3, [r4, #2]
		ani_dat->cur_dat->w = ani_dat->tar_dat->w;
		ani_dat->cur_dat->h = ani_dat->tar_dat->h;
		ani_dat->cur_dat->r = ani_dat->tar_dat->r;
	}

}
 8002d98:	e022      	b.n	8002de0 <ui_animation_calculator+0x288>
		ani_dat->cur_dat->x = ani_dat->tar_dat->x;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	8892      	ldrh	r2, [r2, #4]
 8002da4:	b212      	sxth	r2, r2
 8002da6:	809a      	strh	r2, [r3, #4]
		ani_dat->cur_dat->y = ani_dat->tar_dat->y;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	88d2      	ldrh	r2, [r2, #6]
 8002db2:	b212      	sxth	r2, r2
 8002db4:	80da      	strh	r2, [r3, #6]
		ani_dat->cur_dat->w = ani_dat->tar_dat->w;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	7812      	ldrb	r2, [r2, #0]
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	701a      	strb	r2, [r3, #0]
		ani_dat->cur_dat->h = ani_dat->tar_dat->h;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	7852      	ldrb	r2, [r2, #1]
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	705a      	strb	r2, [r3, #1]
		ani_dat->cur_dat->r = ani_dat->tar_dat->r;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	7892      	ldrb	r2, [r2, #2]
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	709a      	strb	r2, [r3, #2]
}
 8002de0:	bf00      	nop
 8002de2:	371c      	adds	r7, #28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd90      	pop	{r4, r7, pc}
 8002de8:	24dd2f1b 	.word	0x24dd2f1b
 8002dec:	3fa58106 	.word	0x3fa58106

08002df0 <easeOutQuad>:
    } else {
        return -2 * t * t + 4 * t - 1;
    }
}

float easeOutQuad(float t){ //缓出
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	return 2 * t - t * t;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7fd fc6d 	bl	80006dc <__addsf3>
 8002e02:	4603      	mov	r3, r0
 8002e04:	461c      	mov	r4, r3
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7fd f9a1 	bl	8000150 <__aeabi_fmul>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4619      	mov	r1, r3
 8002e12:	4620      	mov	r0, r4
 8002e14:	f7fd fc60 	bl	80006d8 <__aeabi_fsub>
 8002e18:	4603      	mov	r3, r0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd90      	pop	{r4, r7, pc}
	...

08002e24 <ui_draw_element>:
 */

#include "ui_element.h"


void ui_draw_element(UI_Element_Type el_type, UI_Animation_data* ani_dat, float(*animation_func)(float)){
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	73fb      	strb	r3, [r7, #15]

	switch(el_type){
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d002      	beq.n	8002e3e <ui_draw_element+0x1a>
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d01f      	beq.n	8002e7c <ui_draw_element+0x58>
 8002e3c:	e031      	b.n	8002ea2 <ui_draw_element+0x7e>

	case UI_Element_Type_RBOX:
		u8g2_DrawRBox(&u8g2, ani_dat->cur_dat->x, ani_dat->cur_dat->y, ani_dat->cur_dat->w, ani_dat->cur_dat->h, ani_dat->cur_dat->r);
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	889b      	ldrh	r3, [r3, #4]
 8002e44:	b21b      	sxth	r3, r3
 8002e46:	b299      	uxth	r1, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	88db      	ldrh	r3, [r3, #6]
 8002e4e:	b21b      	sxth	r3, r3
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	461c      	mov	r4, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	785b      	ldrb	r3, [r3, #1]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	4618      	mov	r0, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	789b      	ldrb	r3, [r3, #2]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	9301      	str	r3, [sp, #4]
 8002e70:	9000      	str	r0, [sp, #0]
 8002e72:	4623      	mov	r3, r4
 8002e74:	4810      	ldr	r0, [pc, #64]	@ (8002eb8 <ui_draw_element+0x94>)
 8002e76:	f000 f871 	bl	8002f5c <u8g2_DrawRBox>
		break;
 8002e7a:	e012      	b.n	8002ea2 <ui_draw_element+0x7e>
	case UI_Element_Type_Str:
		u8g2_SetFont(&u8g2, u8g2_font_logisoso16_tf);
 8002e7c:	490f      	ldr	r1, [pc, #60]	@ (8002ebc <ui_draw_element+0x98>)
 8002e7e:	480e      	ldr	r0, [pc, #56]	@ (8002eb8 <ui_draw_element+0x94>)
 8002e80:	f001 f87c 	bl	8003f7c <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, ani_dat->cur_dat->x, ani_dat->cur_dat->y, "welcome");
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	889b      	ldrh	r3, [r3, #4]
 8002e8a:	b21b      	sxth	r3, r3
 8002e8c:	b299      	uxth	r1, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	88db      	ldrh	r3, [r3, #6]
 8002e94:	b21b      	sxth	r3, r3
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	4b09      	ldr	r3, [pc, #36]	@ (8002ec0 <ui_draw_element+0x9c>)
 8002e9a:	4807      	ldr	r0, [pc, #28]	@ (8002eb8 <ui_draw_element+0x94>)
 8002e9c:	f000 ffd0 	bl	8003e40 <u8g2_DrawStr>

		break;
 8002ea0:	bf00      	nop
	}

	u8g2_SendBuffer(&u8g2);
 8002ea2:	4805      	ldr	r0, [pc, #20]	@ (8002eb8 <ui_draw_element+0x94>)
 8002ea4:	f000 f97d 	bl	80031a2 <u8g2_SendBuffer>

	ui_animation_calculator(ani_dat, animation_func);
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	68b8      	ldr	r0, [r7, #8]
 8002eac:	f7ff fe54 	bl	8002b58 <ui_animation_calculator>

}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd90      	pop	{r4, r7, pc}
 8002eb8:	200001a8 	.word	0x200001a8
 8002ebc:	08007a7c 	.word	0x08007a7c
 8002ec0:	080079e8 	.word	0x080079e8

08002ec4 <ui_draw_page>:

#include "ui_pages.h"

UI_Page ui_page = UI_Page_Welcome;

void ui_draw_page(UI_Animation_data* ani_dat, void(*page_renderer)(UI_Animation_data*), float(*animation_func)(float)){
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]

	page_renderer(ani_dat);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	4798      	blx	r3

	u8g2_SendBuffer(&u8g2);
 8002ed6:	4805      	ldr	r0, [pc, #20]	@ (8002eec <ui_draw_page+0x28>)
 8002ed8:	f000 f963 	bl	80031a2 <u8g2_SendBuffer>

	ui_animation_calculator(ani_dat, animation_func);
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f7ff fe3a 	bl	8002b58 <ui_animation_calculator>

}
 8002ee4:	bf00      	nop
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	200001a8 	.word	0x200001a8

08002ef0 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	4608      	mov	r0, r1
 8002efa:	4611      	mov	r1, r2
 8002efc:	461a      	mov	r2, r3
 8002efe:	4603      	mov	r3, r0
 8002f00:	817b      	strh	r3, [r7, #10]
 8002f02:	460b      	mov	r3, r1
 8002f04:	813b      	strh	r3, [r7, #8]
 8002f06:	4613      	mov	r3, r2
 8002f08:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8002f0a:	897a      	ldrh	r2, [r7, #10]
 8002f0c:	88fb      	ldrh	r3, [r7, #6]
 8002f0e:	4413      	add	r3, r2
 8002f10:	b298      	uxth	r0, r3
 8002f12:	893a      	ldrh	r2, [r7, #8]
 8002f14:	8b3b      	ldrh	r3, [r7, #24]
 8002f16:	4413      	add	r3, r2
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	893a      	ldrh	r2, [r7, #8]
 8002f1c:	8979      	ldrh	r1, [r7, #10]
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	4603      	mov	r3, r0
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f001 f989 	bl	800423a <u8g2_IsIntersection>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d012      	beq.n	8002f54 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8002f2e:	e00d      	b.n	8002f4c <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8002f30:	88fb      	ldrh	r3, [r7, #6]
 8002f32:	893a      	ldrh	r2, [r7, #8]
 8002f34:	8979      	ldrh	r1, [r7, #10]
 8002f36:	2000      	movs	r0, #0
 8002f38:	9000      	str	r0, [sp, #0]
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f001 f8a6 	bl	800408c <u8g2_DrawHVLine>
    y++;    
 8002f40:	893b      	ldrh	r3, [r7, #8]
 8002f42:	3301      	adds	r3, #1
 8002f44:	813b      	strh	r3, [r7, #8]
    h--;
 8002f46:	8b3b      	ldrh	r3, [r7, #24]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8002f4c:	8b3b      	ldrh	r3, [r7, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1ee      	bne.n	8002f30 <u8g2_DrawBox+0x40>
 8002f52:	e000      	b.n	8002f56 <u8g2_DrawBox+0x66>
    return;
 8002f54:	bf00      	nop
  }
}
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <u8g2_DrawRBox>:




void u8g2_DrawRBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	@ 0x28
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	4608      	mov	r0, r1
 8002f66:	4611      	mov	r1, r2
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	817b      	strh	r3, [r7, #10]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	813b      	strh	r3, [r7, #8]
 8002f72:	4613      	mov	r3, r2
 8002f74:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xl, yu;
  u8g2_uint_t yl, xr;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8002f76:	897a      	ldrh	r2, [r7, #10]
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	b298      	uxth	r0, r3
 8002f7e:	893a      	ldrh	r2, [r7, #8]
 8002f80:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002f82:	4413      	add	r3, r2
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	893a      	ldrh	r2, [r7, #8]
 8002f88:	8979      	ldrh	r1, [r7, #10]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f001 f953 	bl	800423a <u8g2_IsIntersection>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 808c 	beq.w	80030b4 <u8g2_DrawRBox+0x158>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 8002f9c:	897b      	ldrh	r3, [r7, #10]
 8002f9e:	83fb      	strh	r3, [r7, #30]
  xl += r;
 8002fa0:	8bfa      	ldrh	r2, [r7, #30]
 8002fa2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002fa4:	4413      	add	r3, r2
 8002fa6:	83fb      	strh	r3, [r7, #30]
  yu = y;
 8002fa8:	893b      	ldrh	r3, [r7, #8]
 8002faa:	83bb      	strh	r3, [r7, #28]
  yu += r;
 8002fac:	8bba      	ldrh	r2, [r7, #28]
 8002fae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002fb0:	4413      	add	r3, r2
 8002fb2:	83bb      	strh	r3, [r7, #28]
 
  xr = x;
 8002fb4:	897b      	ldrh	r3, [r7, #10]
 8002fb6:	837b      	strh	r3, [r7, #26]
  xr += w;
 8002fb8:	8b7a      	ldrh	r2, [r7, #26]
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	837b      	strh	r3, [r7, #26]
  xr -= r;
 8002fc0:	8b7a      	ldrh	r2, [r7, #26]
 8002fc2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	837b      	strh	r3, [r7, #26]
  xr -= 1;
 8002fc8:	8b7b      	ldrh	r3, [r7, #26]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	837b      	strh	r3, [r7, #26]
  
  yl = y;
 8002fce:	893b      	ldrh	r3, [r7, #8]
 8002fd0:	833b      	strh	r3, [r7, #24]
  yl += h;
 8002fd2:	8b3a      	ldrh	r2, [r7, #24]
 8002fd4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002fd6:	4413      	add	r3, r2
 8002fd8:	833b      	strh	r3, [r7, #24]
  yl -= r; 
 8002fda:	8b3a      	ldrh	r2, [r7, #24]
 8002fdc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	833b      	strh	r3, [r7, #24]
  yl -= 1;
 8002fe2:	8b3b      	ldrh	r3, [r7, #24]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	833b      	strh	r3, [r7, #24]

  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8002fe8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002fea:	8bba      	ldrh	r2, [r7, #28]
 8002fec:	8bf9      	ldrh	r1, [r7, #30]
 8002fee:	2002      	movs	r0, #2
 8002ff0:	9000      	str	r0, [sp, #0]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f9cf 	bl	8003396 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8002ff8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002ffa:	8bba      	ldrh	r2, [r7, #28]
 8002ffc:	8b79      	ldrh	r1, [r7, #26]
 8002ffe:	2001      	movs	r0, #1
 8003000:	9000      	str	r0, [sp, #0]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f9c7 	bl	8003396 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8003008:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800300a:	8b3a      	ldrh	r2, [r7, #24]
 800300c:	8bf9      	ldrh	r1, [r7, #30]
 800300e:	2004      	movs	r0, #4
 8003010:	9000      	str	r0, [sp, #0]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f9bf 	bl	8003396 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8003018:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800301a:	8b3a      	ldrh	r2, [r7, #24]
 800301c:	8b79      	ldrh	r1, [r7, #26]
 800301e:	2008      	movs	r0, #8
 8003020:	9000      	str	r0, [sp, #0]
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f9b7 	bl	8003396 <u8g2_DrawDisc>

  {
    u8g2_uint_t ww, hh;

    ww = w;
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	82fb      	strh	r3, [r7, #22]
    ww -= r;
 800302c:	8afa      	ldrh	r2, [r7, #22]
 800302e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	82fb      	strh	r3, [r7, #22]
    ww -= r;
 8003034:	8afa      	ldrh	r2, [r7, #22]
 8003036:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	82fb      	strh	r3, [r7, #22]
    xl++;
 800303c:	8bfb      	ldrh	r3, [r7, #30]
 800303e:	3301      	adds	r3, #1
 8003040:	83fb      	strh	r3, [r7, #30]
    yu++;
 8003042:	8bbb      	ldrh	r3, [r7, #28]
 8003044:	3301      	adds	r3, #1
 8003046:	83bb      	strh	r3, [r7, #28]
    
    if ( ww >= 3 )
 8003048:	8afb      	ldrh	r3, [r7, #22]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d918      	bls.n	8003080 <u8g2_DrawRBox+0x124>
    {
      ww -= 2;
 800304e:	8afb      	ldrh	r3, [r7, #22]
 8003050:	3b02      	subs	r3, #2
 8003052:	82fb      	strh	r3, [r7, #22]
      u8g2_DrawBox(u8g2, xl, y, ww, r+1);
 8003054:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003056:	3301      	adds	r3, #1
 8003058:	b29b      	uxth	r3, r3
 800305a:	8af8      	ldrh	r0, [r7, #22]
 800305c:	893a      	ldrh	r2, [r7, #8]
 800305e:	8bf9      	ldrh	r1, [r7, #30]
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	4603      	mov	r3, r0
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f7ff ff43 	bl	8002ef0 <u8g2_DrawBox>
      u8g2_DrawBox(u8g2, xl, yl, ww, r+1);
 800306a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800306c:	3301      	adds	r3, #1
 800306e:	b29b      	uxth	r3, r3
 8003070:	8af8      	ldrh	r0, [r7, #22]
 8003072:	8b3a      	ldrh	r2, [r7, #24]
 8003074:	8bf9      	ldrh	r1, [r7, #30]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	4603      	mov	r3, r0
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f7ff ff38 	bl	8002ef0 <u8g2_DrawBox>
    }
    
    hh = h;
 8003080:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003082:	82bb      	strh	r3, [r7, #20]
    hh -= r;
 8003084:	8aba      	ldrh	r2, [r7, #20]
 8003086:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	82bb      	strh	r3, [r7, #20]
    hh -= r;
 800308c:	8aba      	ldrh	r2, [r7, #20]
 800308e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	82bb      	strh	r3, [r7, #20]
    //h--;
    if ( hh >= 3 )
 8003094:	8abb      	ldrh	r3, [r7, #20]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d90d      	bls.n	80030b6 <u8g2_DrawRBox+0x15a>
    {
      hh -= 2;
 800309a:	8abb      	ldrh	r3, [r7, #20]
 800309c:	3b02      	subs	r3, #2
 800309e:	82bb      	strh	r3, [r7, #20]
      u8g2_DrawBox(u8g2, x, yu, w, hh);
 80030a0:	88f8      	ldrh	r0, [r7, #6]
 80030a2:	8bba      	ldrh	r2, [r7, #28]
 80030a4:	8979      	ldrh	r1, [r7, #10]
 80030a6:	8abb      	ldrh	r3, [r7, #20]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	4603      	mov	r3, r0
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f7ff ff1f 	bl	8002ef0 <u8g2_DrawBox>
 80030b2:	e000      	b.n	80030b6 <u8g2_DrawRBox+0x15a>
    return;
 80030b4:	bf00      	nop
    }
  }
}
 80030b6:	3720      	adds	r7, #32
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	7c1b      	ldrb	r3, [r3, #16]
 80030ca:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80030d2:	461a      	mov	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	2100      	movs	r1, #0
 80030ea:	4618      	mov	r0, r3
 80030ec:	f004 fb74 	bl	80077d8 <memset>
}
 80030f0:	bf00      	nop
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af02      	add	r7, sp, #8
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	70fb      	strb	r3, [r7, #3]
 8003104:	4613      	mov	r3, r2
 8003106:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	7c1b      	ldrb	r3, [r3, #16]
 800310e:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003118:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	b29b      	uxth	r3, r3
 800311e:	89ba      	ldrh	r2, [r7, #12]
 8003120:	fb02 f303 	mul.w	r3, r2, r3
 8003124:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8003126:	89bb      	ldrh	r3, [r7, #12]
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800312c:	89bb      	ldrh	r3, [r7, #12]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	4413      	add	r3, r2
 8003132:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8003134:	7bf9      	ldrb	r1, [r7, #15]
 8003136:	78ba      	ldrb	r2, [r7, #2]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	460b      	mov	r3, r1
 800313e:	2100      	movs	r1, #0
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f001 fd15 	bl	8004b70 <u8x8_DrawTile>
}
 8003146:	bf00      	nop
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003160:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003168:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	7c5b      	ldrb	r3, [r3, #17]
 8003170:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8003172:	7bba      	ldrb	r2, [r7, #14]
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	4619      	mov	r1, r3
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff ffbd 	bl	80030f8 <u8g2_send_tile_row>
    src_row++;
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	3301      	adds	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8003184:	7bbb      	ldrb	r3, [r7, #14]
 8003186:	3301      	adds	r3, #1
 8003188:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800318a:	7bfa      	ldrb	r2, [r7, #15]
 800318c:	7b7b      	ldrb	r3, [r7, #13]
 800318e:	429a      	cmp	r2, r3
 8003190:	d203      	bcs.n	800319a <u8g2_send_buffer+0x4c>
 8003192:	7bba      	ldrb	r2, [r7, #14]
 8003194:	7b3b      	ldrb	r3, [r7, #12]
 8003196:	429a      	cmp	r2, r3
 8003198:	d3eb      	bcc.n	8003172 <u8g2_send_buffer+0x24>
}
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff ffcf 	bl	800314e <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f001 fd2e 	bl	8004c12 <u8x8_RefreshDisplay>
}
 80031b6:	bf00      	nop
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <u8g2_draw_disc_section>:
/* Disk */

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	4608      	mov	r0, r1
 80031c8:	4611      	mov	r1, r2
 80031ca:	461a      	mov	r2, r3
 80031cc:	4603      	mov	r3, r0
 80031ce:	817b      	strh	r3, [r7, #10]
 80031d0:	460b      	mov	r3, r1
 80031d2:	813b      	strh	r3, [r7, #8]
 80031d4:	4613      	mov	r3, r2
 80031d6:	80fb      	strh	r3, [r7, #6]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 80031d8:	7f3b      	ldrb	r3, [r7, #28]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d01b      	beq.n	800321a <u8g2_draw_disc_section+0x5c>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
 80031e2:	88fa      	ldrh	r2, [r7, #6]
 80031e4:	897b      	ldrh	r3, [r7, #10]
 80031e6:	4413      	add	r3, r2
 80031e8:	b299      	uxth	r1, r3
 80031ea:	8b3a      	ldrh	r2, [r7, #24]
 80031ec:	893b      	ldrh	r3, [r7, #8]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	893b      	ldrh	r3, [r7, #8]
 80031f4:	3301      	adds	r3, #1
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 ffd2 	bl	80041a2 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0-x, x+1);
 80031fe:	88fa      	ldrh	r2, [r7, #6]
 8003200:	893b      	ldrh	r3, [r7, #8]
 8003202:	4413      	add	r3, r2
 8003204:	b299      	uxth	r1, r3
 8003206:	8b3a      	ldrh	r2, [r7, #24]
 8003208:	897b      	ldrh	r3, [r7, #10]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	b29a      	uxth	r2, r3
 800320e:	897b      	ldrh	r3, [r7, #10]
 8003210:	3301      	adds	r3, #1
 8003212:	b29b      	uxth	r3, r3
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 ffc4 	bl	80041a2 <u8g2_DrawVLine>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 800321a:	7f3b      	ldrb	r3, [r7, #28]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d01b      	beq.n	800325c <u8g2_draw_disc_section+0x9e>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0-y, y+1);
 8003224:	88fa      	ldrh	r2, [r7, #6]
 8003226:	897b      	ldrh	r3, [r7, #10]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	b299      	uxth	r1, r3
 800322c:	8b3a      	ldrh	r2, [r7, #24]
 800322e:	893b      	ldrh	r3, [r7, #8]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	b29a      	uxth	r2, r3
 8003234:	893b      	ldrh	r3, [r7, #8]
 8003236:	3301      	adds	r3, #1
 8003238:	b29b      	uxth	r3, r3
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 ffb1 	bl	80041a2 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0-x, x+1);
 8003240:	88fa      	ldrh	r2, [r7, #6]
 8003242:	893b      	ldrh	r3, [r7, #8]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	b299      	uxth	r1, r3
 8003248:	8b3a      	ldrh	r2, [r7, #24]
 800324a:	897b      	ldrh	r3, [r7, #10]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	b29a      	uxth	r2, r3
 8003250:	897b      	ldrh	r3, [r7, #10]
 8003252:	3301      	adds	r3, #1
 8003254:	b29b      	uxth	r3, r3
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 ffa3 	bl	80041a2 <u8g2_DrawVLine>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 800325c:	7f3b      	ldrb	r3, [r7, #28]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d015      	beq.n	8003292 <u8g2_draw_disc_section+0xd4>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0, y+1);
 8003266:	88fa      	ldrh	r2, [r7, #6]
 8003268:	897b      	ldrh	r3, [r7, #10]
 800326a:	4413      	add	r3, r2
 800326c:	b299      	uxth	r1, r3
 800326e:	893b      	ldrh	r3, [r7, #8]
 8003270:	3301      	adds	r3, #1
 8003272:	b29b      	uxth	r3, r3
 8003274:	8b3a      	ldrh	r2, [r7, #24]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 ff93 	bl	80041a2 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0, x+1);
 800327c:	88fa      	ldrh	r2, [r7, #6]
 800327e:	893b      	ldrh	r3, [r7, #8]
 8003280:	4413      	add	r3, r2
 8003282:	b299      	uxth	r1, r3
 8003284:	897b      	ldrh	r3, [r7, #10]
 8003286:	3301      	adds	r3, #1
 8003288:	b29b      	uxth	r3, r3
 800328a:	8b3a      	ldrh	r2, [r7, #24]
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 ff88 	bl	80041a2 <u8g2_DrawVLine>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8003292:	7f3b      	ldrb	r3, [r7, #28]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d015      	beq.n	80032c8 <u8g2_draw_disc_section+0x10a>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
 800329c:	88fa      	ldrh	r2, [r7, #6]
 800329e:	897b      	ldrh	r3, [r7, #10]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	b299      	uxth	r1, r3
 80032a4:	893b      	ldrh	r3, [r7, #8]
 80032a6:	3301      	adds	r3, #1
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	8b3a      	ldrh	r2, [r7, #24]
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 ff78 	bl	80041a2 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0, x+1);
 80032b2:	88fa      	ldrh	r2, [r7, #6]
 80032b4:	893b      	ldrh	r3, [r7, #8]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	b299      	uxth	r1, r3
 80032ba:	897b      	ldrh	r3, [r7, #10]
 80032bc:	3301      	adds	r3, #1
 80032be:	b29b      	uxth	r3, r3
 80032c0:	8b3a      	ldrh	r2, [r7, #24]
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 ff6d 	bl	80041a2 <u8g2_DrawVLine>
    }
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <u8g2_draw_disc>:

static void u8g2_draw_disc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	@ 0x28
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	4608      	mov	r0, r1
 80032da:	4611      	mov	r1, r2
 80032dc:	461a      	mov	r2, r3
 80032de:	4603      	mov	r3, r0
 80032e0:	817b      	strh	r3, [r7, #10]
 80032e2:	460b      	mov	r3, r1
 80032e4:	813b      	strh	r3, [r7, #8]
 80032e6:	4613      	mov	r3, r2
 80032e8:	80fb      	strh	r3, [r7, #6]
  u8g2_int_t ddF_x;
  u8g2_int_t ddF_y;
  u8g2_uint_t x;
  u8g2_uint_t y;

  f = 1;
 80032ea:	2301      	movs	r3, #1
 80032ec:	83fb      	strh	r3, [r7, #30]
  f -= rad;
 80032ee:	8bfa      	ldrh	r2, [r7, #30]
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	83fb      	strh	r3, [r7, #30]
  ddF_x = 1;
 80032f8:	2301      	movs	r3, #1
 80032fa:	83bb      	strh	r3, [r7, #28]
  ddF_y = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	837b      	strh	r3, [r7, #26]
  ddF_y -= rad;
 8003300:	8b7a      	ldrh	r2, [r7, #26]
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	b29b      	uxth	r3, r3
 8003308:	837b      	strh	r3, [r7, #26]
  ddF_y *= 2;
 800330a:	8b7b      	ldrh	r3, [r7, #26]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	b29b      	uxth	r3, r3
 8003310:	837b      	strh	r3, [r7, #26]
  x = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	833b      	strh	r3, [r7, #24]
  y = rad;
 8003316:	88fb      	ldrh	r3, [r7, #6]
 8003318:	82fb      	strh	r3, [r7, #22]

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
 800331a:	8978      	ldrh	r0, [r7, #10]
 800331c:	8afa      	ldrh	r2, [r7, #22]
 800331e:	8b39      	ldrh	r1, [r7, #24]
 8003320:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	893b      	ldrh	r3, [r7, #8]
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	4603      	mov	r3, r0
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff ff46 	bl	80031be <u8g2_draw_disc_section>
  
  while ( x < y )
 8003332:	e027      	b.n	8003384 <u8g2_draw_disc+0xb4>
  {
    if (f >= 0) 
 8003334:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003338:	2b00      	cmp	r3, #0
 800333a:	db0b      	blt.n	8003354 <u8g2_draw_disc+0x84>
    {
      y--;
 800333c:	8afb      	ldrh	r3, [r7, #22]
 800333e:	3b01      	subs	r3, #1
 8003340:	82fb      	strh	r3, [r7, #22]
      ddF_y += 2;
 8003342:	8b7b      	ldrh	r3, [r7, #26]
 8003344:	3302      	adds	r3, #2
 8003346:	b29b      	uxth	r3, r3
 8003348:	837b      	strh	r3, [r7, #26]
      f += ddF_y;
 800334a:	8bfa      	ldrh	r2, [r7, #30]
 800334c:	8b7b      	ldrh	r3, [r7, #26]
 800334e:	4413      	add	r3, r2
 8003350:	b29b      	uxth	r3, r3
 8003352:	83fb      	strh	r3, [r7, #30]
    }
    x++;
 8003354:	8b3b      	ldrh	r3, [r7, #24]
 8003356:	3301      	adds	r3, #1
 8003358:	833b      	strh	r3, [r7, #24]
    ddF_x += 2;
 800335a:	8bbb      	ldrh	r3, [r7, #28]
 800335c:	3302      	adds	r3, #2
 800335e:	b29b      	uxth	r3, r3
 8003360:	83bb      	strh	r3, [r7, #28]
    f += ddF_x;
 8003362:	8bfa      	ldrh	r2, [r7, #30]
 8003364:	8bbb      	ldrh	r3, [r7, #28]
 8003366:	4413      	add	r3, r2
 8003368:	b29b      	uxth	r3, r3
 800336a:	83fb      	strh	r3, [r7, #30]

    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
 800336c:	8978      	ldrh	r0, [r7, #10]
 800336e:	8afa      	ldrh	r2, [r7, #22]
 8003370:	8b39      	ldrh	r1, [r7, #24]
 8003372:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	893b      	ldrh	r3, [r7, #8]
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	4603      	mov	r3, r0
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f7ff ff1d 	bl	80031be <u8g2_draw_disc_section>
  while ( x < y )
 8003384:	8b3a      	ldrh	r2, [r7, #24]
 8003386:	8afb      	ldrh	r3, [r7, #22]
 8003388:	429a      	cmp	r2, r3
 800338a:	d3d3      	bcc.n	8003334 <u8g2_draw_disc+0x64>
  }
}
 800338c:	bf00      	nop
 800338e:	bf00      	nop
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <u8g2_DrawDisc>:

void u8g2_DrawDisc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8003396:	b590      	push	{r4, r7, lr}
 8003398:	b087      	sub	sp, #28
 800339a:	af02      	add	r7, sp, #8
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	4608      	mov	r0, r1
 80033a0:	4611      	mov	r1, r2
 80033a2:	461a      	mov	r2, r3
 80033a4:	4603      	mov	r3, r0
 80033a6:	817b      	strh	r3, [r7, #10]
 80033a8:	460b      	mov	r3, r1
 80033aa:	813b      	strh	r3, [r7, #8]
 80033ac:	4613      	mov	r3, r2
 80033ae:	80fb      	strh	r3, [r7, #6]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 80033b0:	897a      	ldrh	r2, [r7, #10]
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	b299      	uxth	r1, r3
 80033b8:	893a      	ldrh	r2, [r7, #8]
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	b298      	uxth	r0, r3
 80033c0:	897a      	ldrh	r2, [r7, #10]
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	4413      	add	r3, r2
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3301      	adds	r3, #1
 80033ca:	b29c      	uxth	r4, r3
 80033cc:	893a      	ldrh	r2, [r7, #8]
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	4413      	add	r3, r2
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3301      	adds	r3, #1
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	4623      	mov	r3, r4
 80033dc:	4602      	mov	r2, r0
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 ff2b 	bl	800423a <u8g2_IsIntersection>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <u8g2_DrawDisc+0x6a>
      return;
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  /* draw disc */
  u8g2_draw_disc(u8g2, x0, y0, rad, option);
 80033ea:	88f8      	ldrh	r0, [r7, #6]
 80033ec:	893a      	ldrh	r2, [r7, #8]
 80033ee:	8979      	ldrh	r1, [r7, #10]
 80033f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	4603      	mov	r3, r0
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f7ff ff69 	bl	80032d0 <u8g2_draw_disc>
 80033fe:	e000      	b.n	8003402 <u8g2_DrawDisc+0x6c>
      return;
 8003400:	bf00      	nop
}
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	bd90      	pop	{r4, r7, pc}

08003408 <u8g2_m_16_8_f>:

#include "u8g2.h"


uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2208      	movs	r2, #8
 8003414:	701a      	strb	r2, [r3, #0]
  return buf;
 8003416:	4b03      	ldr	r3, [pc, #12]	@ (8003424 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8003418:	4618      	mov	r0, r3
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	20000240 	.word	0x20000240

08003428 <u8g2_Setup_ssd1306_128x64_noname_f>:

#include "u8g2.h"

/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af02      	add	r7, sp, #8
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a0b      	ldr	r2, [pc, #44]	@ (800346c <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 800343e:	490c      	ldr	r1, [pc, #48]	@ (8003470 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f001 fc45 	bl	8004cd0 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8003446:	f107 0313 	add.w	r3, r7, #19
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff ffdc 	bl	8003408 <u8g2_m_16_8_f>
 8003450:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8003452:	7cfa      	ldrb	r2, [r7, #19]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 800345a:	6979      	ldr	r1, [r7, #20]
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 ffd5 	bl	800440c <u8g2_SetupBuffer>
}
 8003462:	bf00      	nop
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	08004895 	.word	0x08004895
 8003470:	08004a6d 	.word	0x08004a6d
 8003474:	08004291 	.word	0x08004291

08003478 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	4413      	add	r3, r2
 800348a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	781b      	ldrb	r3, [r3, #0]
}
 8003490:	4618      	mov	r0, r3
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr

0800349a <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800349a:	b480      	push	{r7}
 800349c:	b085      	sub	sp, #20
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	460b      	mov	r3, r1
 80034a4:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	4413      	add	r3, r2
 80034ac:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	81fb      	strh	r3, [r7, #14]
    font++;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3301      	adds	r3, #1
 80034b8:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80034ba:	89fb      	ldrh	r3, [r7, #14]
 80034bc:	021b      	lsls	r3, r3, #8
 80034be:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	89fb      	ldrh	r3, [r7, #14]
 80034c8:	4413      	add	r3, r2
 80034ca:	81fb      	strh	r3, [r7, #14]
    return pos;
 80034cc:	89fb      	ldrh	r3, [r7, #14]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr

080034d8 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80034e2:	2100      	movs	r1, #0
 80034e4:	6838      	ldr	r0, [r7, #0]
 80034e6:	f7ff ffc7 	bl	8003478 <u8g2_font_get_byte>
 80034ea:	4603      	mov	r3, r0
 80034ec:	461a      	mov	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80034f2:	2101      	movs	r1, #1
 80034f4:	6838      	ldr	r0, [r7, #0]
 80034f6:	f7ff ffbf 	bl	8003478 <u8g2_font_get_byte>
 80034fa:	4603      	mov	r3, r0
 80034fc:	461a      	mov	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8003502:	2102      	movs	r1, #2
 8003504:	6838      	ldr	r0, [r7, #0]
 8003506:	f7ff ffb7 	bl	8003478 <u8g2_font_get_byte>
 800350a:	4603      	mov	r3, r0
 800350c:	461a      	mov	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8003512:	2103      	movs	r1, #3
 8003514:	6838      	ldr	r0, [r7, #0]
 8003516:	f7ff ffaf 	bl	8003478 <u8g2_font_get_byte>
 800351a:	4603      	mov	r3, r0
 800351c:	461a      	mov	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8003522:	2104      	movs	r1, #4
 8003524:	6838      	ldr	r0, [r7, #0]
 8003526:	f7ff ffa7 	bl	8003478 <u8g2_font_get_byte>
 800352a:	4603      	mov	r3, r0
 800352c:	461a      	mov	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8003532:	2105      	movs	r1, #5
 8003534:	6838      	ldr	r0, [r7, #0]
 8003536:	f7ff ff9f 	bl	8003478 <u8g2_font_get_byte>
 800353a:	4603      	mov	r3, r0
 800353c:	461a      	mov	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8003542:	2106      	movs	r1, #6
 8003544:	6838      	ldr	r0, [r7, #0]
 8003546:	f7ff ff97 	bl	8003478 <u8g2_font_get_byte>
 800354a:	4603      	mov	r3, r0
 800354c:	461a      	mov	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8003552:	2107      	movs	r1, #7
 8003554:	6838      	ldr	r0, [r7, #0]
 8003556:	f7ff ff8f 	bl	8003478 <u8g2_font_get_byte>
 800355a:	4603      	mov	r3, r0
 800355c:	461a      	mov	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8003562:	2108      	movs	r1, #8
 8003564:	6838      	ldr	r0, [r7, #0]
 8003566:	f7ff ff87 	bl	8003478 <u8g2_font_get_byte>
 800356a:	4603      	mov	r3, r0
 800356c:	461a      	mov	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8003572:	2109      	movs	r1, #9
 8003574:	6838      	ldr	r0, [r7, #0]
 8003576:	f7ff ff7f 	bl	8003478 <u8g2_font_get_byte>
 800357a:	4603      	mov	r3, r0
 800357c:	b25a      	sxtb	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8003582:	210a      	movs	r1, #10
 8003584:	6838      	ldr	r0, [r7, #0]
 8003586:	f7ff ff77 	bl	8003478 <u8g2_font_get_byte>
 800358a:	4603      	mov	r3, r0
 800358c:	b25a      	sxtb	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8003592:	210b      	movs	r1, #11
 8003594:	6838      	ldr	r0, [r7, #0]
 8003596:	f7ff ff6f 	bl	8003478 <u8g2_font_get_byte>
 800359a:	4603      	mov	r3, r0
 800359c:	b25a      	sxtb	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80035a2:	210c      	movs	r1, #12
 80035a4:	6838      	ldr	r0, [r7, #0]
 80035a6:	f7ff ff67 	bl	8003478 <u8g2_font_get_byte>
 80035aa:	4603      	mov	r3, r0
 80035ac:	b25a      	sxtb	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80035b2:	210d      	movs	r1, #13
 80035b4:	6838      	ldr	r0, [r7, #0]
 80035b6:	f7ff ff5f 	bl	8003478 <u8g2_font_get_byte>
 80035ba:	4603      	mov	r3, r0
 80035bc:	b25a      	sxtb	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80035c2:	210e      	movs	r1, #14
 80035c4:	6838      	ldr	r0, [r7, #0]
 80035c6:	f7ff ff57 	bl	8003478 <u8g2_font_get_byte>
 80035ca:	4603      	mov	r3, r0
 80035cc:	b25a      	sxtb	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80035d2:	210f      	movs	r1, #15
 80035d4:	6838      	ldr	r0, [r7, #0]
 80035d6:	f7ff ff4f 	bl	8003478 <u8g2_font_get_byte>
 80035da:	4603      	mov	r3, r0
 80035dc:	b25a      	sxtb	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80035e2:	2110      	movs	r1, #16
 80035e4:	6838      	ldr	r0, [r7, #0]
 80035e6:	f7ff ff47 	bl	8003478 <u8g2_font_get_byte>
 80035ea:	4603      	mov	r3, r0
 80035ec:	b25a      	sxtb	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80035f2:	2111      	movs	r1, #17
 80035f4:	6838      	ldr	r0, [r7, #0]
 80035f6:	f7ff ff50 	bl	800349a <u8g2_font_get_word>
 80035fa:	4603      	mov	r3, r0
 80035fc:	461a      	mov	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8003602:	2113      	movs	r1, #19
 8003604:	6838      	ldr	r0, [r7, #0]
 8003606:	f7ff ff48 	bl	800349a <u8g2_font_get_word>
 800360a:	4603      	mov	r3, r0
 800360c:	461a      	mov	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8003612:	2115      	movs	r1, #21
 8003614:	6838      	ldr	r0, [r7, #0]
 8003616:	f7ff ff40 	bl	800349a <u8g2_font_get_word>
 800361a:	4603      	mov	r3, r0
 800361c:	461a      	mov	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	82da      	strh	r2, [r3, #22]
#endif
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800362a:	b480      	push	{r7}
 800362c:	b085      	sub	sp, #20
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	460b      	mov	r3, r1
 8003634:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	7b1b      	ldrb	r3, [r3, #12]
 800363a:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8003644:	7bfa      	ldrb	r2, [r7, #15]
 8003646:	7b7b      	ldrb	r3, [r7, #13]
 8003648:	fa42 f303 	asr.w	r3, r2, r3
 800364c:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800364e:	7b7b      	ldrb	r3, [r7, #13]
 8003650:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8003652:	7bba      	ldrb	r2, [r7, #14]
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	4413      	add	r3, r2
 8003658:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800365a:	7bbb      	ldrb	r3, [r7, #14]
 800365c:	2b07      	cmp	r3, #7
 800365e:	d91a      	bls.n	8003696 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8003660:	2308      	movs	r3, #8
 8003662:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8003664:	7b3a      	ldrb	r2, [r7, #12]
 8003666:	7b7b      	ldrb	r3, [r7, #13]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	461a      	mov	r2, r3
 800367e:	7b3b      	ldrb	r3, [r7, #12]
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	b25a      	sxtb	r2, r3
 8003686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800368a:	4313      	orrs	r3, r2
 800368c:	b25b      	sxtb	r3, r3
 800368e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8003690:	7bbb      	ldrb	r3, [r7, #14]
 8003692:	3b08      	subs	r3, #8
 8003694:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	f04f 32ff 	mov.w	r2, #4294967295
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	4013      	ands	r3, r2
 80036aa:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	7bba      	ldrb	r2, [r7, #14]
 80036b0:	731a      	strb	r2, [r3, #12]
  return val;
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr

080036be <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	460b      	mov	r3, r1
 80036c8:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80036ca:	78fb      	ldrb	r3, [r7, #3]
 80036cc:	4619      	mov	r1, r3
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff ffab 	bl	800362a <u8g2_font_decode_get_unsigned_bits>
 80036d4:	4603      	mov	r3, r0
 80036d6:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80036d8:	2301      	movs	r3, #1
 80036da:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	3b01      	subs	r3, #1
 80036e0:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80036e2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80036ee:	7bfa      	ldrb	r2, [r7, #15]
 80036f0:	7bbb      	ldrb	r3, [r7, #14]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	73fb      	strb	r3, [r7, #15]
  return v;
 80036f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8003704:	b490      	push	{r4, r7}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	4604      	mov	r4, r0
 800370c:	4608      	mov	r0, r1
 800370e:	4611      	mov	r1, r2
 8003710:	461a      	mov	r2, r3
 8003712:	4623      	mov	r3, r4
 8003714:	80fb      	strh	r3, [r7, #6]
 8003716:	4603      	mov	r3, r0
 8003718:	717b      	strb	r3, [r7, #5]
 800371a:	460b      	mov	r3, r1
 800371c:	713b      	strb	r3, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	2b02      	cmp	r3, #2
 8003726:	d014      	beq.n	8003752 <u8g2_add_vector_y+0x4e>
 8003728:	2b02      	cmp	r3, #2
 800372a:	dc19      	bgt.n	8003760 <u8g2_add_vector_y+0x5c>
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <u8g2_add_vector_y+0x32>
 8003730:	2b01      	cmp	r3, #1
 8003732:	d007      	beq.n	8003744 <u8g2_add_vector_y+0x40>
 8003734:	e014      	b.n	8003760 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8003736:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800373a:	b29a      	uxth	r2, r3
 800373c:	88fb      	ldrh	r3, [r7, #6]
 800373e:	4413      	add	r3, r2
 8003740:	80fb      	strh	r3, [r7, #6]
      break;
 8003742:	e014      	b.n	800376e <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8003744:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003748:	b29a      	uxth	r2, r3
 800374a:	88fb      	ldrh	r3, [r7, #6]
 800374c:	4413      	add	r3, r2
 800374e:	80fb      	strh	r3, [r7, #6]
      break;
 8003750:	e00d      	b.n	800376e <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8003752:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003756:	b29b      	uxth	r3, r3
 8003758:	88fa      	ldrh	r2, [r7, #6]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	80fb      	strh	r3, [r7, #6]
      break;
 800375e:	e006      	b.n	800376e <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8003760:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003764:	b29b      	uxth	r3, r3
 8003766:	88fa      	ldrh	r2, [r7, #6]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	80fb      	strh	r3, [r7, #6]
      break;      
 800376c:	bf00      	nop
  }
  return dy;
 800376e:	88fb      	ldrh	r3, [r7, #6]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bc90      	pop	{r4, r7}
 8003778:	4770      	bx	lr

0800377a <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 800377a:	b490      	push	{r4, r7}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	4604      	mov	r4, r0
 8003782:	4608      	mov	r0, r1
 8003784:	4611      	mov	r1, r2
 8003786:	461a      	mov	r2, r3
 8003788:	4623      	mov	r3, r4
 800378a:	80fb      	strh	r3, [r7, #6]
 800378c:	4603      	mov	r3, r0
 800378e:	717b      	strb	r3, [r7, #5]
 8003790:	460b      	mov	r3, r1
 8003792:	713b      	strb	r3, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d014      	beq.n	80037c8 <u8g2_add_vector_x+0x4e>
 800379e:	2b02      	cmp	r3, #2
 80037a0:	dc19      	bgt.n	80037d6 <u8g2_add_vector_x+0x5c>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <u8g2_add_vector_x+0x32>
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d007      	beq.n	80037ba <u8g2_add_vector_x+0x40>
 80037aa:	e014      	b.n	80037d6 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80037ac:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	88fb      	ldrh	r3, [r7, #6]
 80037b4:	4413      	add	r3, r2
 80037b6:	80fb      	strh	r3, [r7, #6]
      break;
 80037b8:	e014      	b.n	80037e4 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80037ba:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	88fa      	ldrh	r2, [r7, #6]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	80fb      	strh	r3, [r7, #6]
      break;
 80037c6:	e00d      	b.n	80037e4 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 80037c8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	88fa      	ldrh	r2, [r7, #6]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	80fb      	strh	r3, [r7, #6]
      break;
 80037d4:	e006      	b.n	80037e4 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 80037d6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80037da:	b29a      	uxth	r2, r3
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	4413      	add	r3, r2
 80037e0:	80fb      	strh	r3, [r7, #6]
      break;      
 80037e2:	bf00      	nop
  }
  return dx;
 80037e4:	88fb      	ldrh	r3, [r7, #6]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc90      	pop	{r4, r7}
 80037ee:	4770      	bx	lr

080037f0 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	70fb      	strb	r3, [r7, #3]
 80037fc:	4613      	mov	r3, r2
 80037fe:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3360      	adds	r3, #96	@ 0x60
 8003804:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8003806:	78fb      	ldrb	r3, [r7, #3]
 8003808:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003810:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003818:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003820:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8003822:	7bfa      	ldrb	r2, [r7, #15]
 8003824:	7d7b      	ldrb	r3, [r7, #21]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800382e:	7dfa      	ldrb	r2, [r7, #23]
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	429a      	cmp	r2, r3
 8003834:	d201      	bcs.n	800383a <u8g2_font_decode_len+0x4a>
      current = cnt;
 8003836:	7dfb      	ldrb	r3, [r7, #23]
 8003838:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	889b      	ldrh	r3, [r3, #4]
 800383e:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	88db      	ldrh	r3, [r3, #6]
 8003844:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8003846:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800384a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	7c1b      	ldrb	r3, [r3, #16]
 8003852:	89b8      	ldrh	r0, [r7, #12]
 8003854:	f7ff ff91 	bl	800377a <u8g2_add_vector_x>
 8003858:	4603      	mov	r3, r0
 800385a:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800385c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003860:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	7c1b      	ldrb	r3, [r3, #16]
 8003868:	8978      	ldrh	r0, [r7, #10]
 800386a:	f7ff ff4b 	bl	8003704 <u8g2_add_vector_y>
 800386e:	4603      	mov	r3, r0
 8003870:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8003872:	78bb      	ldrb	r3, [r7, #2]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d010      	beq.n	800389a <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	7b9a      	ldrb	r2, [r3, #14]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8003882:	7dbb      	ldrb	r3, [r7, #22]
 8003884:	b298      	uxth	r0, r3
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	7c1b      	ldrb	r3, [r3, #16]
 800388a:	897a      	ldrh	r2, [r7, #10]
 800388c:	89b9      	ldrh	r1, [r7, #12]
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	4603      	mov	r3, r0
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fbfa 	bl	800408c <u8g2_DrawHVLine>
 8003898:	e013      	b.n	80038c2 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	7b5b      	ldrb	r3, [r3, #13]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10f      	bne.n	80038c2 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	7bda      	ldrb	r2, [r3, #15]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 80038ac:	7dbb      	ldrb	r3, [r7, #22]
 80038ae:	b298      	uxth	r0, r3
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	7c1b      	ldrb	r3, [r3, #16]
 80038b4:	897a      	ldrh	r2, [r7, #10]
 80038b6:	89b9      	ldrh	r1, [r7, #12]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	4603      	mov	r3, r0
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fbe5 	bl	800408c <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80038c2:	7dfa      	ldrb	r2, [r7, #23]
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d309      	bcc.n	80038de <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 80038ca:	7dfa      	ldrb	r2, [r7, #23]
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	757b      	strb	r3, [r7, #21]
    ly++;
 80038d6:	7d3b      	ldrb	r3, [r7, #20]
 80038d8:	3301      	adds	r3, #1
 80038da:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80038dc:	e79d      	b.n	800381a <u8g2_font_decode_len+0x2a>
      break;
 80038de:	bf00      	nop
  }
  lx += cnt;
 80038e0:	7d7a      	ldrb	r2, [r7, #21]
 80038e2:	7dfb      	ldrb	r3, [r7, #23]
 80038e4:	4413      	add	r3, r2
 80038e6:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80038e8:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 80038f0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	725a      	strb	r2, [r3, #9]
  
}
 80038f8:	bf00      	nop
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3360      	adds	r3, #96	@ 0x60
 800390e:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8003922:	4619      	mov	r1, r3
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f7ff fe80 	bl	800362a <u8g2_font_decode_get_unsigned_bits>
 800392a:	4603      	mov	r3, r0
 800392c:	b25a      	sxtb	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8003938:	4619      	mov	r1, r3
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f7ff fe75 	bl	800362a <u8g2_font_decode_get_unsigned_bits>
 8003940:	4603      	mov	r3, r0
 8003942:	b25a      	sxtb	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	7b9b      	ldrb	r3, [r3, #14]
 8003956:	2b00      	cmp	r3, #0
 8003958:	bf0c      	ite	eq
 800395a:	2301      	moveq	r3, #1
 800395c:	2300      	movne	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	461a      	mov	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	73da      	strb	r2, [r3, #15]
}
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08a      	sub	sp, #40	@ 0x28
 8003974:	af02      	add	r7, sp, #8
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3360      	adds	r3, #96	@ 0x60
 800397e:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8003980:	6839      	ldr	r1, [r7, #0]
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff ffbc 	bl	8003900 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 800398e:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8003996:	4619      	mov	r1, r3
 8003998:	6978      	ldr	r0, [r7, #20]
 800399a:	f7ff fe90 	bl	80036be <u8g2_font_decode_get_signed_bits>
 800399e:	4603      	mov	r3, r0
 80039a0:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 80039a8:	4619      	mov	r1, r3
 80039aa:	6978      	ldr	r0, [r7, #20]
 80039ac:	f7ff fe87 	bl	80036be <u8g2_font_decode_get_signed_bits>
 80039b0:	4603      	mov	r3, r0
 80039b2:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80039ba:	4619      	mov	r1, r3
 80039bc:	6978      	ldr	r0, [r7, #20]
 80039be:	f7ff fe7e 	bl	80036be <u8g2_font_decode_get_signed_bits>
 80039c2:	4603      	mov	r3, r0
 80039c4:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f340 80d7 	ble.w	8003b80 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	8898      	ldrh	r0, [r3, #4]
 80039d6:	7cfa      	ldrb	r2, [r7, #19]
 80039d8:	7c7b      	ldrb	r3, [r7, #17]
 80039da:	4413      	add	r3, r2
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	425b      	negs	r3, r3
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	b25a      	sxtb	r2, r3
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	7c1b      	ldrb	r3, [r3, #16]
 80039e8:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80039ec:	f7ff fec5 	bl	800377a <u8g2_add_vector_x>
 80039f0:	4603      	mov	r3, r0
 80039f2:	461a      	mov	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	88d8      	ldrh	r0, [r3, #6]
 80039fc:	7cfa      	ldrb	r2, [r7, #19]
 80039fe:	7c7b      	ldrb	r3, [r7, #17]
 8003a00:	4413      	add	r3, r2
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	425b      	negs	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	b25a      	sxtb	r2, r3
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	7c1b      	ldrb	r3, [r3, #16]
 8003a0e:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8003a12:	f7ff fe77 	bl	8003704 <u8g2_add_vector_y>
 8003a16:	4603      	mov	r3, r0
 8003a18:	461a      	mov	r2, r3
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	889b      	ldrh	r3, [r3, #4]
 8003a22:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	88db      	ldrh	r3, [r3, #6]
 8003a28:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8003a2a:	8bfb      	ldrh	r3, [r7, #30]
 8003a2c:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8003a2e:	8b7b      	ldrh	r3, [r7, #26]
 8003a30:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	7c1b      	ldrb	r3, [r3, #16]
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d85a      	bhi.n	8003af0 <u8g2_font_decode_glyph+0x180>
 8003a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a40 <u8g2_font_decode_glyph+0xd0>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a51 	.word	0x08003a51
 8003a44:	08003a6d 	.word	0x08003a6d
 8003a48:	08003a95 	.word	0x08003a95
 8003a4c:	08003ac9 	.word	0x08003ac9
      {
	case 0:
	    x1 += decode->glyph_width;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	8bbb      	ldrh	r3, [r7, #28]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8003a5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	8b3b      	ldrh	r3, [r7, #24]
 8003a66:	4413      	add	r3, r2
 8003a68:	833b      	strh	r3, [r7, #24]
	    break;
 8003a6a:	e041      	b.n	8003af0 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8003a6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	8bfa      	ldrh	r2, [r7, #30]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003a78:	8bfb      	ldrh	r3, [r7, #30]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8003a7e:	8bbb      	ldrh	r3, [r7, #28]
 8003a80:	3301      	adds	r3, #1
 8003a82:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	8b3b      	ldrh	r3, [r7, #24]
 8003a8e:	4413      	add	r3, r2
 8003a90:	833b      	strh	r3, [r7, #24]
	    break;
 8003a92:	e02d      	b.n	8003af0 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	8bfa      	ldrh	r2, [r7, #30]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003aa2:	8bfb      	ldrh	r3, [r7, #30]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8003aa8:	8bbb      	ldrh	r3, [r7, #28]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8003aae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	8b7a      	ldrh	r2, [r7, #26]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003aba:	8b7b      	ldrh	r3, [r7, #26]
 8003abc:	3301      	adds	r3, #1
 8003abe:	837b      	strh	r3, [r7, #26]
	    y1++;
 8003ac0:	8b3b      	ldrh	r3, [r7, #24]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	833b      	strh	r3, [r7, #24]
	    break;	  
 8003ac6:	e013      	b.n	8003af0 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8003ac8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	8bbb      	ldrh	r3, [r7, #28]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	8b7a      	ldrh	r2, [r7, #26]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003ae2:	8b7b      	ldrh	r3, [r7, #26]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	837b      	strh	r3, [r7, #26]
	    y1++;
 8003ae8:	8b3b      	ldrh	r3, [r7, #24]
 8003aea:	3301      	adds	r3, #1
 8003aec:	833b      	strh	r3, [r7, #24]
	    break;	  
 8003aee:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8003af0:	8bb8      	ldrh	r0, [r7, #28]
 8003af2:	8b7a      	ldrh	r2, [r7, #26]
 8003af4:	8bf9      	ldrh	r1, [r7, #30]
 8003af6:	8b3b      	ldrh	r3, [r7, #24]
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	4603      	mov	r3, r0
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fb9c 	bl	800423a <u8g2_IsIntersection>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d102      	bne.n	8003b0e <u8g2_font_decode_glyph+0x19e>
	return d;
 8003b08:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8003b0c:	e03a      	b.n	8003b84 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2200      	movs	r2, #0
 8003b12:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2200      	movs	r2, #0
 8003b18:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8003b20:	4619      	mov	r1, r3
 8003b22:	6978      	ldr	r0, [r7, #20]
 8003b24:	f7ff fd81 	bl	800362a <u8g2_font_decode_get_unsigned_bits>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8003b32:	4619      	mov	r1, r3
 8003b34:	6978      	ldr	r0, [r7, #20]
 8003b36:	f7ff fd78 	bl	800362a <u8g2_font_decode_get_unsigned_bits>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	2200      	movs	r2, #0
 8003b42:	4619      	mov	r1, r3
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff fe53 	bl	80037f0 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8003b4a:	7bbb      	ldrb	r3, [r7, #14]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	4619      	mov	r1, r3
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff fe4d 	bl	80037f0 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8003b56:	2101      	movs	r1, #1
 8003b58:	6978      	ldr	r0, [r7, #20]
 8003b5a:	f7ff fd66 	bl	800362a <u8g2_font_decode_get_unsigned_bits>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1ec      	bne.n	8003b3e <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003b6a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	dd00      	ble.n	8003b74 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003b72:	e7d2      	b.n	8003b1a <u8g2_font_decode_glyph+0x1aa>
	break;
 8003b74:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	7b9a      	ldrb	r2, [r3, #14]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 8003b80:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3720      	adds	r7, #32
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b9c:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	3317      	adds	r3, #23
 8003ba2:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8003ba4:	887b      	ldrh	r3, [r7, #2]
 8003ba6:	2bff      	cmp	r3, #255	@ 0xff
 8003ba8:	d82a      	bhi.n	8003c00 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8003baa:	887b      	ldrh	r3, [r7, #2]
 8003bac:	2b60      	cmp	r3, #96	@ 0x60
 8003bae:	d907      	bls.n	8003bc0 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	4413      	add	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	e009      	b.n	8003bd4 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8003bc0:	887b      	ldrh	r3, [r7, #2]
 8003bc2:	2b40      	cmp	r3, #64	@ 0x40
 8003bc4:	d906      	bls.n	8003bd4 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8003bcc:	461a      	mov	r2, r3
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d04e      	beq.n	8003c7c <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	887b      	ldrh	r3, [r7, #2]
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d102      	bne.n	8003bf0 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	3302      	adds	r3, #2
 8003bee:	e049      	b.n	8003c84 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003bfe:	e7e9      	b.n	8003bd4 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8003c06:	461a      	mov	r2, r3
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8003c12:	2100      	movs	r1, #0
 8003c14:	6938      	ldr	r0, [r7, #16]
 8003c16:	f7ff fc40 	bl	800349a <u8g2_font_get_word>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	4413      	add	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8003c24:	2102      	movs	r1, #2
 8003c26:	6938      	ldr	r0, [r7, #16]
 8003c28:	f7ff fc37 	bl	800349a <u8g2_font_get_word>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	3304      	adds	r3, #4
 8003c34:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8003c36:	89fa      	ldrh	r2, [r7, #14]
 8003c38:	887b      	ldrh	r3, [r7, #2]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d3e9      	bcc.n	8003c12 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8003c44:	89fb      	ldrh	r3, [r7, #14]
 8003c46:	021b      	lsls	r3, r3, #8
 8003c48:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	89fb      	ldrh	r3, [r7, #14]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8003c58:	89fb      	ldrh	r3, [r7, #14]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d010      	beq.n	8003c80 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8003c5e:	89fa      	ldrh	r2, [r7, #14]
 8003c60:	887b      	ldrh	r3, [r7, #2]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d102      	bne.n	8003c6c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	3303      	adds	r3, #3
 8003c6a:	e00b      	b.n	8003c84 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	3302      	adds	r3, #2
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	4413      	add	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8003c7a:	e7e0      	b.n	8003c3e <u8g2_font_get_glyph_data+0xb2>
	break;
 8003c7c:	bf00      	nop
 8003c7e:	e000      	b.n	8003c82 <u8g2_font_get_glyph_data+0xf6>
	break;
 8003c80:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	4608      	mov	r0, r1
 8003c96:	4611      	mov	r1, r2
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	817b      	strh	r3, [r7, #10]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	813b      	strh	r3, [r7, #8]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	897a      	ldrh	r2, [r7, #10]
 8003cae:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	893a      	ldrh	r2, [r7, #8]
 8003cb6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8003cba:	88fb      	ldrh	r3, [r7, #6]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f7ff ff64 	bl	8003b8c <u8g2_font_get_glyph_data>
 8003cc4:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8003ccc:	6939      	ldr	r1, [r7, #16]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f7ff fe4e 	bl	8003970 <u8g2_font_decode_glyph>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8003cd8:	8afb      	ldrh	r3, [r7, #22]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	4608      	mov	r0, r1
 8003cee:	4611      	mov	r1, r2
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	817b      	strh	r3, [r7, #10]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	813b      	strh	r3, [r7, #8]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d833      	bhi.n	8003d70 <u8g2_DrawGlyph+0x8c>
 8003d08:	a201      	add	r2, pc, #4	@ (adr r2, 8003d10 <u8g2_DrawGlyph+0x2c>)
 8003d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0e:	bf00      	nop
 8003d10:	08003d21 	.word	0x08003d21
 8003d14:	08003d35 	.word	0x08003d35
 8003d18:	08003d49 	.word	0x08003d49
 8003d1c:	08003d5d 	.word	0x08003d5d
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	4798      	blx	r3
 8003d28:	4603      	mov	r3, r0
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	893b      	ldrh	r3, [r7, #8]
 8003d2e:	4413      	add	r3, r2
 8003d30:	813b      	strh	r3, [r7, #8]
      break;
 8003d32:	e01d      	b.n	8003d70 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	4798      	blx	r3
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	461a      	mov	r2, r3
 8003d40:	897b      	ldrh	r3, [r7, #10]
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	817b      	strh	r3, [r7, #10]
      break;
 8003d46:	e013      	b.n	8003d70 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	4798      	blx	r3
 8003d50:	4603      	mov	r3, r0
 8003d52:	461a      	mov	r2, r3
 8003d54:	893b      	ldrh	r3, [r7, #8]
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	813b      	strh	r3, [r7, #8]
      break;
 8003d5a:	e009      	b.n	8003d70 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	4798      	blx	r3
 8003d64:	4603      	mov	r3, r0
 8003d66:	461a      	mov	r2, r3
 8003d68:	897b      	ldrh	r3, [r7, #10]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	817b      	strh	r3, [r7, #10]
      break;
 8003d6e:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8003d70:	88fb      	ldrh	r3, [r7, #6]
 8003d72:	893a      	ldrh	r2, [r7, #8]
 8003d74:	8979      	ldrh	r1, [r7, #10]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f7ff ff88 	bl	8003c8c <u8g2_font_draw_glyph>
 8003d7c:	4603      	mov	r3, r0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop

08003d88 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	607b      	str	r3, [r7, #4]
 8003d92:	460b      	mov	r3, r1
 8003d94:	817b      	strh	r3, [r7, #10]
 8003d96:	4613      	mov	r3, r2
 8003d98:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 fc77 	bl	800468e <u8x8_utf8_init>
  sum = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	7812      	ldrb	r2, [r2, #0]
 8003dac:	4611      	mov	r1, r2
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	4798      	blx	r3
 8003db2:	4603      	mov	r3, r0
 8003db4:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8003db6:	8abb      	ldrh	r3, [r7, #20]
 8003db8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d038      	beq.n	8003e32 <u8g2_draw_string+0xaa>
      break;
    str++;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8003dc6:	8abb      	ldrh	r3, [r7, #20]
 8003dc8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d0e9      	beq.n	8003da4 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8003dd0:	8abb      	ldrh	r3, [r7, #20]
 8003dd2:	893a      	ldrh	r2, [r7, #8]
 8003dd4:	8979      	ldrh	r1, [r7, #10]
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f7ff ff84 	bl	8003ce4 <u8g2_DrawGlyph>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	d81e      	bhi.n	8003e28 <u8g2_draw_string+0xa0>
 8003dea:	a201      	add	r2, pc, #4	@ (adr r2, 8003df0 <u8g2_draw_string+0x68>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003e01 	.word	0x08003e01
 8003df4:	08003e0b 	.word	0x08003e0b
 8003df8:	08003e15 	.word	0x08003e15
 8003dfc:	08003e1f 	.word	0x08003e1f
      {
	case 0:
	  x += delta;
 8003e00:	897a      	ldrh	r2, [r7, #10]
 8003e02:	8a7b      	ldrh	r3, [r7, #18]
 8003e04:	4413      	add	r3, r2
 8003e06:	817b      	strh	r3, [r7, #10]
	  break;
 8003e08:	e00e      	b.n	8003e28 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8003e0a:	893a      	ldrh	r2, [r7, #8]
 8003e0c:	8a7b      	ldrh	r3, [r7, #18]
 8003e0e:	4413      	add	r3, r2
 8003e10:	813b      	strh	r3, [r7, #8]
	  break;
 8003e12:	e009      	b.n	8003e28 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8003e14:	897a      	ldrh	r2, [r7, #10]
 8003e16:	8a7b      	ldrh	r3, [r7, #18]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	817b      	strh	r3, [r7, #10]
	  break;
 8003e1c:	e004      	b.n	8003e28 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8003e1e:	893a      	ldrh	r2, [r7, #8]
 8003e20:	8a7b      	ldrh	r3, [r7, #18]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	813b      	strh	r3, [r7, #8]
	  break;
 8003e26:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8003e28:	8afa      	ldrh	r2, [r7, #22]
 8003e2a:	8a7b      	ldrh	r3, [r7, #18]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003e30:	e7b8      	b.n	8003da4 <u8g2_draw_string+0x1c>
      break;
 8003e32:	bf00      	nop
    }
  }
  return sum;
 8003e34:	8afb      	ldrh	r3, [r7, #22]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop

08003e40 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	607b      	str	r3, [r7, #4]
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	817b      	strh	r3, [r7, #10]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4a06      	ldr	r2, [pc, #24]	@ (8003e70 <u8g2_DrawStr+0x30>)
 8003e56:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8003e58:	893a      	ldrh	r2, [r7, #8]
 8003e5a:	8979      	ldrh	r1, [r7, #10]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f7ff ff92 	bl	8003d88 <u8g2_draw_string>
 8003e64:	4603      	mov	r3, r0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	080046a9 	.word	0x080046a9

08003e74 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d05d      	beq.n	8003f40 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d04d      	beq.n	8003f42 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d11c      	bne.n	8003eea <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	da05      	bge.n	8003ecc <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	dd32      	ble.n	8003f42 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8003ee8:	e02b      	b.n	8003f42 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8003ef8:	4619      	mov	r1, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8003f00:	440b      	add	r3, r1
 8003f02:	429a      	cmp	r2, r3
 8003f04:	da0d      	bge.n	8003f22 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	4413      	add	r3, r2
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	b25a      	sxtb	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	dd07      	ble.n	8003f42 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8003f3e:	e000      	b.n	8003f42 <u8g2_UpdateRefHeight+0xce>
    return;
 8003f40:	bf00      	nop
  }  
}
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  return 0;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr
	...

08003f60 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a03      	ldr	r2, [pc, #12]	@ (8003f78 <u8g2_SetFontPosBaseline+0x18>)
 8003f6c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr
 8003f78:	08003f4b 	.word	0x08003f4b

08003f7c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d00b      	beq.n	8003fa8 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3374      	adds	r3, #116	@ 0x74
 8003f9a:	6839      	ldr	r1, [r7, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff fa9b 	bl	80034d8 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff ff66 	bl	8003e74 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8003fa8:	bf00      	nop
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	4611      	mov	r1, r2
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	80fb      	strh	r3, [r7, #6]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8003fcc:	8afb      	ldrh	r3, [r7, #22]
 8003fce:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	881a      	ldrh	r2, [r3, #0]
 8003fd4:	8abb      	ldrh	r3, [r7, #20]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8003fda:	8afa      	ldrh	r2, [r7, #22]
 8003fdc:	8abb      	ldrh	r3, [r7, #20]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d90b      	bls.n	8003ffa <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8003fe2:	8afa      	ldrh	r2, [r7, #22]
 8003fe4:	88bb      	ldrh	r3, [r7, #4]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d205      	bcs.n	8003ff6 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8003fea:	88bb      	ldrh	r3, [r7, #4]
 8003fec:	82bb      	strh	r3, [r7, #20]
      b--;
 8003fee:	8abb      	ldrh	r3, [r7, #20]
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	82bb      	strh	r3, [r7, #20]
 8003ff4:	e001      	b.n	8003ffa <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8003ff6:	88fb      	ldrh	r3, [r7, #6]
 8003ff8:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8003ffa:	8afa      	ldrh	r2, [r7, #22]
 8003ffc:	88bb      	ldrh	r3, [r7, #4]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d301      	bcc.n	8004006 <u8g2_clip_intersection2+0x56>
    return 0;
 8004002:	2300      	movs	r3, #0
 8004004:	e01c      	b.n	8004040 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8004006:	8aba      	ldrh	r2, [r7, #20]
 8004008:	88fb      	ldrh	r3, [r7, #6]
 800400a:	429a      	cmp	r2, r3
 800400c:	d801      	bhi.n	8004012 <u8g2_clip_intersection2+0x62>
    return 0;
 800400e:	2300      	movs	r3, #0
 8004010:	e016      	b.n	8004040 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8004012:	8afa      	ldrh	r2, [r7, #22]
 8004014:	88fb      	ldrh	r3, [r7, #6]
 8004016:	429a      	cmp	r2, r3
 8004018:	d201      	bcs.n	800401e <u8g2_clip_intersection2+0x6e>
    a = c;
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 800401e:	8aba      	ldrh	r2, [r7, #20]
 8004020:	88bb      	ldrh	r3, [r7, #4]
 8004022:	429a      	cmp	r2, r3
 8004024:	d901      	bls.n	800402a <u8g2_clip_intersection2+0x7a>
    b = d;
 8004026:	88bb      	ldrh	r3, [r7, #4]
 8004028:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8afa      	ldrh	r2, [r7, #22]
 800402e:	801a      	strh	r2, [r3, #0]
  b -= a;
 8004030:	8aba      	ldrh	r2, [r7, #20]
 8004032:	8afb      	ldrh	r3, [r7, #22]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	8aba      	ldrh	r2, [r7, #20]
 800403c:	801a      	strh	r2, [r3, #0]
  return 1;
 800403e:	2301      	movs	r3, #1
}
 8004040:	4618      	mov	r0, r3
 8004042:	371c      	adds	r7, #28
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800404a:	b590      	push	{r4, r7, lr}
 800404c:	b087      	sub	sp, #28
 800404e:	af02      	add	r7, sp, #8
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	4608      	mov	r0, r1
 8004054:	4611      	mov	r1, r2
 8004056:	461a      	mov	r2, r3
 8004058:	4603      	mov	r3, r0
 800405a:	817b      	strh	r3, [r7, #10]
 800405c:	460b      	mov	r3, r1
 800405e:	813b      	strh	r3, [r7, #8]
 8004060:	4613      	mov	r3, r2
 8004062:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004068:	893a      	ldrh	r2, [r7, #8]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8004072:	88f8      	ldrh	r0, [r7, #6]
 8004074:	893a      	ldrh	r2, [r7, #8]
 8004076:	8979      	ldrh	r1, [r7, #10]
 8004078:	f897 3020 	ldrb.w	r3, [r7, #32]
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	4603      	mov	r3, r0
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	47a0      	blx	r4
}
 8004084:	bf00      	nop
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	bd90      	pop	{r4, r7, pc}

0800408c <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b087      	sub	sp, #28
 8004090:	af02      	add	r7, sp, #8
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	4608      	mov	r0, r1
 8004096:	4611      	mov	r1, r2
 8004098:	461a      	mov	r2, r3
 800409a:	4603      	mov	r3, r0
 800409c:	817b      	strh	r3, [r7, #10]
 800409e:	460b      	mov	r3, r1
 80040a0:	813b      	strh	r3, [r7, #8]
 80040a2:	4613      	mov	r3, r2
 80040a4:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d075      	beq.n	800419c <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80040b0:	88fb      	ldrh	r3, [r7, #6]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d072      	beq.n	800419c <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d91a      	bls.n	80040f2 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 80040bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d109      	bne.n	80040d8 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 80040c4:	897a      	ldrh	r2, [r7, #10]
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	817b      	strh	r3, [r7, #10]
	  x++;
 80040ce:	897b      	ldrh	r3, [r7, #10]
 80040d0:	3301      	adds	r3, #1
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	817b      	strh	r3, [r7, #10]
 80040d6:	e00c      	b.n	80040f2 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 80040d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d108      	bne.n	80040f2 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 80040e0:	893a      	ldrh	r2, [r7, #8]
 80040e2:	88fb      	ldrh	r3, [r7, #6]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	813b      	strh	r3, [r7, #8]
	  y++;
 80040ea:	893b      	ldrh	r3, [r7, #8]
 80040ec:	3301      	adds	r3, #1
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 80040f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 80040fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d11a      	bne.n	800413c <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 800410c:	893b      	ldrh	r3, [r7, #8]
 800410e:	429a      	cmp	r2, r3
 8004110:	d83b      	bhi.n	800418a <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8004118:	893b      	ldrh	r3, [r7, #8]
 800411a:	429a      	cmp	r2, r3
 800411c:	d937      	bls.n	800418e <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800412a:	1db9      	adds	r1, r7, #6
 800412c:	f107 000a 	add.w	r0, r7, #10
 8004130:	f7ff ff3e 	bl	8003fb0 <u8g2_clip_intersection2>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d11a      	bne.n	8004170 <u8g2_DrawHVLine+0xe4>
	  return;
 800413a:	e02f      	b.n	800419c <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8004142:	897b      	ldrh	r3, [r7, #10]
 8004144:	429a      	cmp	r2, r3
 8004146:	d824      	bhi.n	8004192 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800414e:	897b      	ldrh	r3, [r7, #10]
 8004150:	429a      	cmp	r2, r3
 8004152:	d920      	bls.n	8004196 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8004160:	1db9      	adds	r1, r7, #6
 8004162:	f107 0008 	add.w	r0, r7, #8
 8004166:	f7ff ff23 	bl	8003fb0 <u8g2_clip_intersection2>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d014      	beq.n	800419a <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004174:	689c      	ldr	r4, [r3, #8]
 8004176:	8979      	ldrh	r1, [r7, #10]
 8004178:	893a      	ldrh	r2, [r7, #8]
 800417a:	88f8      	ldrh	r0, [r7, #6]
 800417c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	4603      	mov	r3, r0
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	47a0      	blx	r4
 8004188:	e008      	b.n	800419c <u8g2_DrawHVLine+0x110>
	  return;
 800418a:	bf00      	nop
 800418c:	e006      	b.n	800419c <u8g2_DrawHVLine+0x110>
	  return;
 800418e:	bf00      	nop
 8004190:	e004      	b.n	800419c <u8g2_DrawHVLine+0x110>
	  return;
 8004192:	bf00      	nop
 8004194:	e002      	b.n	800419c <u8g2_DrawHVLine+0x110>
	  return;
 8004196:	bf00      	nop
 8004198:	e000      	b.n	800419c <u8g2_DrawHVLine+0x110>
	  return;
 800419a:	bf00      	nop
    }
}
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd90      	pop	{r4, r7, pc}

080041a2 <u8g2_DrawVLine>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
}

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b086      	sub	sp, #24
 80041a6:	af02      	add	r7, sp, #8
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	4608      	mov	r0, r1
 80041ac:	4611      	mov	r1, r2
 80041ae:	461a      	mov	r2, r3
 80041b0:	4603      	mov	r3, r0
 80041b2:	817b      	strh	r3, [r7, #10]
 80041b4:	460b      	mov	r3, r1
 80041b6:	813b      	strh	r3, [r7, #8]
 80041b8:	4613      	mov	r3, r2
 80041ba:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 80041bc:	88fb      	ldrh	r3, [r7, #6]
 80041be:	893a      	ldrh	r2, [r7, #8]
 80041c0:	8979      	ldrh	r1, [r7, #10]
 80041c2:	2001      	movs	r0, #1
 80041c4:	9000      	str	r0, [sp, #0]
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f7ff ff60 	bl	800408c <u8g2_DrawHVLine>
}
 80041cc:	bf00      	nop
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80041d4:	b490      	push	{r4, r7}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4604      	mov	r4, r0
 80041dc:	4608      	mov	r0, r1
 80041de:	4611      	mov	r1, r2
 80041e0:	461a      	mov	r2, r3
 80041e2:	4623      	mov	r3, r4
 80041e4:	80fb      	strh	r3, [r7, #6]
 80041e6:	4603      	mov	r3, r0
 80041e8:	80bb      	strh	r3, [r7, #4]
 80041ea:	460b      	mov	r3, r1
 80041ec:	807b      	strh	r3, [r7, #2]
 80041ee:	4613      	mov	r3, r2
 80041f0:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 80041f2:	887a      	ldrh	r2, [r7, #2]
 80041f4:	88bb      	ldrh	r3, [r7, #4]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d20d      	bcs.n	8004216 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80041fa:	883a      	ldrh	r2, [r7, #0]
 80041fc:	88fb      	ldrh	r3, [r7, #6]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d901      	bls.n	8004206 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8004202:	2301      	movs	r3, #1
 8004204:	e014      	b.n	8004230 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8004206:	887a      	ldrh	r2, [r7, #2]
 8004208:	883b      	ldrh	r3, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d901      	bls.n	8004212 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800420e:	2301      	movs	r3, #1
 8004210:	e00e      	b.n	8004230 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004212:	2300      	movs	r3, #0
 8004214:	e00c      	b.n	8004230 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8004216:	883a      	ldrh	r2, [r7, #0]
 8004218:	88fb      	ldrh	r3, [r7, #6]
 800421a:	429a      	cmp	r2, r3
 800421c:	d907      	bls.n	800422e <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800421e:	887a      	ldrh	r2, [r7, #2]
 8004220:	883b      	ldrh	r3, [r7, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d901      	bls.n	800422a <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8004226:	2301      	movs	r3, #1
 8004228:	e002      	b.n	8004230 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800422a:	2300      	movs	r3, #0
 800422c:	e000      	b.n	8004230 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800422e:	2300      	movs	r3, #0
    }
  }
}
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bc90      	pop	{r4, r7}
 8004238:	4770      	bx	lr

0800423a <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	4608      	mov	r0, r1
 8004244:	4611      	mov	r1, r2
 8004246:	461a      	mov	r2, r3
 8004248:	4603      	mov	r3, r0
 800424a:	817b      	strh	r3, [r7, #10]
 800424c:	460b      	mov	r3, r1
 800424e:	813b      	strh	r3, [r7, #8]
 8004250:	4613      	mov	r3, r2
 8004252:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8004260:	8b3b      	ldrh	r3, [r7, #24]
 8004262:	893a      	ldrh	r2, [r7, #8]
 8004264:	f7ff ffb6 	bl	80041d4 <u8g2_is_intersection_decision_tree>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <u8g2_IsIntersection+0x38>
    return 0; 
 800426e:	2300      	movs	r3, #0
 8004270:	e00a      	b.n	8004288 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	897a      	ldrh	r2, [r7, #10]
 8004282:	f7ff ffa7 	bl	80041d4 <u8g2_is_intersection_decision_tree>
 8004286:	4603      	mov	r3, r0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004290:	b480      	push	{r7}
 8004292:	b089      	sub	sp, #36	@ 0x24
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	4608      	mov	r0, r1
 800429a:	4611      	mov	r1, r2
 800429c:	461a      	mov	r2, r3
 800429e:	4603      	mov	r3, r0
 80042a0:	817b      	strh	r3, [r7, #10]
 80042a2:	460b      	mov	r3, r1
 80042a4:	813b      	strh	r3, [r7, #8]
 80042a6:	4613      	mov	r3, r2
 80042a8:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80042aa:	893b      	ldrh	r3, [r7, #8]
 80042ac:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80042ae:	7efb      	ldrb	r3, [r7, #27]
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80042b6:	2301      	movs	r3, #1
 80042b8:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80042ba:	7e3a      	ldrb	r2, [r7, #24]
 80042bc:	7efb      	ldrb	r3, [r7, #27]
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d801      	bhi.n	80042da <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80042d6:	7e3b      	ldrb	r3, [r7, #24]
 80042d8:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d001      	beq.n	80042e8 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80042e4:	7e3b      	ldrb	r3, [r7, #24]
 80042e6:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80042e8:	893b      	ldrh	r3, [r7, #8]
 80042ea:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 80042ec:	8afb      	ldrh	r3, [r7, #22]
 80042ee:	f023 0307 	bic.w	r3, r3, #7
 80042f2:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	7c1b      	ldrb	r3, [r3, #16]
 80042fa:	461a      	mov	r2, r3
 80042fc:	8afb      	ldrh	r3, [r7, #22]
 80042fe:	fb02 f303 	mul.w	r3, r2, r3
 8004302:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004308:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 800430a:	8afb      	ldrh	r3, [r7, #22]
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	4413      	add	r3, r2
 8004310:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8004312:	897b      	ldrh	r3, [r7, #10]
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	4413      	add	r3, r2
 8004318:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800431a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800431e:	2b00      	cmp	r3, #0
 8004320:	d117      	bne.n	8004352 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	781a      	ldrb	r2, [r3, #0]
 8004326:	7ebb      	ldrb	r3, [r7, #26]
 8004328:	4313      	orrs	r3, r2
 800432a:	b2da      	uxtb	r2, r3
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	781a      	ldrb	r2, [r3, #0]
 8004334:	7e7b      	ldrb	r3, [r7, #25]
 8004336:	4053      	eors	r3, r2
 8004338:	b2da      	uxtb	r2, r3
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	701a      	strb	r2, [r3, #0]
	ptr++;
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3301      	adds	r3, #1
 8004342:	61fb      	str	r3, [r7, #28]
	len--;
 8004344:	88fb      	ldrh	r3, [r7, #6]
 8004346:	3b01      	subs	r3, #1
 8004348:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e8      	bne.n	8004322 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8004350:	e038      	b.n	80043c4 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	781a      	ldrb	r2, [r3, #0]
 8004356:	7ebb      	ldrb	r3, [r7, #26]
 8004358:	4313      	orrs	r3, r2
 800435a:	b2da      	uxtb	r2, r3
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	7e7b      	ldrb	r3, [r7, #25]
 8004366:	4053      	eors	r3, r2
 8004368:	b2da      	uxtb	r2, r3
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800436e:	7efb      	ldrb	r3, [r7, #27]
 8004370:	3301      	adds	r3, #1
 8004372:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8004374:	7efb      	ldrb	r3, [r7, #27]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	76fb      	strb	r3, [r7, #27]
      len--;
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	3b01      	subs	r3, #1
 8004380:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8004382:	7efb      	ldrb	r3, [r7, #27]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d114      	bne.n	80043b2 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800438c:	461a      	mov	r2, r3
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	4413      	add	r3, r2
 8004392:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800439a:	2b01      	cmp	r3, #1
 800439c:	d801      	bhi.n	80043a2 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800439e:	2301      	movs	r3, #1
 80043a0:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d008      	beq.n	80043be <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80043ac:	2301      	movs	r3, #1
 80043ae:	767b      	strb	r3, [r7, #25]
 80043b0:	e005      	b.n	80043be <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80043b2:	7ebb      	ldrb	r3, [r7, #26]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80043b8:	7e7b      	ldrb	r3, [r7, #25]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1c6      	bne.n	8004352 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80043c4:	bf00      	nop
 80043c6:	3724      	adds	r7, #36	@ 0x24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr

080043ce <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b082      	sub	sp, #8
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80043ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80043f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	4798      	blx	r3
}
 8004404:	bf00      	nop
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	4613      	mov	r3, r2
 800441a:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	79fa      	ldrb	r2, [r7, #7]
 8004432:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->draw_color = 1;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f7ff ffad 	bl	80043ce <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f7ff fd73 	bl	8003f60 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 8004482:	bf00      	nop
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800448a:	b480      	push	{r7}
 800448c:	b085      	sub	sp, #20
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800449e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80044a0:	89fb      	ldrh	r3, [r7, #14]
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	89fa      	ldrh	r2, [r7, #14]
 80044aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	7c1b      	ldrb	r3, [r3, #16]
 80044b0:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80044b2:	89fb      	ldrh	r3, [r7, #14]
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	89fa      	ldrh	r2, [r7, #14]
 80044bc:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80044c4:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80044c6:	89fb      	ldrh	r3, [r7, #14]
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	89fa      	ldrh	r2, [r7, #14]
 80044d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80044d8:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80044da:	89fb      	ldrh	r3, [r7, #14]
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 80044e2:	4413      	add	r3, r2
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	7c52      	ldrb	r2, [r2, #17]
 80044e8:	4293      	cmp	r3, r2
 80044ea:	dd07      	ble.n	80044fc <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	7c5b      	ldrb	r3, [r3, #17]
 80044f0:	461a      	mov	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80044fc:	89fb      	ldrh	r3, [r7, #14]
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 800451e:	89fb      	ldrh	r3, [r7, #14]
 8004520:	4413      	add	r3, r2
 8004522:	b29a      	uxth	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	8a9a      	ldrh	r2, [r3, #20]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	8ada      	ldrh	r2, [r3, #22]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr

08004548 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af02      	add	r7, sp, #8
 800454e:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	4603      	mov	r3, r0
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff fe64 	bl	800423a <u8g2_IsIntersection>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d104      	bne.n	8004582 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8004580:	e03b      	b.n	80045fa <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004596:	429a      	cmp	r2, r3
 8004598:	d205      	bcs.n	80045a6 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d905      	bls.n	80045c2 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d205      	bcs.n	80045de <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d905      	bls.n	80045fa <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 80045fa:	bf00      	nop
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff ff3d 	bl	800448a <u8g2_update_dimension_common>
}
 8004610:	bf00      	nop
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff ff7b 	bl	8004548 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b086      	sub	sp, #24
 800465e:	af02      	add	r7, sp, #8
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	4608      	mov	r0, r1
 8004664:	4611      	mov	r1, r2
 8004666:	461a      	mov	r2, r3
 8004668:	4603      	mov	r3, r0
 800466a:	817b      	strh	r3, [r7, #10]
 800466c:	460b      	mov	r3, r1
 800466e:	813b      	strh	r3, [r7, #8]
 8004670:	4613      	mov	r3, r2
 8004672:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8004674:	88f8      	ldrh	r0, [r7, #6]
 8004676:	893a      	ldrh	r2, [r7, #8]
 8004678:	8979      	ldrh	r1, [r7, #10]
 800467a:	7e3b      	ldrb	r3, [r7, #24]
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	4603      	mov	r3, r0
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f7ff fce2 	bl	800404a <u8g2_draw_hv_line_2dir>
}
 8004686:	bf00      	nop
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bc80      	pop	{r7}
 80046a6:	4770      	bx	lr

080046a8 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80046b4:	78fb      	ldrb	r3, [r7, #3]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <u8x8_ascii_next+0x18>
 80046ba:	78fb      	ldrb	r3, [r7, #3]
 80046bc:	2b0a      	cmp	r3, #10
 80046be:	d102      	bne.n	80046c6 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80046c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046c4:	e001      	b.n	80046ca <u8x8_ascii_next+0x22>
  return b;
 80046c6:	78fb      	ldrb	r3, [r7, #3]
 80046c8:	b29b      	uxth	r3, r3
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80046d4:	b590      	push	{r4, r7, lr}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691c      	ldr	r4, [r3, #16]
 80046e4:	78fa      	ldrb	r2, [r7, #3]
 80046e6:	2300      	movs	r3, #0
 80046e8:	2120      	movs	r1, #32
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	47a0      	blx	r4
 80046ee:	4603      	mov	r3, r0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd90      	pop	{r4, r7, pc}

080046f8 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80046f8:	b590      	push	{r4, r7, lr}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	460b      	mov	r3, r1
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	691c      	ldr	r4, [r3, #16]
 800470a:	7afa      	ldrb	r2, [r7, #11]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2117      	movs	r1, #23
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	47a0      	blx	r4
 8004714:	4603      	mov	r3, r0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	bd90      	pop	{r4, r7, pc}

0800471e <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b082      	sub	sp, #8
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	460b      	mov	r3, r1
 8004728:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800472a:	1cfb      	adds	r3, r7, #3
 800472c:	461a      	mov	r2, r3
 800472e:	2101      	movs	r1, #1
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff ffe1 	bl	80046f8 <u8x8_byte_SendBytes>
 8004736:	4603      	mov	r3, r0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8004740:	b590      	push	{r4, r7, lr}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	460b      	mov	r3, r1
 800474a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68dc      	ldr	r4, [r3, #12]
 8004750:	78fa      	ldrb	r2, [r7, #3]
 8004752:	2300      	movs	r3, #0
 8004754:	2115      	movs	r1, #21
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	47a0      	blx	r4
 800475a:	4603      	mov	r3, r0
}
 800475c:	4618      	mov	r0, r3
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	bd90      	pop	{r4, r7, pc}

08004764 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8004764:	b590      	push	{r4, r7, lr}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68dc      	ldr	r4, [r3, #12]
 8004774:	78fa      	ldrb	r2, [r7, #3]
 8004776:	2300      	movs	r3, #0
 8004778:	2116      	movs	r1, #22
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	47a0      	blx	r4
 800477e:	4603      	mov	r3, r0
}
 8004780:	4618      	mov	r0, r3
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	bd90      	pop	{r4, r7, pc}

08004788 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8004788:	b590      	push	{r4, r7, lr}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	460b      	mov	r3, r1
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	68dc      	ldr	r4, [r3, #12]
 800479a:	7afa      	ldrb	r2, [r7, #11]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2117      	movs	r1, #23
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	47a0      	blx	r4
 80047a4:	4603      	mov	r3, r0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd90      	pop	{r4, r7, pc}

080047ae <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80047ae:	b590      	push	{r4, r7, lr}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68dc      	ldr	r4, [r3, #12]
 80047ba:	2300      	movs	r3, #0
 80047bc:	2200      	movs	r2, #0
 80047be:	2118      	movs	r1, #24
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	47a0      	blx	r4
 80047c4:	4603      	mov	r3, r0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd90      	pop	{r4, r7, pc}

080047ce <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80047ce:	b590      	push	{r4, r7, lr}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68dc      	ldr	r4, [r3, #12]
 80047da:	2300      	movs	r3, #0
 80047dc:	2200      	movs	r2, #0
 80047de:	2119      	movs	r1, #25
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	47a0      	blx	r4
 80047e4:	4603      	mov	r3, r0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd90      	pop	{r4, r7, pc}

080047ee <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80047ee:	b590      	push	{r4, r7, lr}
 80047f0:	b085      	sub	sp, #20
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	73fb      	strb	r3, [r7, #15]
    data++;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	3301      	adds	r3, #1
 8004802:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	2bfe      	cmp	r3, #254	@ 0xfe
 8004808:	d031      	beq.n	800486e <u8x8_cad_SendSequence+0x80>
 800480a:	2bfe      	cmp	r3, #254	@ 0xfe
 800480c:	dc3d      	bgt.n	800488a <u8x8_cad_SendSequence+0x9c>
 800480e:	2b19      	cmp	r3, #25
 8004810:	dc3b      	bgt.n	800488a <u8x8_cad_SendSequence+0x9c>
 8004812:	2b18      	cmp	r3, #24
 8004814:	da23      	bge.n	800485e <u8x8_cad_SendSequence+0x70>
 8004816:	2b16      	cmp	r3, #22
 8004818:	dc02      	bgt.n	8004820 <u8x8_cad_SendSequence+0x32>
 800481a:	2b15      	cmp	r3, #21
 800481c:	da03      	bge.n	8004826 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800481e:	e034      	b.n	800488a <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8004820:	2b17      	cmp	r3, #23
 8004822:	d00e      	beq.n	8004842 <u8x8_cad_SendSequence+0x54>
	return;
 8004824:	e031      	b.n	800488a <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68dc      	ldr	r4, [r3, #12]
 8004830:	7bba      	ldrb	r2, [r7, #14]
 8004832:	7bf9      	ldrb	r1, [r7, #15]
 8004834:	2300      	movs	r3, #0
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	47a0      	blx	r4
	  data++;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	3301      	adds	r3, #1
 800483e:	603b      	str	r3, [r7, #0]
	  break;
 8004840:	e022      	b.n	8004888 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8004848:	f107 030e 	add.w	r3, r7, #14
 800484c:	461a      	mov	r2, r3
 800484e:	2101      	movs	r1, #1
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff ff99 	bl	8004788 <u8x8_cad_SendData>
	  data++;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	3301      	adds	r3, #1
 800485a:	603b      	str	r3, [r7, #0]
	  break;
 800485c:	e014      	b.n	8004888 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68dc      	ldr	r4, [r3, #12]
 8004862:	7bf9      	ldrb	r1, [r7, #15]
 8004864:	2300      	movs	r3, #0
 8004866:	2200      	movs	r2, #0
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	47a0      	blx	r4
	  break;
 800486c:	e00c      	b.n	8004888 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8004874:	7bbb      	ldrb	r3, [r7, #14]
 8004876:	461a      	mov	r2, r3
 8004878:	2129      	movs	r1, #41	@ 0x29
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f9d8 	bl	8004c30 <u8x8_gpio_call>
	  data++;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	3301      	adds	r3, #1
 8004884:	603b      	str	r3, [r7, #0]
	  break;
 8004886:	bf00      	nop
    cmd = *data;
 8004888:	e7b6      	b.n	80047f8 <u8x8_cad_SendSequence+0xa>
	return;
 800488a:	bf00      	nop
    }
  }
}
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	bd90      	pop	{r4, r7, pc}
	...

08004894 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004894:	b590      	push	{r4, r7, lr}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	460b      	mov	r3, r1
 80048a0:	72fb      	strb	r3, [r7, #11]
 80048a2:	4613      	mov	r3, r2
 80048a4:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80048a6:	7afb      	ldrb	r3, [r7, #11]
 80048a8:	3b14      	subs	r3, #20
 80048aa:	2b05      	cmp	r3, #5
 80048ac:	d82f      	bhi.n	800490e <u8x8_cad_001+0x7a>
 80048ae:	a201      	add	r2, pc, #4	@ (adr r2, 80048b4 <u8x8_cad_001+0x20>)
 80048b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b4:	080048fd 	.word	0x080048fd
 80048b8:	080048cd 	.word	0x080048cd
 80048bc:	080048e1 	.word	0x080048e1
 80048c0:	080048f5 	.word	0x080048f5
 80048c4:	080048fd 	.word	0x080048fd
 80048c8:	080048fd 	.word	0x080048fd
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80048cc:	2100      	movs	r1, #0
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f7ff ff00 	bl	80046d4 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80048d4:	7abb      	ldrb	r3, [r7, #10]
 80048d6:	4619      	mov	r1, r3
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f7ff ff20 	bl	800471e <u8x8_byte_SendByte>
      break;
 80048de:	e018      	b.n	8004912 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 80048e0:	2100      	movs	r1, #0
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f7ff fef6 	bl	80046d4 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80048e8:	7abb      	ldrb	r3, [r7, #10]
 80048ea:	4619      	mov	r1, r3
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f7ff ff16 	bl	800471e <u8x8_byte_SendByte>
      break;
 80048f2:	e00e      	b.n	8004912 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80048f4:	2101      	movs	r1, #1
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f7ff feec 	bl	80046d4 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	691c      	ldr	r4, [r3, #16]
 8004900:	7aba      	ldrb	r2, [r7, #10]
 8004902:	7af9      	ldrb	r1, [r7, #11]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	47a0      	blx	r4
 800490a:	4603      	mov	r3, r0
 800490c:	e002      	b.n	8004914 <u8x8_cad_001+0x80>
    default:
      return 0;
 800490e:	2300      	movs	r3, #0
 8004910:	e000      	b.n	8004914 <u8x8_cad_001+0x80>
  }
  return 1;
 8004912:	2301      	movs	r3, #1
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	bd90      	pop	{r4, r7, pc}

0800491c <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	607b      	str	r3, [r7, #4]
 8004926:	460b      	mov	r3, r1
 8004928:	72fb      	strb	r3, [r7, #11]
 800492a:	4613      	mov	r3, r2
 800492c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800492e:	7afb      	ldrb	r3, [r7, #11]
 8004930:	3b0b      	subs	r3, #11
 8004932:	2b04      	cmp	r3, #4
 8004934:	f200 808a 	bhi.w	8004a4c <u8x8_d_ssd1306_sh1106_generic+0x130>
 8004938:	a201      	add	r2, pc, #4	@ (adr r2, 8004940 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800493a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493e:	bf00      	nop
 8004940:	08004955 	.word	0x08004955
 8004944:	08004a4d 	.word	0x08004a4d
 8004948:	0800496f 	.word	0x0800496f
 800494c:	080049a1 	.word	0x080049a1
 8004950:	080049c1 	.word	0x080049c1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8004954:	7abb      	ldrb	r3, [r7, #10]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d104      	bne.n	8004964 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800495a:	4940      	ldr	r1, [pc, #256]	@ (8004a5c <u8x8_d_ssd1306_sh1106_generic+0x140>)
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f7ff ff46 	bl	80047ee <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8004962:	e075      	b.n	8004a50 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8004964:	493e      	ldr	r1, [pc, #248]	@ (8004a60 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f7ff ff41 	bl	80047ee <u8x8_cad_SendSequence>
      break;
 800496c:	e070      	b.n	8004a50 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800496e:	7abb      	ldrb	r3, [r7, #10]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8004974:	493b      	ldr	r1, [pc, #236]	@ (8004a64 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f7ff ff39 	bl	80047ee <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	7c9a      	ldrb	r2, [r3, #18]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8004988:	e062      	b.n	8004a50 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800498a:	4937      	ldr	r1, [pc, #220]	@ (8004a68 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f7ff ff2e 	bl	80047ee <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	7cda      	ldrb	r2, [r3, #19]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      break;
 800499e:	e057      	b.n	8004a50 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f7ff ff04 	bl	80047ae <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80049a6:	2181      	movs	r1, #129	@ 0x81
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f7ff fec9 	bl	8004740 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 80049ae:	7abb      	ldrb	r3, [r7, #10]
 80049b0:	4619      	mov	r1, r3
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f7ff fed6 	bl	8004764 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f7ff ff08 	bl	80047ce <u8x8_cad_EndTransfer>
      break;
 80049be:	e047      	b.n	8004a50 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f7ff fef4 	bl	80047ae <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	795b      	ldrb	r3, [r3, #5]
 80049ca:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80049cc:	7dfb      	ldrb	r3, [r7, #23]
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
 80049da:	4413      	add	r3, r2
 80049dc:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 80049de:	2140      	movs	r1, #64	@ 0x40
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f7ff fead 	bl	8004740 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80049e6:	7dfb      	ldrb	r3, [r7, #23]
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	f043 0310 	orr.w	r3, r3, #16
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	4619      	mov	r1, r3
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f7ff fea3 	bl	8004740 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 80049fa:	7dfb      	ldrb	r3, [r7, #23]
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	4619      	mov	r1, r3
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f7ff fead 	bl	8004764 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	799b      	ldrb	r3, [r3, #6]
 8004a0e:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	4619      	mov	r1, r3
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f7ff fea4 	bl	8004764 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	791b      	ldrb	r3, [r3, #4]
 8004a20:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8004a28:	7dbb      	ldrb	r3, [r7, #22]
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	4619      	mov	r1, r3
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f7ff fea8 	bl	8004788 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8004a38:	7abb      	ldrb	r3, [r7, #10]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8004a3e:	7abb      	ldrb	r3, [r7, #10]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1eb      	bne.n	8004a1c <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f7ff fec2 	bl	80047ce <u8x8_cad_EndTransfer>
      break;
 8004a4a:	e001      	b.n	8004a50 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e000      	b.n	8004a52 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8004a50:	2301      	movs	r3, #1
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	080086c4 	.word	0x080086c4
 8004a60:	080086cc 	.word	0x080086cc
 8004a64:	080086d4 	.word	0x080086d4
 8004a68:	080086dc 	.word	0x080086dc

08004a6c <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	607b      	str	r3, [r7, #4]
 8004a76:	460b      	mov	r3, r1
 8004a78:	72fb      	strb	r3, [r7, #11]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8004a7e:	7aba      	ldrb	r2, [r7, #10]
 8004a80:	7af9      	ldrb	r1, [r7, #11]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f7ff ff49 	bl	800491c <u8x8_d_ssd1306_sh1106_generic>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e014      	b.n	8004abe <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8004a94:	7afb      	ldrb	r3, [r7, #11]
 8004a96:	2b09      	cmp	r3, #9
 8004a98:	d009      	beq.n	8004aae <u8x8_d_ssd1306_128x64_noname+0x42>
 8004a9a:	2b0a      	cmp	r3, #10
 8004a9c:	d10c      	bne.n	8004ab8 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f829 	bl	8004af6 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8004aa4:	4908      	ldr	r1, [pc, #32]	@ (8004ac8 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f7ff fea1 	bl	80047ee <u8x8_cad_SendSequence>
      break;
 8004aac:	e006      	b.n	8004abc <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8004aae:	4907      	ldr	r1, [pc, #28]	@ (8004acc <u8x8_d_ssd1306_128x64_noname+0x60>)
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 f80d 	bl	8004ad0 <u8x8_d_helper_display_setup_memory>
      break;
 8004ab6:	e001      	b.n	8004abc <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e000      	b.n	8004abe <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8004abc:	2301      	movs	r3, #1
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	0800868c 	.word	0x0800868c
 8004acc:	080086e4 	.word	0x080086e4

08004ad0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	7c9a      	ldrb	r2, [r3, #18]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr

08004af6 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8004af6:	b590      	push	{r4, r7, lr}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695c      	ldr	r4, [r3, #20]
 8004b02:	2300      	movs	r3, #0
 8004b04:	2200      	movs	r2, #0
 8004b06:	2128      	movs	r1, #40	@ 0x28
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68dc      	ldr	r4, [r3, #12]
 8004b10:	2300      	movs	r3, #0
 8004b12:	2200      	movs	r2, #0
 8004b14:	2114      	movs	r1, #20
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	214b      	movs	r1, #75	@ 0x4b
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f886 	bl	8004c30 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	791b      	ldrb	r3, [r3, #4]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	2129      	movs	r1, #41	@ 0x29
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f87e 	bl	8004c30 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8004b34:	2200      	movs	r2, #0
 8004b36:	214b      	movs	r1, #75	@ 0x4b
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f879 	bl	8004c30 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	791b      	ldrb	r3, [r3, #4]
 8004b44:	461a      	mov	r2, r3
 8004b46:	2129      	movs	r1, #41	@ 0x29
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f871 	bl	8004c30 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8004b4e:	2201      	movs	r2, #1
 8004b50:	214b      	movs	r1, #75	@ 0x4b
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f86c 	bl	8004c30 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	795b      	ldrb	r3, [r3, #5]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	2129      	movs	r1, #41	@ 0x29
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f864 	bl	8004c30 <u8x8_gpio_call>
}    
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd90      	pop	{r4, r7, pc}

08004b70 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8004b70:	b590      	push	{r4, r7, lr}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	4608      	mov	r0, r1
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4603      	mov	r3, r0
 8004b80:	70fb      	strb	r3, [r7, #3]
 8004b82:	460b      	mov	r3, r1
 8004b84:	70bb      	strb	r3, [r7, #2]
 8004b86:	4613      	mov	r3, r2
 8004b88:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8004b8e:	78bb      	ldrb	r3, [r7, #2]
 8004b90:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8004b92:	787b      	ldrb	r3, [r7, #1]
 8004b94:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689c      	ldr	r4, [r3, #8]
 8004b9e:	f107 0308 	add.w	r3, r7, #8
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	210f      	movs	r1, #15
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	47a0      	blx	r4
 8004baa:	4603      	mov	r3, r0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd90      	pop	{r4, r7, pc}

08004bb4 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8004bb4:	b590      	push	{r4, r7, lr}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689c      	ldr	r4, [r3, #8]
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2109      	movs	r1, #9
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	47a0      	blx	r4
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd90      	pop	{r4, r7, pc}

08004bd2 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8004bd2:	b590      	push	{r4, r7, lr}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689c      	ldr	r4, [r3, #8]
 8004bde:	2300      	movs	r3, #0
 8004be0:	2200      	movs	r2, #0
 8004be2:	210a      	movs	r1, #10
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	47a0      	blx	r4
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd90      	pop	{r4, r7, pc}

08004bf0 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8004bf0:	b590      	push	{r4, r7, lr}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689c      	ldr	r4, [r3, #8]
 8004c00:	78fa      	ldrb	r2, [r7, #3]
 8004c02:	2300      	movs	r3, #0
 8004c04:	210b      	movs	r1, #11
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	47a0      	blx	r4
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd90      	pop	{r4, r7, pc}

08004c12 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8004c12:	b590      	push	{r4, r7, lr}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689c      	ldr	r4, [r3, #8]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2200      	movs	r2, #0
 8004c22:	2110      	movs	r1, #16
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	47a0      	blx	r4
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd90      	pop	{r4, r7, pc}

08004c30 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8004c30:	b590      	push	{r4, r7, lr}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	70fb      	strb	r3, [r7, #3]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	695c      	ldr	r4, [r3, #20]
 8004c44:	78ba      	ldrb	r2, [r7, #2]
 8004c46:	78f9      	ldrb	r1, [r7, #3]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	47a0      	blx	r4
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd90      	pop	{r4, r7, pc}

08004c56 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b085      	sub	sp, #20
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	607b      	str	r3, [r7, #4]
 8004c60:	460b      	mov	r3, r1
 8004c62:	72fb      	strb	r3, [r7, #11]
 8004c64:	4613      	mov	r3, r2
 8004c66:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr

08004c74 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a11      	ldr	r2, [pc, #68]	@ (8004ccc <u8x8_SetupDefaults+0x58>)
 8004c86:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a10      	ldr	r2, [pc, #64]	@ (8004ccc <u8x8_SetupDefaults+0x58>)
 8004c8c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a0e      	ldr	r2, [pc, #56]	@ (8004ccc <u8x8_SetupDefaults+0x58>)
 8004c92:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a0d      	ldr	r2, [pc, #52]	@ (8004ccc <u8x8_SetupDefaults+0x58>)
 8004c98:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	22ff      	movs	r2, #255	@ 0xff
 8004cb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	22ff      	movs	r2, #255	@ 0xff
 8004cbc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	08004c57 	.word	0x08004c57

08004cd0 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f7ff ffc8 	bl	8004c74 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f7ff ff59 	bl	8004bb4 <u8x8_SetupMemory>
}
 8004d02:	bf00      	nop
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <__NVIC_SetPriority>:
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	4603      	mov	r3, r0
 8004d14:	6039      	str	r1, [r7, #0]
 8004d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	db0a      	blt.n	8004d36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	490c      	ldr	r1, [pc, #48]	@ (8004d58 <__NVIC_SetPriority+0x4c>)
 8004d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2a:	0112      	lsls	r2, r2, #4
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	440b      	add	r3, r1
 8004d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004d34:	e00a      	b.n	8004d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	4908      	ldr	r1, [pc, #32]	@ (8004d5c <__NVIC_SetPriority+0x50>)
 8004d3c:	79fb      	ldrb	r3, [r7, #7]
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	3b04      	subs	r3, #4
 8004d44:	0112      	lsls	r2, r2, #4
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	440b      	add	r3, r1
 8004d4a:	761a      	strb	r2, [r3, #24]
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bc80      	pop	{r7}
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	e000e100 	.word	0xe000e100
 8004d5c:	e000ed00 	.word	0xe000ed00

08004d60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004d64:	4b05      	ldr	r3, [pc, #20]	@ (8004d7c <SysTick_Handler+0x1c>)
 8004d66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004d68:	f001 fd1c 	bl	80067a4 <xTaskGetSchedulerState>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d001      	beq.n	8004d76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004d72:	f002 fac1 	bl	80072f8 <xPortSysTickHandler>
  }
}
 8004d76:	bf00      	nop
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	e000e010 	.word	0xe000e010

08004d80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004d84:	2100      	movs	r1, #0
 8004d86:	f06f 0004 	mvn.w	r0, #4
 8004d8a:	f7ff ffbf 	bl	8004d0c <__NVIC_SetPriority>
#endif
}
 8004d8e:	bf00      	nop
 8004d90:	bd80      	pop	{r7, pc}
	...

08004d94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d9a:	f3ef 8305 	mrs	r3, IPSR
 8004d9e:	603b      	str	r3, [r7, #0]
  return(result);
 8004da0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004da6:	f06f 0305 	mvn.w	r3, #5
 8004daa:	607b      	str	r3, [r7, #4]
 8004dac:	e00c      	b.n	8004dc8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004dae:	4b09      	ldr	r3, [pc, #36]	@ (8004dd4 <osKernelInitialize+0x40>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d105      	bne.n	8004dc2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004db6:	4b07      	ldr	r3, [pc, #28]	@ (8004dd4 <osKernelInitialize+0x40>)
 8004db8:	2201      	movs	r2, #1
 8004dba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	607b      	str	r3, [r7, #4]
 8004dc0:	e002      	b.n	8004dc8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004dc8:	687b      	ldr	r3, [r7, #4]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bc80      	pop	{r7}
 8004dd2:	4770      	bx	lr
 8004dd4:	20000640 	.word	0x20000640

08004dd8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dde:	f3ef 8305 	mrs	r3, IPSR
 8004de2:	603b      	str	r3, [r7, #0]
  return(result);
 8004de4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004dea:	f06f 0305 	mvn.w	r3, #5
 8004dee:	607b      	str	r3, [r7, #4]
 8004df0:	e010      	b.n	8004e14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004df2:	4b0b      	ldr	r3, [pc, #44]	@ (8004e20 <osKernelStart+0x48>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d109      	bne.n	8004e0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004dfa:	f7ff ffc1 	bl	8004d80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004dfe:	4b08      	ldr	r3, [pc, #32]	@ (8004e20 <osKernelStart+0x48>)
 8004e00:	2202      	movs	r2, #2
 8004e02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004e04:	f001 f86e 	bl	8005ee4 <vTaskStartScheduler>
      stat = osOK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	607b      	str	r3, [r7, #4]
 8004e0c:	e002      	b.n	8004e14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004e14:	687b      	ldr	r3, [r7, #4]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	20000640 	.word	0x20000640

08004e24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08e      	sub	sp, #56	@ 0x38
 8004e28:	af04      	add	r7, sp, #16
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e34:	f3ef 8305 	mrs	r3, IPSR
 8004e38:	617b      	str	r3, [r7, #20]
  return(result);
 8004e3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d17e      	bne.n	8004f3e <osThreadNew+0x11a>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d07b      	beq.n	8004f3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004e46:	2380      	movs	r3, #128	@ 0x80
 8004e48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004e4a:	2318      	movs	r3, #24
 8004e4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004e52:	f04f 33ff 	mov.w	r3, #4294967295
 8004e56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d045      	beq.n	8004eea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <osThreadNew+0x48>
        name = attr->name;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d002      	beq.n	8004e7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <osThreadNew+0x6e>
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	2b38      	cmp	r3, #56	@ 0x38
 8004e84:	d805      	bhi.n	8004e92 <osThreadNew+0x6e>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <osThreadNew+0x72>
        return (NULL);
 8004e92:	2300      	movs	r3, #0
 8004e94:	e054      	b.n	8004f40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	089b      	lsrs	r3, r3, #2
 8004ea4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00e      	beq.n	8004ecc <osThreadNew+0xa8>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	2ba7      	cmp	r3, #167	@ 0xa7
 8004eb4:	d90a      	bls.n	8004ecc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d006      	beq.n	8004ecc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <osThreadNew+0xa8>
        mem = 1;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	61bb      	str	r3, [r7, #24]
 8004eca:	e010      	b.n	8004eee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10c      	bne.n	8004eee <osThreadNew+0xca>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d108      	bne.n	8004eee <osThreadNew+0xca>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d104      	bne.n	8004eee <osThreadNew+0xca>
          mem = 0;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	61bb      	str	r3, [r7, #24]
 8004ee8:	e001      	b.n	8004eee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d110      	bne.n	8004f16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004efc:	9202      	str	r2, [sp, #8]
 8004efe:	9301      	str	r3, [sp, #4]
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	6a3a      	ldr	r2, [r7, #32]
 8004f08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 fdf6 	bl	8005afc <xTaskCreateStatic>
 8004f10:	4603      	mov	r3, r0
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	e013      	b.n	8004f3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d110      	bne.n	8004f3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	f107 0310 	add.w	r3, r7, #16
 8004f24:	9301      	str	r3, [sp, #4]
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 fe44 	bl	8005bbc <xTaskCreate>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d001      	beq.n	8004f3e <osThreadNew+0x11a>
            hTask = NULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004f3e:	693b      	ldr	r3, [r7, #16]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3728      	adds	r7, #40	@ 0x28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4a06      	ldr	r2, [pc, #24]	@ (8004f70 <vApplicationGetIdleTaskMemory+0x28>)
 8004f58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	4a05      	ldr	r2, [pc, #20]	@ (8004f74 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2280      	movs	r2, #128	@ 0x80
 8004f64:	601a      	str	r2, [r3, #0]
}
 8004f66:	bf00      	nop
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr
 8004f70:	20000644 	.word	0x20000644
 8004f74:	200006ec 	.word	0x200006ec

08004f78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4a07      	ldr	r2, [pc, #28]	@ (8004fa4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	4a06      	ldr	r2, [pc, #24]	@ (8004fa8 <vApplicationGetTimerTaskMemory+0x30>)
 8004f8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f96:	601a      	str	r2, [r3, #0]
}
 8004f98:	bf00      	nop
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	200008ec 	.word	0x200008ec
 8004fa8:	20000994 	.word	0x20000994

08004fac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f103 0208 	add.w	r2, r3, #8
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f103 0208 	add.w	r2, r3, #8
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f103 0208 	add.w	r2, r3, #8
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bc80      	pop	{r7}
 8004fe8:	4770      	bx	lr

08004fea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bc80      	pop	{r7}
 8005000:	4770      	bx	lr

08005002 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005002:	b480      	push	{r7}
 8005004:	b085      	sub	sp, #20
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	601a      	str	r2, [r3, #0]
}
 800503e:	bf00      	nop
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	bc80      	pop	{r7}
 8005046:	4770      	bx	lr

08005048 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505e:	d103      	bne.n	8005068 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	e00c      	b.n	8005082 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3308      	adds	r3, #8
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	e002      	b.n	8005076 <vListInsert+0x2e>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	429a      	cmp	r2, r3
 8005080:	d2f6      	bcs.n	8005070 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	601a      	str	r2, [r3, #0]
}
 80050ae:	bf00      	nop
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr

080050b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6892      	ldr	r2, [r2, #8]
 80050ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6852      	ldr	r2, [r2, #4]
 80050d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d103      	bne.n	80050ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	1e5a      	subs	r2, r3, #1
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	bc80      	pop	{r7}
 8005108:	4770      	bx	lr
	...

0800510c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10b      	bne.n	8005138 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005132:	bf00      	nop
 8005134:	bf00      	nop
 8005136:	e7fd      	b.n	8005134 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005138:	f002 f860 	bl	80071fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005144:	68f9      	ldr	r1, [r7, #12]
 8005146:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005148:	fb01 f303 	mul.w	r3, r1, r3
 800514c:	441a      	add	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005168:	3b01      	subs	r3, #1
 800516a:	68f9      	ldr	r1, [r7, #12]
 800516c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800516e:	fb01 f303 	mul.w	r3, r1, r3
 8005172:	441a      	add	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	22ff      	movs	r2, #255	@ 0xff
 800517c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	22ff      	movs	r2, #255	@ 0xff
 8005184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d114      	bne.n	80051b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d01a      	beq.n	80051cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3310      	adds	r3, #16
 800519a:	4618      	mov	r0, r3
 800519c:	f001 f93c 	bl	8006418 <xTaskRemoveFromEventList>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d012      	beq.n	80051cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051a6:	4b0d      	ldr	r3, [pc, #52]	@ (80051dc <xQueueGenericReset+0xd0>)
 80051a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	e009      	b.n	80051cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	3310      	adds	r3, #16
 80051bc:	4618      	mov	r0, r3
 80051be:	f7ff fef5 	bl	8004fac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3324      	adds	r3, #36	@ 0x24
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff fef0 	bl	8004fac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051cc:	f002 f846 	bl	800725c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051d0:	2301      	movs	r3, #1
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	e000ed04 	.word	0xe000ed04

080051e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08e      	sub	sp, #56	@ 0x38
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10b      	bne.n	800520c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005206:	bf00      	nop
 8005208:	bf00      	nop
 800520a:	e7fd      	b.n	8005208 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10b      	bne.n	800522a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop
 8005228:	e7fd      	b.n	8005226 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <xQueueGenericCreateStatic+0x56>
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <xQueueGenericCreateStatic+0x5a>
 8005236:	2301      	movs	r3, #1
 8005238:	e000      	b.n	800523c <xQueueGenericCreateStatic+0x5c>
 800523a:	2300      	movs	r3, #0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10b      	bne.n	8005258 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	623b      	str	r3, [r7, #32]
}
 8005252:	bf00      	nop
 8005254:	bf00      	nop
 8005256:	e7fd      	b.n	8005254 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d102      	bne.n	8005264 <xQueueGenericCreateStatic+0x84>
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <xQueueGenericCreateStatic+0x88>
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <xQueueGenericCreateStatic+0x8a>
 8005268:	2300      	movs	r3, #0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10b      	bne.n	8005286 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	61fb      	str	r3, [r7, #28]
}
 8005280:	bf00      	nop
 8005282:	bf00      	nop
 8005284:	e7fd      	b.n	8005282 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005286:	2350      	movs	r3, #80	@ 0x50
 8005288:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2b50      	cmp	r3, #80	@ 0x50
 800528e:	d00b      	beq.n	80052a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	61bb      	str	r3, [r7, #24]
}
 80052a2:	bf00      	nop
 80052a4:	bf00      	nop
 80052a6:	e7fd      	b.n	80052a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80052ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00d      	beq.n	80052d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80052c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	4613      	mov	r3, r2
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f805 	bl	80052da <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3730      	adds	r7, #48	@ 0x30
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	607a      	str	r2, [r7, #4]
 80052e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d103      	bne.n	80052f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	e002      	b.n	80052fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005308:	2101      	movs	r1, #1
 800530a:	69b8      	ldr	r0, [r7, #24]
 800530c:	f7ff fefe 	bl	800510c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	78fa      	ldrb	r2, [r7, #3]
 8005314:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005318:	bf00      	nop
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08e      	sub	sp, #56	@ 0x38
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800532e:	2300      	movs	r3, #0
 8005330:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10b      	bne.n	8005354 <xQueueGenericSend+0x34>
	__asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800534e:	bf00      	nop
 8005350:	bf00      	nop
 8005352:	e7fd      	b.n	8005350 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d103      	bne.n	8005362 <xQueueGenericSend+0x42>
 800535a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <xQueueGenericSend+0x46>
 8005362:	2301      	movs	r3, #1
 8005364:	e000      	b.n	8005368 <xQueueGenericSend+0x48>
 8005366:	2300      	movs	r3, #0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10b      	bne.n	8005384 <xQueueGenericSend+0x64>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800537e:	bf00      	nop
 8005380:	bf00      	nop
 8005382:	e7fd      	b.n	8005380 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2b02      	cmp	r3, #2
 8005388:	d103      	bne.n	8005392 <xQueueGenericSend+0x72>
 800538a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <xQueueGenericSend+0x76>
 8005392:	2301      	movs	r3, #1
 8005394:	e000      	b.n	8005398 <xQueueGenericSend+0x78>
 8005396:	2300      	movs	r3, #0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10b      	bne.n	80053b4 <xQueueGenericSend+0x94>
	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	623b      	str	r3, [r7, #32]
}
 80053ae:	bf00      	nop
 80053b0:	bf00      	nop
 80053b2:	e7fd      	b.n	80053b0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053b4:	f001 f9f6 	bl	80067a4 <xTaskGetSchedulerState>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d102      	bne.n	80053c4 <xQueueGenericSend+0xa4>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <xQueueGenericSend+0xa8>
 80053c4:	2301      	movs	r3, #1
 80053c6:	e000      	b.n	80053ca <xQueueGenericSend+0xaa>
 80053c8:	2300      	movs	r3, #0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10b      	bne.n	80053e6 <xQueueGenericSend+0xc6>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	61fb      	str	r3, [r7, #28]
}
 80053e0:	bf00      	nop
 80053e2:	bf00      	nop
 80053e4:	e7fd      	b.n	80053e2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053e6:	f001 ff09 	bl	80071fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d302      	bcc.n	80053fc <xQueueGenericSend+0xdc>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d129      	bne.n	8005450 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005402:	f000 fa0f 	bl	8005824 <prvCopyDataToQueue>
 8005406:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540c:	2b00      	cmp	r3, #0
 800540e:	d010      	beq.n	8005432 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005412:	3324      	adds	r3, #36	@ 0x24
 8005414:	4618      	mov	r0, r3
 8005416:	f000 ffff 	bl	8006418 <xTaskRemoveFromEventList>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d013      	beq.n	8005448 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005420:	4b3f      	ldr	r3, [pc, #252]	@ (8005520 <xQueueGenericSend+0x200>)
 8005422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	e00a      	b.n	8005448 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005434:	2b00      	cmp	r3, #0
 8005436:	d007      	beq.n	8005448 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005438:	4b39      	ldr	r3, [pc, #228]	@ (8005520 <xQueueGenericSend+0x200>)
 800543a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005448:	f001 ff08 	bl	800725c <vPortExitCritical>
				return pdPASS;
 800544c:	2301      	movs	r3, #1
 800544e:	e063      	b.n	8005518 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d103      	bne.n	800545e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005456:	f001 ff01 	bl	800725c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800545a:	2300      	movs	r3, #0
 800545c:	e05c      	b.n	8005518 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800545e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005460:	2b00      	cmp	r3, #0
 8005462:	d106      	bne.n	8005472 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005464:	f107 0314 	add.w	r3, r7, #20
 8005468:	4618      	mov	r0, r3
 800546a:	f001 f839 	bl	80064e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800546e:	2301      	movs	r3, #1
 8005470:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005472:	f001 fef3 	bl	800725c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005476:	f000 fda5 	bl	8005fc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800547a:	f001 febf 	bl	80071fc <vPortEnterCritical>
 800547e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005480:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005484:	b25b      	sxtb	r3, r3
 8005486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548a:	d103      	bne.n	8005494 <xQueueGenericSend+0x174>
 800548c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005496:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800549a:	b25b      	sxtb	r3, r3
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d103      	bne.n	80054aa <xQueueGenericSend+0x18a>
 80054a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054aa:	f001 fed7 	bl	800725c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054ae:	1d3a      	adds	r2, r7, #4
 80054b0:	f107 0314 	add.w	r3, r7, #20
 80054b4:	4611      	mov	r1, r2
 80054b6:	4618      	mov	r0, r3
 80054b8:	f001 f828 	bl	800650c <xTaskCheckForTimeOut>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d124      	bne.n	800550c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054c4:	f000 faa6 	bl	8005a14 <prvIsQueueFull>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d018      	beq.n	8005500 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d0:	3310      	adds	r3, #16
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	4611      	mov	r1, r2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 ff4c 	bl	8006374 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054de:	f000 fa31 	bl	8005944 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054e2:	f000 fd7d 	bl	8005fe0 <xTaskResumeAll>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f47f af7c 	bne.w	80053e6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80054ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005520 <xQueueGenericSend+0x200>)
 80054f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	e772      	b.n	80053e6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005500:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005502:	f000 fa1f 	bl	8005944 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005506:	f000 fd6b 	bl	8005fe0 <xTaskResumeAll>
 800550a:	e76c      	b.n	80053e6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800550c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800550e:	f000 fa19 	bl	8005944 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005512:	f000 fd65 	bl	8005fe0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005516:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005518:	4618      	mov	r0, r3
 800551a:	3738      	adds	r7, #56	@ 0x38
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	e000ed04 	.word	0xe000ed04

08005524 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b090      	sub	sp, #64	@ 0x40
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10b      	bne.n	8005554 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800554e:	bf00      	nop
 8005550:	bf00      	nop
 8005552:	e7fd      	b.n	8005550 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d103      	bne.n	8005562 <xQueueGenericSendFromISR+0x3e>
 800555a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800555c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <xQueueGenericSendFromISR+0x42>
 8005562:	2301      	movs	r3, #1
 8005564:	e000      	b.n	8005568 <xQueueGenericSendFromISR+0x44>
 8005566:	2300      	movs	r3, #0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10b      	bne.n	8005584 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800556c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800557e:	bf00      	nop
 8005580:	bf00      	nop
 8005582:	e7fd      	b.n	8005580 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d103      	bne.n	8005592 <xQueueGenericSendFromISR+0x6e>
 800558a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800558c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558e:	2b01      	cmp	r3, #1
 8005590:	d101      	bne.n	8005596 <xQueueGenericSendFromISR+0x72>
 8005592:	2301      	movs	r3, #1
 8005594:	e000      	b.n	8005598 <xQueueGenericSendFromISR+0x74>
 8005596:	2300      	movs	r3, #0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10b      	bne.n	80055b4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	623b      	str	r3, [r7, #32]
}
 80055ae:	bf00      	nop
 80055b0:	bf00      	nop
 80055b2:	e7fd      	b.n	80055b0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055b4:	f001 fee4 	bl	8007380 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055b8:	f3ef 8211 	mrs	r2, BASEPRI
 80055bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	61fa      	str	r2, [r7, #28]
 80055ce:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055d0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055d2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055dc:	429a      	cmp	r2, r3
 80055de:	d302      	bcc.n	80055e6 <xQueueGenericSendFromISR+0xc2>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d12f      	bne.n	8005646 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	68b9      	ldr	r1, [r7, #8]
 80055fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80055fc:	f000 f912 	bl	8005824 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005600:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005608:	d112      	bne.n	8005630 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800560a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800560c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560e:	2b00      	cmp	r3, #0
 8005610:	d016      	beq.n	8005640 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005614:	3324      	adds	r3, #36	@ 0x24
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fefe 	bl	8006418 <xTaskRemoveFromEventList>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00e      	beq.n	8005640 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00b      	beq.n	8005640 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	e007      	b.n	8005640 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005630:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005634:	3301      	adds	r3, #1
 8005636:	b2db      	uxtb	r3, r3
 8005638:	b25a      	sxtb	r2, r3
 800563a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800563c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005640:	2301      	movs	r3, #1
 8005642:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005644:	e001      	b.n	800564a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005646:	2300      	movs	r3, #0
 8005648:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800564a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800564c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005654:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005658:	4618      	mov	r0, r3
 800565a:	3740      	adds	r7, #64	@ 0x40
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b08c      	sub	sp, #48	@ 0x30
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800566c:	2300      	movs	r3, #0
 800566e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10b      	bne.n	8005692 <xQueueReceive+0x32>
	__asm volatile
 800567a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	623b      	str	r3, [r7, #32]
}
 800568c:	bf00      	nop
 800568e:	bf00      	nop
 8005690:	e7fd      	b.n	800568e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d103      	bne.n	80056a0 <xQueueReceive+0x40>
 8005698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <xQueueReceive+0x44>
 80056a0:	2301      	movs	r3, #1
 80056a2:	e000      	b.n	80056a6 <xQueueReceive+0x46>
 80056a4:	2300      	movs	r3, #0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10b      	bne.n	80056c2 <xQueueReceive+0x62>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	61fb      	str	r3, [r7, #28]
}
 80056bc:	bf00      	nop
 80056be:	bf00      	nop
 80056c0:	e7fd      	b.n	80056be <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056c2:	f001 f86f 	bl	80067a4 <xTaskGetSchedulerState>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d102      	bne.n	80056d2 <xQueueReceive+0x72>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <xQueueReceive+0x76>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <xQueueReceive+0x78>
 80056d6:	2300      	movs	r3, #0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10b      	bne.n	80056f4 <xQueueReceive+0x94>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	61bb      	str	r3, [r7, #24]
}
 80056ee:	bf00      	nop
 80056f0:	bf00      	nop
 80056f2:	e7fd      	b.n	80056f0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056f4:	f001 fd82 	bl	80071fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005700:	2b00      	cmp	r3, #0
 8005702:	d01f      	beq.n	8005744 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005704:	68b9      	ldr	r1, [r7, #8]
 8005706:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005708:	f000 f8f6 	bl	80058f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570e:	1e5a      	subs	r2, r3, #1
 8005710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005712:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00f      	beq.n	800573c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800571c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571e:	3310      	adds	r3, #16
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fe79 	bl	8006418 <xTaskRemoveFromEventList>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d007      	beq.n	800573c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800572c:	4b3c      	ldr	r3, [pc, #240]	@ (8005820 <xQueueReceive+0x1c0>)
 800572e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800573c:	f001 fd8e 	bl	800725c <vPortExitCritical>
				return pdPASS;
 8005740:	2301      	movs	r3, #1
 8005742:	e069      	b.n	8005818 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d103      	bne.n	8005752 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800574a:	f001 fd87 	bl	800725c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800574e:	2300      	movs	r3, #0
 8005750:	e062      	b.n	8005818 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005754:	2b00      	cmp	r3, #0
 8005756:	d106      	bne.n	8005766 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005758:	f107 0310 	add.w	r3, r7, #16
 800575c:	4618      	mov	r0, r3
 800575e:	f000 febf 	bl	80064e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005762:	2301      	movs	r3, #1
 8005764:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005766:	f001 fd79 	bl	800725c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800576a:	f000 fc2b 	bl	8005fc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800576e:	f001 fd45 	bl	80071fc <vPortEnterCritical>
 8005772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005774:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005778:	b25b      	sxtb	r3, r3
 800577a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577e:	d103      	bne.n	8005788 <xQueueReceive+0x128>
 8005780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800578e:	b25b      	sxtb	r3, r3
 8005790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005794:	d103      	bne.n	800579e <xQueueReceive+0x13e>
 8005796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800579e:	f001 fd5d 	bl	800725c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057a2:	1d3a      	adds	r2, r7, #4
 80057a4:	f107 0310 	add.w	r3, r7, #16
 80057a8:	4611      	mov	r1, r2
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 feae 	bl	800650c <xTaskCheckForTimeOut>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d123      	bne.n	80057fe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057b8:	f000 f916 	bl	80059e8 <prvIsQueueEmpty>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d017      	beq.n	80057f2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c4:	3324      	adds	r3, #36	@ 0x24
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	4611      	mov	r1, r2
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fdd2 	bl	8006374 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057d2:	f000 f8b7 	bl	8005944 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057d6:	f000 fc03 	bl	8005fe0 <xTaskResumeAll>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d189      	bne.n	80056f4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80057e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005820 <xQueueReceive+0x1c0>)
 80057e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	e780      	b.n	80056f4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80057f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057f4:	f000 f8a6 	bl	8005944 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057f8:	f000 fbf2 	bl	8005fe0 <xTaskResumeAll>
 80057fc:	e77a      	b.n	80056f4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80057fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005800:	f000 f8a0 	bl	8005944 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005804:	f000 fbec 	bl	8005fe0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005808:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800580a:	f000 f8ed 	bl	80059e8 <prvIsQueueEmpty>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	f43f af6f 	beq.w	80056f4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005816:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005818:	4618      	mov	r0, r3
 800581a:	3730      	adds	r7, #48	@ 0x30
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	e000ed04 	.word	0xe000ed04

08005824 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005830:	2300      	movs	r3, #0
 8005832:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005838:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10d      	bne.n	800585e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d14d      	bne.n	80058e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	4618      	mov	r0, r3
 8005850:	f000 ffc6 	bl	80067e0 <xTaskPriorityDisinherit>
 8005854:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	609a      	str	r2, [r3, #8]
 800585c:	e043      	b.n	80058e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d119      	bne.n	8005898 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6858      	ldr	r0, [r3, #4]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586c:	461a      	mov	r2, r3
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	f002 f83e 	bl	80078f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587c:	441a      	add	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	429a      	cmp	r2, r3
 800588c:	d32b      	bcc.n	80058e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	605a      	str	r2, [r3, #4]
 8005896:	e026      	b.n	80058e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	68d8      	ldr	r0, [r3, #12]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a0:	461a      	mov	r2, r3
 80058a2:	68b9      	ldr	r1, [r7, #8]
 80058a4:	f002 f824 	bl	80078f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b0:	425b      	negs	r3, r3
 80058b2:	441a      	add	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d207      	bcs.n	80058d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058cc:	425b      	negs	r3, r3
 80058ce:	441a      	add	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d105      	bne.n	80058e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80058ee:	697b      	ldr	r3, [r7, #20]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005906:	2b00      	cmp	r3, #0
 8005908:	d018      	beq.n	800593c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68da      	ldr	r2, [r3, #12]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005912:	441a      	add	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	429a      	cmp	r2, r3
 8005922:	d303      	bcc.n	800592c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68d9      	ldr	r1, [r3, #12]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005934:	461a      	mov	r2, r3
 8005936:	6838      	ldr	r0, [r7, #0]
 8005938:	f001 ffda 	bl	80078f0 <memcpy>
	}
}
 800593c:	bf00      	nop
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800594c:	f001 fc56 	bl	80071fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005956:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005958:	e011      	b.n	800597e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595e:	2b00      	cmp	r3, #0
 8005960:	d012      	beq.n	8005988 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3324      	adds	r3, #36	@ 0x24
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fd56 	bl	8006418 <xTaskRemoveFromEventList>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005972:	f000 fe2f 	bl	80065d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005976:	7bfb      	ldrb	r3, [r7, #15]
 8005978:	3b01      	subs	r3, #1
 800597a:	b2db      	uxtb	r3, r3
 800597c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800597e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005982:	2b00      	cmp	r3, #0
 8005984:	dce9      	bgt.n	800595a <prvUnlockQueue+0x16>
 8005986:	e000      	b.n	800598a <prvUnlockQueue+0x46>
					break;
 8005988:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	22ff      	movs	r2, #255	@ 0xff
 800598e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005992:	f001 fc63 	bl	800725c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005996:	f001 fc31 	bl	80071fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059a2:	e011      	b.n	80059c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d012      	beq.n	80059d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3310      	adds	r3, #16
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 fd31 	bl	8006418 <xTaskRemoveFromEventList>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80059bc:	f000 fe0a 	bl	80065d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80059c0:	7bbb      	ldrb	r3, [r7, #14]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	dce9      	bgt.n	80059a4 <prvUnlockQueue+0x60>
 80059d0:	e000      	b.n	80059d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80059d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	22ff      	movs	r2, #255	@ 0xff
 80059d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80059dc:	f001 fc3e 	bl	800725c <vPortExitCritical>
}
 80059e0:	bf00      	nop
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059f0:	f001 fc04 	bl	80071fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d102      	bne.n	8005a02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80059fc:	2301      	movs	r3, #1
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	e001      	b.n	8005a06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a06:	f001 fc29 	bl	800725c <vPortExitCritical>

	return xReturn;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a1c:	f001 fbee 	bl	80071fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d102      	bne.n	8005a32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	e001      	b.n	8005a36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a36:	f001 fc11 	bl	800725c <vPortExitCritical>

	return xReturn;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	e014      	b.n	8005a7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a54:	4a0e      	ldr	r2, [pc, #56]	@ (8005a90 <vQueueAddToRegistry+0x4c>)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10b      	bne.n	8005a78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a60:	490b      	ldr	r1, [pc, #44]	@ (8005a90 <vQueueAddToRegistry+0x4c>)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a6a:	4a09      	ldr	r2, [pc, #36]	@ (8005a90 <vQueueAddToRegistry+0x4c>)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	4413      	add	r3, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a76:	e006      	b.n	8005a86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b07      	cmp	r3, #7
 8005a82:	d9e7      	bls.n	8005a54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr
 8005a90:	20000d94 	.word	0x20000d94

08005a94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005aa4:	f001 fbaa 	bl	80071fc <vPortEnterCritical>
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005aae:	b25b      	sxtb	r3, r3
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab4:	d103      	bne.n	8005abe <vQueueWaitForMessageRestricted+0x2a>
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ac4:	b25b      	sxtb	r3, r3
 8005ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aca:	d103      	bne.n	8005ad4 <vQueueWaitForMessageRestricted+0x40>
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ad4:	f001 fbc2 	bl	800725c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d106      	bne.n	8005aee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	3324      	adds	r3, #36	@ 0x24
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 fc69 	bl	80063c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005aee:	6978      	ldr	r0, [r7, #20]
 8005af0:	f7ff ff28 	bl	8005944 <prvUnlockQueue>
	}
 8005af4:	bf00      	nop
 8005af6:	3718      	adds	r7, #24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08e      	sub	sp, #56	@ 0x38
 8005b00:	af04      	add	r7, sp, #16
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10b      	bne.n	8005b28 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	623b      	str	r3, [r7, #32]
}
 8005b22:	bf00      	nop
 8005b24:	bf00      	nop
 8005b26:	e7fd      	b.n	8005b24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10b      	bne.n	8005b46 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	61fb      	str	r3, [r7, #28]
}
 8005b40:	bf00      	nop
 8005b42:	bf00      	nop
 8005b44:	e7fd      	b.n	8005b42 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b46:	23a8      	movs	r3, #168	@ 0xa8
 8005b48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	2ba8      	cmp	r3, #168	@ 0xa8
 8005b4e:	d00b      	beq.n	8005b68 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	61bb      	str	r3, [r7, #24]
}
 8005b62:	bf00      	nop
 8005b64:	bf00      	nop
 8005b66:	e7fd      	b.n	8005b64 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01e      	beq.n	8005bae <xTaskCreateStatic+0xb2>
 8005b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d01b      	beq.n	8005bae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b88:	2300      	movs	r3, #0
 8005b8a:	9303      	str	r3, [sp, #12]
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8e:	9302      	str	r3, [sp, #8]
 8005b90:	f107 0314 	add.w	r3, r7, #20
 8005b94:	9301      	str	r3, [sp, #4]
 8005b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 f851 	bl	8005c48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ba6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ba8:	f000 f8f6 	bl	8005d98 <prvAddNewTaskToReadyList>
 8005bac:	e001      	b.n	8005bb2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bb2:	697b      	ldr	r3, [r7, #20]
	}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3728      	adds	r7, #40	@ 0x28
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b08c      	sub	sp, #48	@ 0x30
 8005bc0:	af04      	add	r7, sp, #16
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005bcc:	88fb      	ldrh	r3, [r7, #6]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f001 fc15 	bl	8007400 <pvPortMalloc>
 8005bd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00e      	beq.n	8005bfc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005bde:	20a8      	movs	r0, #168	@ 0xa8
 8005be0:	f001 fc0e 	bl	8007400 <pvPortMalloc>
 8005be4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	631a      	str	r2, [r3, #48]	@ 0x30
 8005bf2:	e005      	b.n	8005c00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005bf4:	6978      	ldr	r0, [r7, #20]
 8005bf6:	f001 fcd1 	bl	800759c <vPortFree>
 8005bfa:	e001      	b.n	8005c00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d017      	beq.n	8005c36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c0e:	88fa      	ldrh	r2, [r7, #6]
 8005c10:	2300      	movs	r3, #0
 8005c12:	9303      	str	r3, [sp, #12]
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	9302      	str	r3, [sp, #8]
 8005c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c1a:	9301      	str	r3, [sp, #4]
 8005c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 f80f 	bl	8005c48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c2a:	69f8      	ldr	r0, [r7, #28]
 8005c2c:	f000 f8b4 	bl	8005d98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c30:	2301      	movs	r3, #1
 8005c32:	61bb      	str	r3, [r7, #24]
 8005c34:	e002      	b.n	8005c3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c36:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
	}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3720      	adds	r7, #32
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c58:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	461a      	mov	r2, r3
 8005c60:	21a5      	movs	r1, #165	@ 0xa5
 8005c62:	f001 fdb9 	bl	80077d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c70:	3b01      	subs	r3, #1
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	f023 0307 	bic.w	r3, r3, #7
 8005c7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00b      	beq.n	8005ca2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	617b      	str	r3, [r7, #20]
}
 8005c9c:	bf00      	nop
 8005c9e:	bf00      	nop
 8005ca0:	e7fd      	b.n	8005c9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d01f      	beq.n	8005ce8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ca8:	2300      	movs	r3, #0
 8005caa:	61fb      	str	r3, [r7, #28]
 8005cac:	e012      	b.n	8005cd4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	7819      	ldrb	r1, [r3, #0]
 8005cb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	4413      	add	r3, r2
 8005cbc:	3334      	adds	r3, #52	@ 0x34
 8005cbe:	460a      	mov	r2, r1
 8005cc0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d006      	beq.n	8005cdc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	61fb      	str	r3, [r7, #28]
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	2b0f      	cmp	r3, #15
 8005cd8:	d9e9      	bls.n	8005cae <prvInitialiseNewTask+0x66>
 8005cda:	e000      	b.n	8005cde <prvInitialiseNewTask+0x96>
			{
				break;
 8005cdc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ce6:	e003      	b.n	8005cf0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf2:	2b37      	cmp	r3, #55	@ 0x37
 8005cf4:	d901      	bls.n	8005cfa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005cf6:	2337      	movs	r3, #55	@ 0x37
 8005cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d04:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d08:	2200      	movs	r2, #0
 8005d0a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d0e:	3304      	adds	r3, #4
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7ff f96a 	bl	8004fea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d18:	3318      	adds	r3, #24
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff f965 	bl	8004fea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d34:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d48:	3354      	adds	r3, #84	@ 0x54
 8005d4a:	224c      	movs	r2, #76	@ 0x4c
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f001 fd42 	bl	80077d8 <memset>
 8005d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d56:	4a0d      	ldr	r2, [pc, #52]	@ (8005d8c <prvInitialiseNewTask+0x144>)
 8005d58:	659a      	str	r2, [r3, #88]	@ 0x58
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8005d90 <prvInitialiseNewTask+0x148>)
 8005d5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d62:	4a0c      	ldr	r2, [pc, #48]	@ (8005d94 <prvInitialiseNewTask+0x14c>)
 8005d64:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	68f9      	ldr	r1, [r7, #12]
 8005d6a:	69b8      	ldr	r0, [r7, #24]
 8005d6c:	f001 f954 	bl	8007018 <pxPortInitialiseStack>
 8005d70:	4602      	mov	r2, r0
 8005d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d82:	bf00      	nop
 8005d84:	3720      	adds	r7, #32
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20002028 	.word	0x20002028
 8005d90:	20002090 	.word	0x20002090
 8005d94:	200020f8 	.word	0x200020f8

08005d98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005da0:	f001 fa2c 	bl	80071fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005da4:	4b2d      	ldr	r3, [pc, #180]	@ (8005e5c <prvAddNewTaskToReadyList+0xc4>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3301      	adds	r3, #1
 8005daa:	4a2c      	ldr	r2, [pc, #176]	@ (8005e5c <prvAddNewTaskToReadyList+0xc4>)
 8005dac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005dae:	4b2c      	ldr	r3, [pc, #176]	@ (8005e60 <prvAddNewTaskToReadyList+0xc8>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d109      	bne.n	8005dca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005db6:	4a2a      	ldr	r2, [pc, #168]	@ (8005e60 <prvAddNewTaskToReadyList+0xc8>)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005dbc:	4b27      	ldr	r3, [pc, #156]	@ (8005e5c <prvAddNewTaskToReadyList+0xc4>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d110      	bne.n	8005de6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005dc4:	f000 fc2a 	bl	800661c <prvInitialiseTaskLists>
 8005dc8:	e00d      	b.n	8005de6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005dca:	4b26      	ldr	r3, [pc, #152]	@ (8005e64 <prvAddNewTaskToReadyList+0xcc>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d109      	bne.n	8005de6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005dd2:	4b23      	ldr	r3, [pc, #140]	@ (8005e60 <prvAddNewTaskToReadyList+0xc8>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d802      	bhi.n	8005de6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005de0:	4a1f      	ldr	r2, [pc, #124]	@ (8005e60 <prvAddNewTaskToReadyList+0xc8>)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005de6:	4b20      	ldr	r3, [pc, #128]	@ (8005e68 <prvAddNewTaskToReadyList+0xd0>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3301      	adds	r3, #1
 8005dec:	4a1e      	ldr	r2, [pc, #120]	@ (8005e68 <prvAddNewTaskToReadyList+0xd0>)
 8005dee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005df0:	4b1d      	ldr	r3, [pc, #116]	@ (8005e68 <prvAddNewTaskToReadyList+0xd0>)
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8005e6c <prvAddNewTaskToReadyList+0xd4>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d903      	bls.n	8005e0c <prvAddNewTaskToReadyList+0x74>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e08:	4a18      	ldr	r2, [pc, #96]	@ (8005e6c <prvAddNewTaskToReadyList+0xd4>)
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e10:	4613      	mov	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4a15      	ldr	r2, [pc, #84]	@ (8005e70 <prvAddNewTaskToReadyList+0xd8>)
 8005e1a:	441a      	add	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	4619      	mov	r1, r3
 8005e22:	4610      	mov	r0, r2
 8005e24:	f7ff f8ed 	bl	8005002 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e28:	f001 fa18 	bl	800725c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e64 <prvAddNewTaskToReadyList+0xcc>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00e      	beq.n	8005e52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e34:	4b0a      	ldr	r3, [pc, #40]	@ (8005e60 <prvAddNewTaskToReadyList+0xc8>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d207      	bcs.n	8005e52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e42:	4b0c      	ldr	r3, [pc, #48]	@ (8005e74 <prvAddNewTaskToReadyList+0xdc>)
 8005e44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e52:	bf00      	nop
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	200012a8 	.word	0x200012a8
 8005e60:	20000dd4 	.word	0x20000dd4
 8005e64:	200012b4 	.word	0x200012b4
 8005e68:	200012c4 	.word	0x200012c4
 8005e6c:	200012b0 	.word	0x200012b0
 8005e70:	20000dd8 	.word	0x20000dd8
 8005e74:	e000ed04 	.word	0xe000ed04

08005e78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d018      	beq.n	8005ebc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e8a:	4b14      	ldr	r3, [pc, #80]	@ (8005edc <vTaskDelay+0x64>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00b      	beq.n	8005eaa <vTaskDelay+0x32>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	60bb      	str	r3, [r7, #8]
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop
 8005ea8:	e7fd      	b.n	8005ea6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005eaa:	f000 f88b 	bl	8005fc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005eae:	2100      	movs	r1, #0
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fd05 	bl	80068c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005eb6:	f000 f893 	bl	8005fe0 <xTaskResumeAll>
 8005eba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d107      	bne.n	8005ed2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005ec2:	4b07      	ldr	r3, [pc, #28]	@ (8005ee0 <vTaskDelay+0x68>)
 8005ec4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ed2:	bf00      	nop
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	200012d0 	.word	0x200012d0
 8005ee0:	e000ed04 	.word	0xe000ed04

08005ee4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08a      	sub	sp, #40	@ 0x28
 8005ee8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ef2:	463a      	mov	r2, r7
 8005ef4:	1d39      	adds	r1, r7, #4
 8005ef6:	f107 0308 	add.w	r3, r7, #8
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff f824 	bl	8004f48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f00:	6839      	ldr	r1, [r7, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	9202      	str	r2, [sp, #8]
 8005f08:	9301      	str	r3, [sp, #4]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	460a      	mov	r2, r1
 8005f12:	4924      	ldr	r1, [pc, #144]	@ (8005fa4 <vTaskStartScheduler+0xc0>)
 8005f14:	4824      	ldr	r0, [pc, #144]	@ (8005fa8 <vTaskStartScheduler+0xc4>)
 8005f16:	f7ff fdf1 	bl	8005afc <xTaskCreateStatic>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	4a23      	ldr	r2, [pc, #140]	@ (8005fac <vTaskStartScheduler+0xc8>)
 8005f1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f20:	4b22      	ldr	r3, [pc, #136]	@ (8005fac <vTaskStartScheduler+0xc8>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	e001      	b.n	8005f32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d102      	bne.n	8005f3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f38:	f000 fd16 	bl	8006968 <xTimerCreateTimerTask>
 8005f3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d11b      	bne.n	8005f7c <vTaskStartScheduler+0x98>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	613b      	str	r3, [r7, #16]
}
 8005f56:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f58:	4b15      	ldr	r3, [pc, #84]	@ (8005fb0 <vTaskStartScheduler+0xcc>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3354      	adds	r3, #84	@ 0x54
 8005f5e:	4a15      	ldr	r2, [pc, #84]	@ (8005fb4 <vTaskStartScheduler+0xd0>)
 8005f60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f62:	4b15      	ldr	r3, [pc, #84]	@ (8005fb8 <vTaskStartScheduler+0xd4>)
 8005f64:	f04f 32ff 	mov.w	r2, #4294967295
 8005f68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f6a:	4b14      	ldr	r3, [pc, #80]	@ (8005fbc <vTaskStartScheduler+0xd8>)
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f70:	4b13      	ldr	r3, [pc, #76]	@ (8005fc0 <vTaskStartScheduler+0xdc>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f76:	f001 f8cf 	bl	8007118 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f7a:	e00f      	b.n	8005f9c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f82:	d10b      	bne.n	8005f9c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	60fb      	str	r3, [r7, #12]
}
 8005f96:	bf00      	nop
 8005f98:	bf00      	nop
 8005f9a:	e7fd      	b.n	8005f98 <vTaskStartScheduler+0xb4>
}
 8005f9c:	bf00      	nop
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	080079f0 	.word	0x080079f0
 8005fa8:	080065ed 	.word	0x080065ed
 8005fac:	200012cc 	.word	0x200012cc
 8005fb0:	20000dd4 	.word	0x20000dd4
 8005fb4:	20000070 	.word	0x20000070
 8005fb8:	200012c8 	.word	0x200012c8
 8005fbc:	200012b4 	.word	0x200012b4
 8005fc0:	200012ac 	.word	0x200012ac

08005fc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005fc8:	4b04      	ldr	r3, [pc, #16]	@ (8005fdc <vTaskSuspendAll+0x18>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	4a03      	ldr	r2, [pc, #12]	@ (8005fdc <vTaskSuspendAll+0x18>)
 8005fd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005fd2:	bf00      	nop
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bc80      	pop	{r7}
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	200012d0 	.word	0x200012d0

08005fe0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005fea:	2300      	movs	r3, #0
 8005fec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005fee:	4b42      	ldr	r3, [pc, #264]	@ (80060f8 <xTaskResumeAll+0x118>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10b      	bne.n	800600e <xTaskResumeAll+0x2e>
	__asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	603b      	str	r3, [r7, #0]
}
 8006008:	bf00      	nop
 800600a:	bf00      	nop
 800600c:	e7fd      	b.n	800600a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800600e:	f001 f8f5 	bl	80071fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006012:	4b39      	ldr	r3, [pc, #228]	@ (80060f8 <xTaskResumeAll+0x118>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3b01      	subs	r3, #1
 8006018:	4a37      	ldr	r2, [pc, #220]	@ (80060f8 <xTaskResumeAll+0x118>)
 800601a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800601c:	4b36      	ldr	r3, [pc, #216]	@ (80060f8 <xTaskResumeAll+0x118>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d162      	bne.n	80060ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006024:	4b35      	ldr	r3, [pc, #212]	@ (80060fc <xTaskResumeAll+0x11c>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d05e      	beq.n	80060ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800602c:	e02f      	b.n	800608e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800602e:	4b34      	ldr	r3, [pc, #208]	@ (8006100 <xTaskResumeAll+0x120>)
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	3318      	adds	r3, #24
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff f83c 	bl	80050b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	3304      	adds	r3, #4
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff f837 	bl	80050b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800604e:	4b2d      	ldr	r3, [pc, #180]	@ (8006104 <xTaskResumeAll+0x124>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	429a      	cmp	r2, r3
 8006054:	d903      	bls.n	800605e <xTaskResumeAll+0x7e>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605a:	4a2a      	ldr	r2, [pc, #168]	@ (8006104 <xTaskResumeAll+0x124>)
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006062:	4613      	mov	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4a27      	ldr	r2, [pc, #156]	@ (8006108 <xTaskResumeAll+0x128>)
 800606c:	441a      	add	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3304      	adds	r3, #4
 8006072:	4619      	mov	r1, r3
 8006074:	4610      	mov	r0, r2
 8006076:	f7fe ffc4 	bl	8005002 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800607e:	4b23      	ldr	r3, [pc, #140]	@ (800610c <xTaskResumeAll+0x12c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006084:	429a      	cmp	r2, r3
 8006086:	d302      	bcc.n	800608e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006088:	4b21      	ldr	r3, [pc, #132]	@ (8006110 <xTaskResumeAll+0x130>)
 800608a:	2201      	movs	r2, #1
 800608c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800608e:	4b1c      	ldr	r3, [pc, #112]	@ (8006100 <xTaskResumeAll+0x120>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1cb      	bne.n	800602e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800609c:	f000 fb62 	bl	8006764 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80060a0:	4b1c      	ldr	r3, [pc, #112]	@ (8006114 <xTaskResumeAll+0x134>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d010      	beq.n	80060ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060ac:	f000 f844 	bl	8006138 <xTaskIncrementTick>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d002      	beq.n	80060bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80060b6:	4b16      	ldr	r3, [pc, #88]	@ (8006110 <xTaskResumeAll+0x130>)
 80060b8:	2201      	movs	r2, #1
 80060ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3b01      	subs	r3, #1
 80060c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1f1      	bne.n	80060ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80060c8:	4b12      	ldr	r3, [pc, #72]	@ (8006114 <xTaskResumeAll+0x134>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80060ce:	4b10      	ldr	r3, [pc, #64]	@ (8006110 <xTaskResumeAll+0x130>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d009      	beq.n	80060ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80060d6:	2301      	movs	r3, #1
 80060d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80060da:	4b0f      	ldr	r3, [pc, #60]	@ (8006118 <xTaskResumeAll+0x138>)
 80060dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060ea:	f001 f8b7 	bl	800725c <vPortExitCritical>

	return xAlreadyYielded;
 80060ee:	68bb      	ldr	r3, [r7, #8]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	200012d0 	.word	0x200012d0
 80060fc:	200012a8 	.word	0x200012a8
 8006100:	20001268 	.word	0x20001268
 8006104:	200012b0 	.word	0x200012b0
 8006108:	20000dd8 	.word	0x20000dd8
 800610c:	20000dd4 	.word	0x20000dd4
 8006110:	200012bc 	.word	0x200012bc
 8006114:	200012b8 	.word	0x200012b8
 8006118:	e000ed04 	.word	0xe000ed04

0800611c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006122:	4b04      	ldr	r3, [pc, #16]	@ (8006134 <xTaskGetTickCount+0x18>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006128:	687b      	ldr	r3, [r7, #4]
}
 800612a:	4618      	mov	r0, r3
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	bc80      	pop	{r7}
 8006132:	4770      	bx	lr
 8006134:	200012ac 	.word	0x200012ac

08006138 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800613e:	2300      	movs	r3, #0
 8006140:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006142:	4b4f      	ldr	r3, [pc, #316]	@ (8006280 <xTaskIncrementTick+0x148>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	f040 8090 	bne.w	800626c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800614c:	4b4d      	ldr	r3, [pc, #308]	@ (8006284 <xTaskIncrementTick+0x14c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3301      	adds	r3, #1
 8006152:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006154:	4a4b      	ldr	r2, [pc, #300]	@ (8006284 <xTaskIncrementTick+0x14c>)
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d121      	bne.n	80061a4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006160:	4b49      	ldr	r3, [pc, #292]	@ (8006288 <xTaskIncrementTick+0x150>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00b      	beq.n	8006182 <xTaskIncrementTick+0x4a>
	__asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	603b      	str	r3, [r7, #0]
}
 800617c:	bf00      	nop
 800617e:	bf00      	nop
 8006180:	e7fd      	b.n	800617e <xTaskIncrementTick+0x46>
 8006182:	4b41      	ldr	r3, [pc, #260]	@ (8006288 <xTaskIncrementTick+0x150>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	4b40      	ldr	r3, [pc, #256]	@ (800628c <xTaskIncrementTick+0x154>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a3e      	ldr	r2, [pc, #248]	@ (8006288 <xTaskIncrementTick+0x150>)
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	4a3e      	ldr	r2, [pc, #248]	@ (800628c <xTaskIncrementTick+0x154>)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	4b3e      	ldr	r3, [pc, #248]	@ (8006290 <xTaskIncrementTick+0x158>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3301      	adds	r3, #1
 800619c:	4a3c      	ldr	r2, [pc, #240]	@ (8006290 <xTaskIncrementTick+0x158>)
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	f000 fae0 	bl	8006764 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061a4:	4b3b      	ldr	r3, [pc, #236]	@ (8006294 <xTaskIncrementTick+0x15c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d349      	bcc.n	8006242 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ae:	4b36      	ldr	r3, [pc, #216]	@ (8006288 <xTaskIncrementTick+0x150>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d104      	bne.n	80061c2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061b8:	4b36      	ldr	r3, [pc, #216]	@ (8006294 <xTaskIncrementTick+0x15c>)
 80061ba:	f04f 32ff 	mov.w	r2, #4294967295
 80061be:	601a      	str	r2, [r3, #0]
					break;
 80061c0:	e03f      	b.n	8006242 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061c2:	4b31      	ldr	r3, [pc, #196]	@ (8006288 <xTaskIncrementTick+0x150>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d203      	bcs.n	80061e2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80061da:	4a2e      	ldr	r2, [pc, #184]	@ (8006294 <xTaskIncrementTick+0x15c>)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80061e0:	e02f      	b.n	8006242 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	3304      	adds	r3, #4
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fe ff66 	bl	80050b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d004      	beq.n	80061fe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	3318      	adds	r3, #24
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fe ff5d 	bl	80050b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006202:	4b25      	ldr	r3, [pc, #148]	@ (8006298 <xTaskIncrementTick+0x160>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	429a      	cmp	r2, r3
 8006208:	d903      	bls.n	8006212 <xTaskIncrementTick+0xda>
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620e:	4a22      	ldr	r2, [pc, #136]	@ (8006298 <xTaskIncrementTick+0x160>)
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006216:	4613      	mov	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4a1f      	ldr	r2, [pc, #124]	@ (800629c <xTaskIncrementTick+0x164>)
 8006220:	441a      	add	r2, r3
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	3304      	adds	r3, #4
 8006226:	4619      	mov	r1, r3
 8006228:	4610      	mov	r0, r2
 800622a:	f7fe feea 	bl	8005002 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006232:	4b1b      	ldr	r3, [pc, #108]	@ (80062a0 <xTaskIncrementTick+0x168>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006238:	429a      	cmp	r2, r3
 800623a:	d3b8      	bcc.n	80061ae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800623c:	2301      	movs	r3, #1
 800623e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006240:	e7b5      	b.n	80061ae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006242:	4b17      	ldr	r3, [pc, #92]	@ (80062a0 <xTaskIncrementTick+0x168>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006248:	4914      	ldr	r1, [pc, #80]	@ (800629c <xTaskIncrementTick+0x164>)
 800624a:	4613      	mov	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	440b      	add	r3, r1
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d901      	bls.n	800625e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800625a:	2301      	movs	r3, #1
 800625c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800625e:	4b11      	ldr	r3, [pc, #68]	@ (80062a4 <xTaskIncrementTick+0x16c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d007      	beq.n	8006276 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006266:	2301      	movs	r3, #1
 8006268:	617b      	str	r3, [r7, #20]
 800626a:	e004      	b.n	8006276 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800626c:	4b0e      	ldr	r3, [pc, #56]	@ (80062a8 <xTaskIncrementTick+0x170>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3301      	adds	r3, #1
 8006272:	4a0d      	ldr	r2, [pc, #52]	@ (80062a8 <xTaskIncrementTick+0x170>)
 8006274:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006276:	697b      	ldr	r3, [r7, #20]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	200012d0 	.word	0x200012d0
 8006284:	200012ac 	.word	0x200012ac
 8006288:	20001260 	.word	0x20001260
 800628c:	20001264 	.word	0x20001264
 8006290:	200012c0 	.word	0x200012c0
 8006294:	200012c8 	.word	0x200012c8
 8006298:	200012b0 	.word	0x200012b0
 800629c:	20000dd8 	.word	0x20000dd8
 80062a0:	20000dd4 	.word	0x20000dd4
 80062a4:	200012bc 	.word	0x200012bc
 80062a8:	200012b8 	.word	0x200012b8

080062ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062b2:	4b2a      	ldr	r3, [pc, #168]	@ (800635c <vTaskSwitchContext+0xb0>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80062ba:	4b29      	ldr	r3, [pc, #164]	@ (8006360 <vTaskSwitchContext+0xb4>)
 80062bc:	2201      	movs	r2, #1
 80062be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80062c0:	e047      	b.n	8006352 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80062c2:	4b27      	ldr	r3, [pc, #156]	@ (8006360 <vTaskSwitchContext+0xb4>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062c8:	4b26      	ldr	r3, [pc, #152]	@ (8006364 <vTaskSwitchContext+0xb8>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	60fb      	str	r3, [r7, #12]
 80062ce:	e011      	b.n	80062f4 <vTaskSwitchContext+0x48>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10b      	bne.n	80062ee <vTaskSwitchContext+0x42>
	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	607b      	str	r3, [r7, #4]
}
 80062e8:	bf00      	nop
 80062ea:	bf00      	nop
 80062ec:	e7fd      	b.n	80062ea <vTaskSwitchContext+0x3e>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	491c      	ldr	r1, [pc, #112]	@ (8006368 <vTaskSwitchContext+0xbc>)
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	4613      	mov	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	440b      	add	r3, r1
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d0e3      	beq.n	80062d0 <vTaskSwitchContext+0x24>
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4a15      	ldr	r2, [pc, #84]	@ (8006368 <vTaskSwitchContext+0xbc>)
 8006314:	4413      	add	r3, r2
 8006316:	60bb      	str	r3, [r7, #8]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	605a      	str	r2, [r3, #4]
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	3308      	adds	r3, #8
 800632a:	429a      	cmp	r2, r3
 800632c:	d104      	bne.n	8006338 <vTaskSwitchContext+0x8c>
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	605a      	str	r2, [r3, #4]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	4a0b      	ldr	r2, [pc, #44]	@ (800636c <vTaskSwitchContext+0xc0>)
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	4a08      	ldr	r2, [pc, #32]	@ (8006364 <vTaskSwitchContext+0xb8>)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006348:	4b08      	ldr	r3, [pc, #32]	@ (800636c <vTaskSwitchContext+0xc0>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3354      	adds	r3, #84	@ 0x54
 800634e:	4a08      	ldr	r2, [pc, #32]	@ (8006370 <vTaskSwitchContext+0xc4>)
 8006350:	6013      	str	r3, [r2, #0]
}
 8006352:	bf00      	nop
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr
 800635c:	200012d0 	.word	0x200012d0
 8006360:	200012bc 	.word	0x200012bc
 8006364:	200012b0 	.word	0x200012b0
 8006368:	20000dd8 	.word	0x20000dd8
 800636c:	20000dd4 	.word	0x20000dd4
 8006370:	20000070 	.word	0x20000070

08006374 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10b      	bne.n	800639c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	60fb      	str	r3, [r7, #12]
}
 8006396:	bf00      	nop
 8006398:	bf00      	nop
 800639a:	e7fd      	b.n	8006398 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800639c:	4b07      	ldr	r3, [pc, #28]	@ (80063bc <vTaskPlaceOnEventList+0x48>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	3318      	adds	r3, #24
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f7fe fe4f 	bl	8005048 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80063aa:	2101      	movs	r1, #1
 80063ac:	6838      	ldr	r0, [r7, #0]
 80063ae:	f000 fa87 	bl	80068c0 <prvAddCurrentTaskToDelayedList>
}
 80063b2:	bf00      	nop
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20000dd4 	.word	0x20000dd4

080063c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10b      	bne.n	80063ea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80063d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	617b      	str	r3, [r7, #20]
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop
 80063e8:	e7fd      	b.n	80063e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006414 <vTaskPlaceOnEventListRestricted+0x54>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3318      	adds	r3, #24
 80063f0:	4619      	mov	r1, r3
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f7fe fe05 	bl	8005002 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d002      	beq.n	8006404 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80063fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006402:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006404:	6879      	ldr	r1, [r7, #4]
 8006406:	68b8      	ldr	r0, [r7, #8]
 8006408:	f000 fa5a 	bl	80068c0 <prvAddCurrentTaskToDelayedList>
	}
 800640c:	bf00      	nop
 800640e:	3718      	adds	r7, #24
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	20000dd4 	.word	0x20000dd4

08006418 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10b      	bne.n	8006446 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	60fb      	str	r3, [r7, #12]
}
 8006440:	bf00      	nop
 8006442:	bf00      	nop
 8006444:	e7fd      	b.n	8006442 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	3318      	adds	r3, #24
 800644a:	4618      	mov	r0, r3
 800644c:	f7fe fe34 	bl	80050b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006450:	4b1d      	ldr	r3, [pc, #116]	@ (80064c8 <xTaskRemoveFromEventList+0xb0>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d11d      	bne.n	8006494 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	3304      	adds	r3, #4
 800645c:	4618      	mov	r0, r3
 800645e:	f7fe fe2b 	bl	80050b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006466:	4b19      	ldr	r3, [pc, #100]	@ (80064cc <xTaskRemoveFromEventList+0xb4>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	429a      	cmp	r2, r3
 800646c:	d903      	bls.n	8006476 <xTaskRemoveFromEventList+0x5e>
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006472:	4a16      	ldr	r2, [pc, #88]	@ (80064cc <xTaskRemoveFromEventList+0xb4>)
 8006474:	6013      	str	r3, [r2, #0]
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800647a:	4613      	mov	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4a13      	ldr	r2, [pc, #76]	@ (80064d0 <xTaskRemoveFromEventList+0xb8>)
 8006484:	441a      	add	r2, r3
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	3304      	adds	r3, #4
 800648a:	4619      	mov	r1, r3
 800648c:	4610      	mov	r0, r2
 800648e:	f7fe fdb8 	bl	8005002 <vListInsertEnd>
 8006492:	e005      	b.n	80064a0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	3318      	adds	r3, #24
 8006498:	4619      	mov	r1, r3
 800649a:	480e      	ldr	r0, [pc, #56]	@ (80064d4 <xTaskRemoveFromEventList+0xbc>)
 800649c:	f7fe fdb1 	bl	8005002 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064a4:	4b0c      	ldr	r3, [pc, #48]	@ (80064d8 <xTaskRemoveFromEventList+0xc0>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d905      	bls.n	80064ba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80064ae:	2301      	movs	r3, #1
 80064b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80064b2:	4b0a      	ldr	r3, [pc, #40]	@ (80064dc <xTaskRemoveFromEventList+0xc4>)
 80064b4:	2201      	movs	r2, #1
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	e001      	b.n	80064be <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80064ba:	2300      	movs	r3, #0
 80064bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80064be:	697b      	ldr	r3, [r7, #20]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	200012d0 	.word	0x200012d0
 80064cc:	200012b0 	.word	0x200012b0
 80064d0:	20000dd8 	.word	0x20000dd8
 80064d4:	20001268 	.word	0x20001268
 80064d8:	20000dd4 	.word	0x20000dd4
 80064dc:	200012bc 	.word	0x200012bc

080064e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80064e8:	4b06      	ldr	r3, [pc, #24]	@ (8006504 <vTaskInternalSetTimeOutState+0x24>)
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80064f0:	4b05      	ldr	r3, [pc, #20]	@ (8006508 <vTaskInternalSetTimeOutState+0x28>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	605a      	str	r2, [r3, #4]
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	200012c0 	.word	0x200012c0
 8006508:	200012ac 	.word	0x200012ac

0800650c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10b      	bne.n	8006534 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	613b      	str	r3, [r7, #16]
}
 800652e:	bf00      	nop
 8006530:	bf00      	nop
 8006532:	e7fd      	b.n	8006530 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10b      	bne.n	8006552 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	60fb      	str	r3, [r7, #12]
}
 800654c:	bf00      	nop
 800654e:	bf00      	nop
 8006550:	e7fd      	b.n	800654e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006552:	f000 fe53 	bl	80071fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006556:	4b1d      	ldr	r3, [pc, #116]	@ (80065cc <xTaskCheckForTimeOut+0xc0>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656e:	d102      	bne.n	8006576 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006570:	2300      	movs	r3, #0
 8006572:	61fb      	str	r3, [r7, #28]
 8006574:	e023      	b.n	80065be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	4b15      	ldr	r3, [pc, #84]	@ (80065d0 <xTaskCheckForTimeOut+0xc4>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	429a      	cmp	r2, r3
 8006580:	d007      	beq.n	8006592 <xTaskCheckForTimeOut+0x86>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	429a      	cmp	r2, r3
 800658a:	d302      	bcc.n	8006592 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800658c:	2301      	movs	r3, #1
 800658e:	61fb      	str	r3, [r7, #28]
 8006590:	e015      	b.n	80065be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	429a      	cmp	r2, r3
 800659a:	d20b      	bcs.n	80065b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	1ad2      	subs	r2, r2, r3
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7ff ff99 	bl	80064e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61fb      	str	r3, [r7, #28]
 80065b2:	e004      	b.n	80065be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2200      	movs	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80065ba:	2301      	movs	r3, #1
 80065bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80065be:	f000 fe4d 	bl	800725c <vPortExitCritical>

	return xReturn;
 80065c2:	69fb      	ldr	r3, [r7, #28]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3720      	adds	r7, #32
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	200012ac 	.word	0x200012ac
 80065d0:	200012c0 	.word	0x200012c0

080065d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80065d4:	b480      	push	{r7}
 80065d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80065d8:	4b03      	ldr	r3, [pc, #12]	@ (80065e8 <vTaskMissedYield+0x14>)
 80065da:	2201      	movs	r2, #1
 80065dc:	601a      	str	r2, [r3, #0]
}
 80065de:	bf00      	nop
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bc80      	pop	{r7}
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	200012bc 	.word	0x200012bc

080065ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80065f4:	f000 f852 	bl	800669c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065f8:	4b06      	ldr	r3, [pc, #24]	@ (8006614 <prvIdleTask+0x28>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d9f9      	bls.n	80065f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006600:	4b05      	ldr	r3, [pc, #20]	@ (8006618 <prvIdleTask+0x2c>)
 8006602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006610:	e7f0      	b.n	80065f4 <prvIdleTask+0x8>
 8006612:	bf00      	nop
 8006614:	20000dd8 	.word	0x20000dd8
 8006618:	e000ed04 	.word	0xe000ed04

0800661c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006622:	2300      	movs	r3, #0
 8006624:	607b      	str	r3, [r7, #4]
 8006626:	e00c      	b.n	8006642 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	4613      	mov	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4a12      	ldr	r2, [pc, #72]	@ (800667c <prvInitialiseTaskLists+0x60>)
 8006634:	4413      	add	r3, r2
 8006636:	4618      	mov	r0, r3
 8006638:	f7fe fcb8 	bl	8004fac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3301      	adds	r3, #1
 8006640:	607b      	str	r3, [r7, #4]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b37      	cmp	r3, #55	@ 0x37
 8006646:	d9ef      	bls.n	8006628 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006648:	480d      	ldr	r0, [pc, #52]	@ (8006680 <prvInitialiseTaskLists+0x64>)
 800664a:	f7fe fcaf 	bl	8004fac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800664e:	480d      	ldr	r0, [pc, #52]	@ (8006684 <prvInitialiseTaskLists+0x68>)
 8006650:	f7fe fcac 	bl	8004fac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006654:	480c      	ldr	r0, [pc, #48]	@ (8006688 <prvInitialiseTaskLists+0x6c>)
 8006656:	f7fe fca9 	bl	8004fac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800665a:	480c      	ldr	r0, [pc, #48]	@ (800668c <prvInitialiseTaskLists+0x70>)
 800665c:	f7fe fca6 	bl	8004fac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006660:	480b      	ldr	r0, [pc, #44]	@ (8006690 <prvInitialiseTaskLists+0x74>)
 8006662:	f7fe fca3 	bl	8004fac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006666:	4b0b      	ldr	r3, [pc, #44]	@ (8006694 <prvInitialiseTaskLists+0x78>)
 8006668:	4a05      	ldr	r2, [pc, #20]	@ (8006680 <prvInitialiseTaskLists+0x64>)
 800666a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800666c:	4b0a      	ldr	r3, [pc, #40]	@ (8006698 <prvInitialiseTaskLists+0x7c>)
 800666e:	4a05      	ldr	r2, [pc, #20]	@ (8006684 <prvInitialiseTaskLists+0x68>)
 8006670:	601a      	str	r2, [r3, #0]
}
 8006672:	bf00      	nop
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20000dd8 	.word	0x20000dd8
 8006680:	20001238 	.word	0x20001238
 8006684:	2000124c 	.word	0x2000124c
 8006688:	20001268 	.word	0x20001268
 800668c:	2000127c 	.word	0x2000127c
 8006690:	20001294 	.word	0x20001294
 8006694:	20001260 	.word	0x20001260
 8006698:	20001264 	.word	0x20001264

0800669c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066a2:	e019      	b.n	80066d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066a4:	f000 fdaa 	bl	80071fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066a8:	4b10      	ldr	r3, [pc, #64]	@ (80066ec <prvCheckTasksWaitingTermination+0x50>)
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3304      	adds	r3, #4
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7fe fcff 	bl	80050b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80066ba:	4b0d      	ldr	r3, [pc, #52]	@ (80066f0 <prvCheckTasksWaitingTermination+0x54>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3b01      	subs	r3, #1
 80066c0:	4a0b      	ldr	r2, [pc, #44]	@ (80066f0 <prvCheckTasksWaitingTermination+0x54>)
 80066c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066c4:	4b0b      	ldr	r3, [pc, #44]	@ (80066f4 <prvCheckTasksWaitingTermination+0x58>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3b01      	subs	r3, #1
 80066ca:	4a0a      	ldr	r2, [pc, #40]	@ (80066f4 <prvCheckTasksWaitingTermination+0x58>)
 80066cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80066ce:	f000 fdc5 	bl	800725c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f810 	bl	80066f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066d8:	4b06      	ldr	r3, [pc, #24]	@ (80066f4 <prvCheckTasksWaitingTermination+0x58>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e1      	bne.n	80066a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80066e0:	bf00      	nop
 80066e2:	bf00      	nop
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	2000127c 	.word	0x2000127c
 80066f0:	200012a8 	.word	0x200012a8
 80066f4:	20001290 	.word	0x20001290

080066f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3354      	adds	r3, #84	@ 0x54
 8006704:	4618      	mov	r0, r3
 8006706:	f001 f86f 	bl	80077e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006710:	2b00      	cmp	r3, #0
 8006712:	d108      	bne.n	8006726 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006718:	4618      	mov	r0, r3
 800671a:	f000 ff3f 	bl	800759c <vPortFree>
				vPortFree( pxTCB );
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 ff3c 	bl	800759c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006724:	e019      	b.n	800675a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800672c:	2b01      	cmp	r3, #1
 800672e:	d103      	bne.n	8006738 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 ff33 	bl	800759c <vPortFree>
	}
 8006736:	e010      	b.n	800675a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800673e:	2b02      	cmp	r3, #2
 8006740:	d00b      	beq.n	800675a <prvDeleteTCB+0x62>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	60fb      	str	r3, [r7, #12]
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop
 8006758:	e7fd      	b.n	8006756 <prvDeleteTCB+0x5e>
	}
 800675a:	bf00      	nop
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800676a:	4b0c      	ldr	r3, [pc, #48]	@ (800679c <prvResetNextTaskUnblockTime+0x38>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d104      	bne.n	800677e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006774:	4b0a      	ldr	r3, [pc, #40]	@ (80067a0 <prvResetNextTaskUnblockTime+0x3c>)
 8006776:	f04f 32ff 	mov.w	r2, #4294967295
 800677a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800677c:	e008      	b.n	8006790 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800677e:	4b07      	ldr	r3, [pc, #28]	@ (800679c <prvResetNextTaskUnblockTime+0x38>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	4a04      	ldr	r2, [pc, #16]	@ (80067a0 <prvResetNextTaskUnblockTime+0x3c>)
 800678e:	6013      	str	r3, [r2, #0]
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	bc80      	pop	{r7}
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	20001260 	.word	0x20001260
 80067a0:	200012c8 	.word	0x200012c8

080067a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80067aa:	4b0b      	ldr	r3, [pc, #44]	@ (80067d8 <xTaskGetSchedulerState+0x34>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d102      	bne.n	80067b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80067b2:	2301      	movs	r3, #1
 80067b4:	607b      	str	r3, [r7, #4]
 80067b6:	e008      	b.n	80067ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067b8:	4b08      	ldr	r3, [pc, #32]	@ (80067dc <xTaskGetSchedulerState+0x38>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d102      	bne.n	80067c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80067c0:	2302      	movs	r3, #2
 80067c2:	607b      	str	r3, [r7, #4]
 80067c4:	e001      	b.n	80067ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80067c6:	2300      	movs	r3, #0
 80067c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80067ca:	687b      	ldr	r3, [r7, #4]
	}
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bc80      	pop	{r7}
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	200012b4 	.word	0x200012b4
 80067dc:	200012d0 	.word	0x200012d0

080067e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80067ec:	2300      	movs	r3, #0
 80067ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d058      	beq.n	80068a8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80067f6:	4b2f      	ldr	r3, [pc, #188]	@ (80068b4 <xTaskPriorityDisinherit+0xd4>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d00b      	beq.n	8006818 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	60fb      	str	r3, [r7, #12]
}
 8006812:	bf00      	nop
 8006814:	bf00      	nop
 8006816:	e7fd      	b.n	8006814 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10b      	bne.n	8006838 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	60bb      	str	r3, [r7, #8]
}
 8006832:	bf00      	nop
 8006834:	bf00      	nop
 8006836:	e7fd      	b.n	8006834 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800683c:	1e5a      	subs	r2, r3, #1
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800684a:	429a      	cmp	r2, r3
 800684c:	d02c      	beq.n	80068a8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006852:	2b00      	cmp	r3, #0
 8006854:	d128      	bne.n	80068a8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	3304      	adds	r3, #4
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe fc2c 	bl	80050b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006878:	4b0f      	ldr	r3, [pc, #60]	@ (80068b8 <xTaskPriorityDisinherit+0xd8>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	429a      	cmp	r2, r3
 800687e:	d903      	bls.n	8006888 <xTaskPriorityDisinherit+0xa8>
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006884:	4a0c      	ldr	r2, [pc, #48]	@ (80068b8 <xTaskPriorityDisinherit+0xd8>)
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800688c:	4613      	mov	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4a09      	ldr	r2, [pc, #36]	@ (80068bc <xTaskPriorityDisinherit+0xdc>)
 8006896:	441a      	add	r2, r3
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	3304      	adds	r3, #4
 800689c:	4619      	mov	r1, r3
 800689e:	4610      	mov	r0, r2
 80068a0:	f7fe fbaf 	bl	8005002 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80068a4:	2301      	movs	r3, #1
 80068a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80068a8:	697b      	ldr	r3, [r7, #20]
	}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20000dd4 	.word	0x20000dd4
 80068b8:	200012b0 	.word	0x200012b0
 80068bc:	20000dd8 	.word	0x20000dd8

080068c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80068ca:	4b21      	ldr	r3, [pc, #132]	@ (8006950 <prvAddCurrentTaskToDelayedList+0x90>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068d0:	4b20      	ldr	r3, [pc, #128]	@ (8006954 <prvAddCurrentTaskToDelayedList+0x94>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3304      	adds	r3, #4
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fe fbee 	bl	80050b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e2:	d10a      	bne.n	80068fa <prvAddCurrentTaskToDelayedList+0x3a>
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d007      	beq.n	80068fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006954 <prvAddCurrentTaskToDelayedList+0x94>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3304      	adds	r3, #4
 80068f0:	4619      	mov	r1, r3
 80068f2:	4819      	ldr	r0, [pc, #100]	@ (8006958 <prvAddCurrentTaskToDelayedList+0x98>)
 80068f4:	f7fe fb85 	bl	8005002 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80068f8:	e026      	b.n	8006948 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4413      	add	r3, r2
 8006900:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006902:	4b14      	ldr	r3, [pc, #80]	@ (8006954 <prvAddCurrentTaskToDelayedList+0x94>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	429a      	cmp	r2, r3
 8006910:	d209      	bcs.n	8006926 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006912:	4b12      	ldr	r3, [pc, #72]	@ (800695c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	4b0f      	ldr	r3, [pc, #60]	@ (8006954 <prvAddCurrentTaskToDelayedList+0x94>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3304      	adds	r3, #4
 800691c:	4619      	mov	r1, r3
 800691e:	4610      	mov	r0, r2
 8006920:	f7fe fb92 	bl	8005048 <vListInsert>
}
 8006924:	e010      	b.n	8006948 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006926:	4b0e      	ldr	r3, [pc, #56]	@ (8006960 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	4b0a      	ldr	r3, [pc, #40]	@ (8006954 <prvAddCurrentTaskToDelayedList+0x94>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3304      	adds	r3, #4
 8006930:	4619      	mov	r1, r3
 8006932:	4610      	mov	r0, r2
 8006934:	f7fe fb88 	bl	8005048 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006938:	4b0a      	ldr	r3, [pc, #40]	@ (8006964 <prvAddCurrentTaskToDelayedList+0xa4>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	429a      	cmp	r2, r3
 8006940:	d202      	bcs.n	8006948 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006942:	4a08      	ldr	r2, [pc, #32]	@ (8006964 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	6013      	str	r3, [r2, #0]
}
 8006948:	bf00      	nop
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	200012ac 	.word	0x200012ac
 8006954:	20000dd4 	.word	0x20000dd4
 8006958:	20001294 	.word	0x20001294
 800695c:	20001264 	.word	0x20001264
 8006960:	20001260 	.word	0x20001260
 8006964:	200012c8 	.word	0x200012c8

08006968 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b08a      	sub	sp, #40	@ 0x28
 800696c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800696e:	2300      	movs	r3, #0
 8006970:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006972:	f000 fb11 	bl	8006f98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006976:	4b1d      	ldr	r3, [pc, #116]	@ (80069ec <xTimerCreateTimerTask+0x84>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d021      	beq.n	80069c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800697e:	2300      	movs	r3, #0
 8006980:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006982:	2300      	movs	r3, #0
 8006984:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006986:	1d3a      	adds	r2, r7, #4
 8006988:	f107 0108 	add.w	r1, r7, #8
 800698c:	f107 030c 	add.w	r3, r7, #12
 8006990:	4618      	mov	r0, r3
 8006992:	f7fe faf1 	bl	8004f78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006996:	6879      	ldr	r1, [r7, #4]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	9202      	str	r2, [sp, #8]
 800699e:	9301      	str	r3, [sp, #4]
 80069a0:	2302      	movs	r3, #2
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	2300      	movs	r3, #0
 80069a6:	460a      	mov	r2, r1
 80069a8:	4911      	ldr	r1, [pc, #68]	@ (80069f0 <xTimerCreateTimerTask+0x88>)
 80069aa:	4812      	ldr	r0, [pc, #72]	@ (80069f4 <xTimerCreateTimerTask+0x8c>)
 80069ac:	f7ff f8a6 	bl	8005afc <xTaskCreateStatic>
 80069b0:	4603      	mov	r3, r0
 80069b2:	4a11      	ldr	r2, [pc, #68]	@ (80069f8 <xTimerCreateTimerTask+0x90>)
 80069b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80069b6:	4b10      	ldr	r3, [pc, #64]	@ (80069f8 <xTimerCreateTimerTask+0x90>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80069be:	2301      	movs	r3, #1
 80069c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10b      	bne.n	80069e0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80069c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069cc:	f383 8811 	msr	BASEPRI, r3
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	613b      	str	r3, [r7, #16]
}
 80069da:	bf00      	nop
 80069dc:	bf00      	nop
 80069de:	e7fd      	b.n	80069dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80069e0:	697b      	ldr	r3, [r7, #20]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	20001304 	.word	0x20001304
 80069f0:	080079f8 	.word	0x080079f8
 80069f4:	08006b35 	.word	0x08006b35
 80069f8:	20001308 	.word	0x20001308

080069fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08a      	sub	sp, #40	@ 0x28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10b      	bne.n	8006a2c <xTimerGenericCommand+0x30>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	623b      	str	r3, [r7, #32]
}
 8006a26:	bf00      	nop
 8006a28:	bf00      	nop
 8006a2a:	e7fd      	b.n	8006a28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006a2c:	4b19      	ldr	r3, [pc, #100]	@ (8006a94 <xTimerGenericCommand+0x98>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d02a      	beq.n	8006a8a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2b05      	cmp	r3, #5
 8006a44:	dc18      	bgt.n	8006a78 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a46:	f7ff fead 	bl	80067a4 <xTaskGetSchedulerState>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d109      	bne.n	8006a64 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a50:	4b10      	ldr	r3, [pc, #64]	@ (8006a94 <xTimerGenericCommand+0x98>)
 8006a52:	6818      	ldr	r0, [r3, #0]
 8006a54:	f107 0110 	add.w	r1, r7, #16
 8006a58:	2300      	movs	r3, #0
 8006a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a5c:	f7fe fc60 	bl	8005320 <xQueueGenericSend>
 8006a60:	6278      	str	r0, [r7, #36]	@ 0x24
 8006a62:	e012      	b.n	8006a8a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006a64:	4b0b      	ldr	r3, [pc, #44]	@ (8006a94 <xTimerGenericCommand+0x98>)
 8006a66:	6818      	ldr	r0, [r3, #0]
 8006a68:	f107 0110 	add.w	r1, r7, #16
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f7fe fc56 	bl	8005320 <xQueueGenericSend>
 8006a74:	6278      	str	r0, [r7, #36]	@ 0x24
 8006a76:	e008      	b.n	8006a8a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a78:	4b06      	ldr	r3, [pc, #24]	@ (8006a94 <xTimerGenericCommand+0x98>)
 8006a7a:	6818      	ldr	r0, [r3, #0]
 8006a7c:	f107 0110 	add.w	r1, r7, #16
 8006a80:	2300      	movs	r3, #0
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	f7fe fd4e 	bl	8005524 <xQueueGenericSendFromISR>
 8006a88:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3728      	adds	r7, #40	@ 0x28
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	20001304 	.word	0x20001304

08006a98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af02      	add	r7, sp, #8
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aa2:	4b23      	ldr	r3, [pc, #140]	@ (8006b30 <prvProcessExpiredTimer+0x98>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	3304      	adds	r3, #4
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fe fb01 	bl	80050b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d023      	beq.n	8006b0c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	699a      	ldr	r2, [r3, #24]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	18d1      	adds	r1, r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	6978      	ldr	r0, [r7, #20]
 8006ad2:	f000 f8d3 	bl	8006c7c <prvInsertTimerInActiveList>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d020      	beq.n	8006b1e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006adc:	2300      	movs	r3, #0
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	6978      	ldr	r0, [r7, #20]
 8006ae8:	f7ff ff88 	bl	80069fc <xTimerGenericCommand>
 8006aec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d114      	bne.n	8006b1e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	60fb      	str	r3, [r7, #12]
}
 8006b06:	bf00      	nop
 8006b08:	bf00      	nop
 8006b0a:	e7fd      	b.n	8006b08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b12:	f023 0301 	bic.w	r3, r3, #1
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	6978      	ldr	r0, [r7, #20]
 8006b24:	4798      	blx	r3
}
 8006b26:	bf00      	nop
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	200012fc 	.word	0x200012fc

08006b34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b3c:	f107 0308 	add.w	r3, r7, #8
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 f859 	bl	8006bf8 <prvGetNextExpireTime>
 8006b46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 f805 	bl	8006b5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006b52:	f000 f8d5 	bl	8006d00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b56:	bf00      	nop
 8006b58:	e7f0      	b.n	8006b3c <prvTimerTask+0x8>
	...

08006b5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006b66:	f7ff fa2d 	bl	8005fc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b6a:	f107 0308 	add.w	r3, r7, #8
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 f864 	bl	8006c3c <prvSampleTimeNow>
 8006b74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d130      	bne.n	8006bde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10a      	bne.n	8006b98 <prvProcessTimerOrBlockTask+0x3c>
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d806      	bhi.n	8006b98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006b8a:	f7ff fa29 	bl	8005fe0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b8e:	68f9      	ldr	r1, [r7, #12]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7ff ff81 	bl	8006a98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b96:	e024      	b.n	8006be2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d008      	beq.n	8006bb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b9e:	4b13      	ldr	r3, [pc, #76]	@ (8006bec <prvProcessTimerOrBlockTask+0x90>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <prvProcessTimerOrBlockTask+0x50>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e000      	b.n	8006bae <prvProcessTimerOrBlockTask+0x52>
 8006bac:	2300      	movs	r3, #0
 8006bae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8006bf0 <prvProcessTimerOrBlockTask+0x94>)
 8006bb2:	6818      	ldr	r0, [r3, #0]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	f7fe ff69 	bl	8005a94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006bc2:	f7ff fa0d 	bl	8005fe0 <xTaskResumeAll>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10a      	bne.n	8006be2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006bcc:	4b09      	ldr	r3, [pc, #36]	@ (8006bf4 <prvProcessTimerOrBlockTask+0x98>)
 8006bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	f3bf 8f6f 	isb	sy
}
 8006bdc:	e001      	b.n	8006be2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006bde:	f7ff f9ff 	bl	8005fe0 <xTaskResumeAll>
}
 8006be2:	bf00      	nop
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	20001300 	.word	0x20001300
 8006bf0:	20001304 	.word	0x20001304
 8006bf4:	e000ed04 	.word	0xe000ed04

08006bf8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c00:	4b0d      	ldr	r3, [pc, #52]	@ (8006c38 <prvGetNextExpireTime+0x40>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <prvGetNextExpireTime+0x16>
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	e000      	b.n	8006c10 <prvGetNextExpireTime+0x18>
 8006c0e:	2200      	movs	r2, #0
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d105      	bne.n	8006c28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c1c:	4b06      	ldr	r3, [pc, #24]	@ (8006c38 <prvGetNextExpireTime+0x40>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	e001      	b.n	8006c2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bc80      	pop	{r7}
 8006c36:	4770      	bx	lr
 8006c38:	200012fc 	.word	0x200012fc

08006c3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006c44:	f7ff fa6a 	bl	800611c <xTaskGetTickCount>
 8006c48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c78 <prvSampleTimeNow+0x3c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d205      	bcs.n	8006c60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006c54:	f000 f93a 	bl	8006ecc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	e002      	b.n	8006c66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006c66:	4a04      	ldr	r2, [pc, #16]	@ (8006c78 <prvSampleTimeNow+0x3c>)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	2000130c 	.word	0x2000130c

08006c7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d812      	bhi.n	8006cc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	1ad2      	subs	r2, r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d302      	bcc.n	8006cb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	617b      	str	r3, [r7, #20]
 8006cb4:	e01b      	b.n	8006cee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006cb6:	4b10      	ldr	r3, [pc, #64]	@ (8006cf8 <prvInsertTimerInActiveList+0x7c>)
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	f7fe f9c1 	bl	8005048 <vListInsert>
 8006cc6:	e012      	b.n	8006cee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d206      	bcs.n	8006cde <prvInsertTimerInActiveList+0x62>
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d302      	bcc.n	8006cde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	e007      	b.n	8006cee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cde:	4b07      	ldr	r3, [pc, #28]	@ (8006cfc <prvInsertTimerInActiveList+0x80>)
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	4610      	mov	r0, r2
 8006cea:	f7fe f9ad 	bl	8005048 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006cee:	697b      	ldr	r3, [r7, #20]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	20001300 	.word	0x20001300
 8006cfc:	200012fc 	.word	0x200012fc

08006d00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08e      	sub	sp, #56	@ 0x38
 8006d04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d06:	e0ce      	b.n	8006ea6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	da19      	bge.n	8006d42 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006d0e:	1d3b      	adds	r3, r7, #4
 8006d10:	3304      	adds	r3, #4
 8006d12:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10b      	bne.n	8006d32 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	61fb      	str	r3, [r7, #28]
}
 8006d2c:	bf00      	nop
 8006d2e:	bf00      	nop
 8006d30:	e7fd      	b.n	8006d2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d38:	6850      	ldr	r0, [r2, #4]
 8006d3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d3c:	6892      	ldr	r2, [r2, #8]
 8006d3e:	4611      	mov	r1, r2
 8006d40:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f2c0 80ae 	blt.w	8006ea6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d004      	beq.n	8006d60 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d58:	3304      	adds	r3, #4
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fe f9ac 	bl	80050b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d60:	463b      	mov	r3, r7
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7ff ff6a 	bl	8006c3c <prvSampleTimeNow>
 8006d68:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b09      	cmp	r3, #9
 8006d6e:	f200 8097 	bhi.w	8006ea0 <prvProcessReceivedCommands+0x1a0>
 8006d72:	a201      	add	r2, pc, #4	@ (adr r2, 8006d78 <prvProcessReceivedCommands+0x78>)
 8006d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d78:	08006da1 	.word	0x08006da1
 8006d7c:	08006da1 	.word	0x08006da1
 8006d80:	08006da1 	.word	0x08006da1
 8006d84:	08006e17 	.word	0x08006e17
 8006d88:	08006e2b 	.word	0x08006e2b
 8006d8c:	08006e77 	.word	0x08006e77
 8006d90:	08006da1 	.word	0x08006da1
 8006d94:	08006da1 	.word	0x08006da1
 8006d98:	08006e17 	.word	0x08006e17
 8006d9c:	08006e2b 	.word	0x08006e2b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006da6:	f043 0301 	orr.w	r3, r3, #1
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	18d1      	adds	r1, r2, r3
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006dc0:	f7ff ff5c 	bl	8006c7c <prvInsertTimerInActiveList>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d06c      	beq.n	8006ea4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006dd0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006dd8:	f003 0304 	and.w	r3, r3, #4
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d061      	beq.n	8006ea4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	441a      	add	r2, r3
 8006de8:	2300      	movs	r3, #0
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	2300      	movs	r3, #0
 8006dee:	2100      	movs	r1, #0
 8006df0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006df2:	f7ff fe03 	bl	80069fc <xTimerGenericCommand>
 8006df6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d152      	bne.n	8006ea4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	61bb      	str	r3, [r7, #24]
}
 8006e10:	bf00      	nop
 8006e12:	bf00      	nop
 8006e14:	e7fd      	b.n	8006e12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e1c:	f023 0301 	bic.w	r3, r3, #1
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006e28:	e03d      	b.n	8006ea6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e30:	f043 0301 	orr.w	r3, r3, #1
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e40:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10b      	bne.n	8006e62 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	617b      	str	r3, [r7, #20]
}
 8006e5c:	bf00      	nop
 8006e5e:	bf00      	nop
 8006e60:	e7fd      	b.n	8006e5e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e64:	699a      	ldr	r2, [r3, #24]
 8006e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e68:	18d1      	adds	r1, r2, r3
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e70:	f7ff ff04 	bl	8006c7c <prvInsertTimerInActiveList>
					break;
 8006e74:	e017      	b.n	8006ea6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d103      	bne.n	8006e8c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006e84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e86:	f000 fb89 	bl	800759c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e8a:	e00c      	b.n	8006ea6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e92:	f023 0301 	bic.w	r3, r3, #1
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006e9e:	e002      	b.n	8006ea6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006ea0:	bf00      	nop
 8006ea2:	e000      	b.n	8006ea6 <prvProcessReceivedCommands+0x1a6>
					break;
 8006ea4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ea6:	4b08      	ldr	r3, [pc, #32]	@ (8006ec8 <prvProcessReceivedCommands+0x1c8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	1d39      	adds	r1, r7, #4
 8006eac:	2200      	movs	r2, #0
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fe fbd6 	bl	8005660 <xQueueReceive>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f47f af26 	bne.w	8006d08 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006ebc:	bf00      	nop
 8006ebe:	bf00      	nop
 8006ec0:	3730      	adds	r7, #48	@ 0x30
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20001304 	.word	0x20001304

08006ecc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ed2:	e049      	b.n	8006f68 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ed4:	4b2e      	ldr	r3, [pc, #184]	@ (8006f90 <prvSwitchTimerLists+0xc4>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ede:	4b2c      	ldr	r3, [pc, #176]	@ (8006f90 <prvSwitchTimerLists+0xc4>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3304      	adds	r3, #4
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7fe f8e3 	bl	80050b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d02f      	beq.n	8006f68 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4413      	add	r3, r2
 8006f10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d90e      	bls.n	8006f38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f26:	4b1a      	ldr	r3, [pc, #104]	@ (8006f90 <prvSwitchTimerLists+0xc4>)
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	4619      	mov	r1, r3
 8006f30:	4610      	mov	r0, r2
 8006f32:	f7fe f889 	bl	8005048 <vListInsert>
 8006f36:	e017      	b.n	8006f68 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f38:	2300      	movs	r3, #0
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	2100      	movs	r1, #0
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f7ff fd5a 	bl	80069fc <xTimerGenericCommand>
 8006f48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10b      	bne.n	8006f68 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	603b      	str	r3, [r7, #0]
}
 8006f62:	bf00      	nop
 8006f64:	bf00      	nop
 8006f66:	e7fd      	b.n	8006f64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f68:	4b09      	ldr	r3, [pc, #36]	@ (8006f90 <prvSwitchTimerLists+0xc4>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1b0      	bne.n	8006ed4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006f72:	4b07      	ldr	r3, [pc, #28]	@ (8006f90 <prvSwitchTimerLists+0xc4>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006f78:	4b06      	ldr	r3, [pc, #24]	@ (8006f94 <prvSwitchTimerLists+0xc8>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a04      	ldr	r2, [pc, #16]	@ (8006f90 <prvSwitchTimerLists+0xc4>)
 8006f7e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006f80:	4a04      	ldr	r2, [pc, #16]	@ (8006f94 <prvSwitchTimerLists+0xc8>)
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	6013      	str	r3, [r2, #0]
}
 8006f86:	bf00      	nop
 8006f88:	3718      	adds	r7, #24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	200012fc 	.word	0x200012fc
 8006f94:	20001300 	.word	0x20001300

08006f98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f9e:	f000 f92d 	bl	80071fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006fa2:	4b15      	ldr	r3, [pc, #84]	@ (8006ff8 <prvCheckForValidListAndQueue+0x60>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d120      	bne.n	8006fec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006faa:	4814      	ldr	r0, [pc, #80]	@ (8006ffc <prvCheckForValidListAndQueue+0x64>)
 8006fac:	f7fd fffe 	bl	8004fac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006fb0:	4813      	ldr	r0, [pc, #76]	@ (8007000 <prvCheckForValidListAndQueue+0x68>)
 8006fb2:	f7fd fffb 	bl	8004fac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006fb6:	4b13      	ldr	r3, [pc, #76]	@ (8007004 <prvCheckForValidListAndQueue+0x6c>)
 8006fb8:	4a10      	ldr	r2, [pc, #64]	@ (8006ffc <prvCheckForValidListAndQueue+0x64>)
 8006fba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006fbc:	4b12      	ldr	r3, [pc, #72]	@ (8007008 <prvCheckForValidListAndQueue+0x70>)
 8006fbe:	4a10      	ldr	r2, [pc, #64]	@ (8007000 <prvCheckForValidListAndQueue+0x68>)
 8006fc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	4b11      	ldr	r3, [pc, #68]	@ (800700c <prvCheckForValidListAndQueue+0x74>)
 8006fc8:	4a11      	ldr	r2, [pc, #68]	@ (8007010 <prvCheckForValidListAndQueue+0x78>)
 8006fca:	2110      	movs	r1, #16
 8006fcc:	200a      	movs	r0, #10
 8006fce:	f7fe f907 	bl	80051e0 <xQueueGenericCreateStatic>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	4a08      	ldr	r2, [pc, #32]	@ (8006ff8 <prvCheckForValidListAndQueue+0x60>)
 8006fd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006fd8:	4b07      	ldr	r3, [pc, #28]	@ (8006ff8 <prvCheckForValidListAndQueue+0x60>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d005      	beq.n	8006fec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006fe0:	4b05      	ldr	r3, [pc, #20]	@ (8006ff8 <prvCheckForValidListAndQueue+0x60>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	490b      	ldr	r1, [pc, #44]	@ (8007014 <prvCheckForValidListAndQueue+0x7c>)
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fe fd2c 	bl	8005a44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fec:	f000 f936 	bl	800725c <vPortExitCritical>
}
 8006ff0:	bf00      	nop
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20001304 	.word	0x20001304
 8006ffc:	200012d4 	.word	0x200012d4
 8007000:	200012e8 	.word	0x200012e8
 8007004:	200012fc 	.word	0x200012fc
 8007008:	20001300 	.word	0x20001300
 800700c:	200013b0 	.word	0x200013b0
 8007010:	20001310 	.word	0x20001310
 8007014:	08007a00 	.word	0x08007a00

08007018 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	3b04      	subs	r3, #4
 8007028:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007030:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3b04      	subs	r3, #4
 8007036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	f023 0201 	bic.w	r2, r3, #1
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3b04      	subs	r3, #4
 8007046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007048:	4a08      	ldr	r2, [pc, #32]	@ (800706c <pxPortInitialiseStack+0x54>)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3b14      	subs	r3, #20
 8007052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3b20      	subs	r3, #32
 800705e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007060:	68fb      	ldr	r3, [r7, #12]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	bc80      	pop	{r7}
 800706a:	4770      	bx	lr
 800706c:	08007071 	.word	0x08007071

08007070 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007076:	2300      	movs	r3, #0
 8007078:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800707a:	4b12      	ldr	r3, [pc, #72]	@ (80070c4 <prvTaskExitError+0x54>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007082:	d00b      	beq.n	800709c <prvTaskExitError+0x2c>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	60fb      	str	r3, [r7, #12]
}
 8007096:	bf00      	nop
 8007098:	bf00      	nop
 800709a:	e7fd      	b.n	8007098 <prvTaskExitError+0x28>
	__asm volatile
 800709c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	60bb      	str	r3, [r7, #8]
}
 80070ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80070b0:	bf00      	nop
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0fc      	beq.n	80070b2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80070b8:	bf00      	nop
 80070ba:	bf00      	nop
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	bc80      	pop	{r7}
 80070c2:	4770      	bx	lr
 80070c4:	2000006c 	.word	0x2000006c
	...

080070d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070d0:	4b07      	ldr	r3, [pc, #28]	@ (80070f0 <pxCurrentTCBConst2>)
 80070d2:	6819      	ldr	r1, [r3, #0]
 80070d4:	6808      	ldr	r0, [r1, #0]
 80070d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80070da:	f380 8809 	msr	PSP, r0
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f04f 0000 	mov.w	r0, #0
 80070e6:	f380 8811 	msr	BASEPRI, r0
 80070ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80070ee:	4770      	bx	lr

080070f0 <pxCurrentTCBConst2>:
 80070f0:	20000dd4 	.word	0x20000dd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop

080070f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80070f8:	4806      	ldr	r0, [pc, #24]	@ (8007114 <prvPortStartFirstTask+0x1c>)
 80070fa:	6800      	ldr	r0, [r0, #0]
 80070fc:	6800      	ldr	r0, [r0, #0]
 80070fe:	f380 8808 	msr	MSP, r0
 8007102:	b662      	cpsie	i
 8007104:	b661      	cpsie	f
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	df00      	svc	0
 8007110:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007112:	bf00      	nop
 8007114:	e000ed08 	.word	0xe000ed08

08007118 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800711e:	4b32      	ldr	r3, [pc, #200]	@ (80071e8 <xPortStartScheduler+0xd0>)
 8007120:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	b2db      	uxtb	r3, r3
 8007128:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	22ff      	movs	r2, #255	@ 0xff
 800712e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	b2db      	uxtb	r3, r3
 8007136:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007138:	78fb      	ldrb	r3, [r7, #3]
 800713a:	b2db      	uxtb	r3, r3
 800713c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007140:	b2da      	uxtb	r2, r3
 8007142:	4b2a      	ldr	r3, [pc, #168]	@ (80071ec <xPortStartScheduler+0xd4>)
 8007144:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007146:	4b2a      	ldr	r3, [pc, #168]	@ (80071f0 <xPortStartScheduler+0xd8>)
 8007148:	2207      	movs	r2, #7
 800714a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800714c:	e009      	b.n	8007162 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800714e:	4b28      	ldr	r3, [pc, #160]	@ (80071f0 <xPortStartScheduler+0xd8>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3b01      	subs	r3, #1
 8007154:	4a26      	ldr	r2, [pc, #152]	@ (80071f0 <xPortStartScheduler+0xd8>)
 8007156:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007158:	78fb      	ldrb	r3, [r7, #3]
 800715a:	b2db      	uxtb	r3, r3
 800715c:	005b      	lsls	r3, r3, #1
 800715e:	b2db      	uxtb	r3, r3
 8007160:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007162:	78fb      	ldrb	r3, [r7, #3]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800716a:	2b80      	cmp	r3, #128	@ 0x80
 800716c:	d0ef      	beq.n	800714e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800716e:	4b20      	ldr	r3, [pc, #128]	@ (80071f0 <xPortStartScheduler+0xd8>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f1c3 0307 	rsb	r3, r3, #7
 8007176:	2b04      	cmp	r3, #4
 8007178:	d00b      	beq.n	8007192 <xPortStartScheduler+0x7a>
	__asm volatile
 800717a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	60bb      	str	r3, [r7, #8]
}
 800718c:	bf00      	nop
 800718e:	bf00      	nop
 8007190:	e7fd      	b.n	800718e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007192:	4b17      	ldr	r3, [pc, #92]	@ (80071f0 <xPortStartScheduler+0xd8>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	021b      	lsls	r3, r3, #8
 8007198:	4a15      	ldr	r2, [pc, #84]	@ (80071f0 <xPortStartScheduler+0xd8>)
 800719a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800719c:	4b14      	ldr	r3, [pc, #80]	@ (80071f0 <xPortStartScheduler+0xd8>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80071a4:	4a12      	ldr	r2, [pc, #72]	@ (80071f0 <xPortStartScheduler+0xd8>)
 80071a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	b2da      	uxtb	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071b0:	4b10      	ldr	r3, [pc, #64]	@ (80071f4 <xPortStartScheduler+0xdc>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a0f      	ldr	r2, [pc, #60]	@ (80071f4 <xPortStartScheduler+0xdc>)
 80071b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80071ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071bc:	4b0d      	ldr	r3, [pc, #52]	@ (80071f4 <xPortStartScheduler+0xdc>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a0c      	ldr	r2, [pc, #48]	@ (80071f4 <xPortStartScheduler+0xdc>)
 80071c2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80071c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071c8:	f000 f8b8 	bl	800733c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071cc:	4b0a      	ldr	r3, [pc, #40]	@ (80071f8 <xPortStartScheduler+0xe0>)
 80071ce:	2200      	movs	r2, #0
 80071d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071d2:	f7ff ff91 	bl	80070f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071d6:	f7ff f869 	bl	80062ac <vTaskSwitchContext>
	prvTaskExitError();
 80071da:	f7ff ff49 	bl	8007070 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	e000e400 	.word	0xe000e400
 80071ec:	20001400 	.word	0x20001400
 80071f0:	20001404 	.word	0x20001404
 80071f4:	e000ed20 	.word	0xe000ed20
 80071f8:	2000006c 	.word	0x2000006c

080071fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
	__asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	607b      	str	r3, [r7, #4]
}
 8007214:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007216:	4b0f      	ldr	r3, [pc, #60]	@ (8007254 <vPortEnterCritical+0x58>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	3301      	adds	r3, #1
 800721c:	4a0d      	ldr	r2, [pc, #52]	@ (8007254 <vPortEnterCritical+0x58>)
 800721e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007220:	4b0c      	ldr	r3, [pc, #48]	@ (8007254 <vPortEnterCritical+0x58>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d110      	bne.n	800724a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007228:	4b0b      	ldr	r3, [pc, #44]	@ (8007258 <vPortEnterCritical+0x5c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00b      	beq.n	800724a <vPortEnterCritical+0x4e>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	603b      	str	r3, [r7, #0]
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop
 8007248:	e7fd      	b.n	8007246 <vPortEnterCritical+0x4a>
	}
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	bc80      	pop	{r7}
 8007252:	4770      	bx	lr
 8007254:	2000006c 	.word	0x2000006c
 8007258:	e000ed04 	.word	0xe000ed04

0800725c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007262:	4b12      	ldr	r3, [pc, #72]	@ (80072ac <vPortExitCritical+0x50>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10b      	bne.n	8007282 <vPortExitCritical+0x26>
	__asm volatile
 800726a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	607b      	str	r3, [r7, #4]
}
 800727c:	bf00      	nop
 800727e:	bf00      	nop
 8007280:	e7fd      	b.n	800727e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007282:	4b0a      	ldr	r3, [pc, #40]	@ (80072ac <vPortExitCritical+0x50>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3b01      	subs	r3, #1
 8007288:	4a08      	ldr	r2, [pc, #32]	@ (80072ac <vPortExitCritical+0x50>)
 800728a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800728c:	4b07      	ldr	r3, [pc, #28]	@ (80072ac <vPortExitCritical+0x50>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d105      	bne.n	80072a0 <vPortExitCritical+0x44>
 8007294:	2300      	movs	r3, #0
 8007296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	f383 8811 	msr	BASEPRI, r3
}
 800729e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bc80      	pop	{r7}
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	2000006c 	.word	0x2000006c

080072b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072b0:	f3ef 8009 	mrs	r0, PSP
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	4b0d      	ldr	r3, [pc, #52]	@ (80072f0 <pxCurrentTCBConst>)
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80072c0:	6010      	str	r0, [r2, #0]
 80072c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80072c6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80072ca:	f380 8811 	msr	BASEPRI, r0
 80072ce:	f7fe ffed 	bl	80062ac <vTaskSwitchContext>
 80072d2:	f04f 0000 	mov.w	r0, #0
 80072d6:	f380 8811 	msr	BASEPRI, r0
 80072da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80072de:	6819      	ldr	r1, [r3, #0]
 80072e0:	6808      	ldr	r0, [r1, #0]
 80072e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80072e6:	f380 8809 	msr	PSP, r0
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	4770      	bx	lr

080072f0 <pxCurrentTCBConst>:
 80072f0:	20000dd4 	.word	0x20000dd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072f4:	bf00      	nop
 80072f6:	bf00      	nop

080072f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	607b      	str	r3, [r7, #4]
}
 8007310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007312:	f7fe ff11 	bl	8006138 <xTaskIncrementTick>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800731c:	4b06      	ldr	r3, [pc, #24]	@ (8007338 <xPortSysTickHandler+0x40>)
 800731e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	2300      	movs	r3, #0
 8007326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	f383 8811 	msr	BASEPRI, r3
}
 800732e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007330:	bf00      	nop
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	e000ed04 	.word	0xe000ed04

0800733c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800733c:	b480      	push	{r7}
 800733e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007340:	4b0a      	ldr	r3, [pc, #40]	@ (800736c <vPortSetupTimerInterrupt+0x30>)
 8007342:	2200      	movs	r2, #0
 8007344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007346:	4b0a      	ldr	r3, [pc, #40]	@ (8007370 <vPortSetupTimerInterrupt+0x34>)
 8007348:	2200      	movs	r2, #0
 800734a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800734c:	4b09      	ldr	r3, [pc, #36]	@ (8007374 <vPortSetupTimerInterrupt+0x38>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a09      	ldr	r2, [pc, #36]	@ (8007378 <vPortSetupTimerInterrupt+0x3c>)
 8007352:	fba2 2303 	umull	r2, r3, r2, r3
 8007356:	099b      	lsrs	r3, r3, #6
 8007358:	4a08      	ldr	r2, [pc, #32]	@ (800737c <vPortSetupTimerInterrupt+0x40>)
 800735a:	3b01      	subs	r3, #1
 800735c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800735e:	4b03      	ldr	r3, [pc, #12]	@ (800736c <vPortSetupTimerInterrupt+0x30>)
 8007360:	2207      	movs	r2, #7
 8007362:	601a      	str	r2, [r3, #0]
}
 8007364:	bf00      	nop
 8007366:	46bd      	mov	sp, r7
 8007368:	bc80      	pop	{r7}
 800736a:	4770      	bx	lr
 800736c:	e000e010 	.word	0xe000e010
 8007370:	e000e018 	.word	0xe000e018
 8007374:	20000000 	.word	0x20000000
 8007378:	10624dd3 	.word	0x10624dd3
 800737c:	e000e014 	.word	0xe000e014

08007380 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007386:	f3ef 8305 	mrs	r3, IPSR
 800738a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2b0f      	cmp	r3, #15
 8007390:	d915      	bls.n	80073be <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007392:	4a17      	ldr	r2, [pc, #92]	@ (80073f0 <vPortValidateInterruptPriority+0x70>)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4413      	add	r3, r2
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800739c:	4b15      	ldr	r3, [pc, #84]	@ (80073f4 <vPortValidateInterruptPriority+0x74>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	7afa      	ldrb	r2, [r7, #11]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d20b      	bcs.n	80073be <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	607b      	str	r3, [r7, #4]
}
 80073b8:	bf00      	nop
 80073ba:	bf00      	nop
 80073bc:	e7fd      	b.n	80073ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073be:	4b0e      	ldr	r3, [pc, #56]	@ (80073f8 <vPortValidateInterruptPriority+0x78>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80073c6:	4b0d      	ldr	r3, [pc, #52]	@ (80073fc <vPortValidateInterruptPriority+0x7c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d90b      	bls.n	80073e6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	603b      	str	r3, [r7, #0]
}
 80073e0:	bf00      	nop
 80073e2:	bf00      	nop
 80073e4:	e7fd      	b.n	80073e2 <vPortValidateInterruptPriority+0x62>
	}
 80073e6:	bf00      	nop
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bc80      	pop	{r7}
 80073ee:	4770      	bx	lr
 80073f0:	e000e3f0 	.word	0xe000e3f0
 80073f4:	20001400 	.word	0x20001400
 80073f8:	e000ed0c 	.word	0xe000ed0c
 80073fc:	20001404 	.word	0x20001404

08007400 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08a      	sub	sp, #40	@ 0x28
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007408:	2300      	movs	r3, #0
 800740a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800740c:	f7fe fdda 	bl	8005fc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007410:	4b5c      	ldr	r3, [pc, #368]	@ (8007584 <pvPortMalloc+0x184>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007418:	f000 f924 	bl	8007664 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800741c:	4b5a      	ldr	r3, [pc, #360]	@ (8007588 <pvPortMalloc+0x188>)
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4013      	ands	r3, r2
 8007424:	2b00      	cmp	r3, #0
 8007426:	f040 8095 	bne.w	8007554 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d01e      	beq.n	800746e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007430:	2208      	movs	r2, #8
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4413      	add	r3, r2
 8007436:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f003 0307 	and.w	r3, r3, #7
 800743e:	2b00      	cmp	r3, #0
 8007440:	d015      	beq.n	800746e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f023 0307 	bic.w	r3, r3, #7
 8007448:	3308      	adds	r3, #8
 800744a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f003 0307 	and.w	r3, r3, #7
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00b      	beq.n	800746e <pvPortMalloc+0x6e>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	617b      	str	r3, [r7, #20]
}
 8007468:	bf00      	nop
 800746a:	bf00      	nop
 800746c:	e7fd      	b.n	800746a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d06f      	beq.n	8007554 <pvPortMalloc+0x154>
 8007474:	4b45      	ldr	r3, [pc, #276]	@ (800758c <pvPortMalloc+0x18c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	429a      	cmp	r2, r3
 800747c:	d86a      	bhi.n	8007554 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800747e:	4b44      	ldr	r3, [pc, #272]	@ (8007590 <pvPortMalloc+0x190>)
 8007480:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007482:	4b43      	ldr	r3, [pc, #268]	@ (8007590 <pvPortMalloc+0x190>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007488:	e004      	b.n	8007494 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800748a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	429a      	cmp	r2, r3
 800749c:	d903      	bls.n	80074a6 <pvPortMalloc+0xa6>
 800749e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1f1      	bne.n	800748a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074a6:	4b37      	ldr	r3, [pc, #220]	@ (8007584 <pvPortMalloc+0x184>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d051      	beq.n	8007554 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2208      	movs	r2, #8
 80074b6:	4413      	add	r3, r2
 80074b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	1ad2      	subs	r2, r2, r3
 80074ca:	2308      	movs	r3, #8
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d920      	bls.n	8007514 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4413      	add	r3, r2
 80074d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	f003 0307 	and.w	r3, r3, #7
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00b      	beq.n	80074fc <pvPortMalloc+0xfc>
	__asm volatile
 80074e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	613b      	str	r3, [r7, #16]
}
 80074f6:	bf00      	nop
 80074f8:	bf00      	nop
 80074fa:	e7fd      	b.n	80074f8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	1ad2      	subs	r2, r2, r3
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800750e:	69b8      	ldr	r0, [r7, #24]
 8007510:	f000 f90a 	bl	8007728 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007514:	4b1d      	ldr	r3, [pc, #116]	@ (800758c <pvPortMalloc+0x18c>)
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	4a1b      	ldr	r2, [pc, #108]	@ (800758c <pvPortMalloc+0x18c>)
 8007520:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007522:	4b1a      	ldr	r3, [pc, #104]	@ (800758c <pvPortMalloc+0x18c>)
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	4b1b      	ldr	r3, [pc, #108]	@ (8007594 <pvPortMalloc+0x194>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	429a      	cmp	r2, r3
 800752c:	d203      	bcs.n	8007536 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800752e:	4b17      	ldr	r3, [pc, #92]	@ (800758c <pvPortMalloc+0x18c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a18      	ldr	r2, [pc, #96]	@ (8007594 <pvPortMalloc+0x194>)
 8007534:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007538:	685a      	ldr	r2, [r3, #4]
 800753a:	4b13      	ldr	r3, [pc, #76]	@ (8007588 <pvPortMalloc+0x188>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	431a      	orrs	r2, r3
 8007540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007542:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007546:	2200      	movs	r2, #0
 8007548:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800754a:	4b13      	ldr	r3, [pc, #76]	@ (8007598 <pvPortMalloc+0x198>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3301      	adds	r3, #1
 8007550:	4a11      	ldr	r2, [pc, #68]	@ (8007598 <pvPortMalloc+0x198>)
 8007552:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007554:	f7fe fd44 	bl	8005fe0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	f003 0307 	and.w	r3, r3, #7
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00b      	beq.n	800757a <pvPortMalloc+0x17a>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	60fb      	str	r3, [r7, #12]
}
 8007574:	bf00      	nop
 8007576:	bf00      	nop
 8007578:	e7fd      	b.n	8007576 <pvPortMalloc+0x176>
	return pvReturn;
 800757a:	69fb      	ldr	r3, [r7, #28]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3728      	adds	r7, #40	@ 0x28
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20002010 	.word	0x20002010
 8007588:	20002024 	.word	0x20002024
 800758c:	20002014 	.word	0x20002014
 8007590:	20002008 	.word	0x20002008
 8007594:	20002018 	.word	0x20002018
 8007598:	2000201c 	.word	0x2000201c

0800759c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d04f      	beq.n	800764e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075ae:	2308      	movs	r3, #8
 80075b0:	425b      	negs	r3, r3
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	4413      	add	r3, r2
 80075b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	4b25      	ldr	r3, [pc, #148]	@ (8007658 <vPortFree+0xbc>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4013      	ands	r3, r2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10b      	bne.n	80075e2 <vPortFree+0x46>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	60fb      	str	r3, [r7, #12]
}
 80075dc:	bf00      	nop
 80075de:	bf00      	nop
 80075e0:	e7fd      	b.n	80075de <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00b      	beq.n	8007602 <vPortFree+0x66>
	__asm volatile
 80075ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ee:	f383 8811 	msr	BASEPRI, r3
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	60bb      	str	r3, [r7, #8]
}
 80075fc:	bf00      	nop
 80075fe:	bf00      	nop
 8007600:	e7fd      	b.n	80075fe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	4b14      	ldr	r3, [pc, #80]	@ (8007658 <vPortFree+0xbc>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4013      	ands	r3, r2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d01e      	beq.n	800764e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d11a      	bne.n	800764e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	4b0e      	ldr	r3, [pc, #56]	@ (8007658 <vPortFree+0xbc>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	43db      	mvns	r3, r3
 8007622:	401a      	ands	r2, r3
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007628:	f7fe fccc 	bl	8005fc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	4b0a      	ldr	r3, [pc, #40]	@ (800765c <vPortFree+0xc0>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4413      	add	r3, r2
 8007636:	4a09      	ldr	r2, [pc, #36]	@ (800765c <vPortFree+0xc0>)
 8007638:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800763a:	6938      	ldr	r0, [r7, #16]
 800763c:	f000 f874 	bl	8007728 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007640:	4b07      	ldr	r3, [pc, #28]	@ (8007660 <vPortFree+0xc4>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3301      	adds	r3, #1
 8007646:	4a06      	ldr	r2, [pc, #24]	@ (8007660 <vPortFree+0xc4>)
 8007648:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800764a:	f7fe fcc9 	bl	8005fe0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800764e:	bf00      	nop
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	20002024 	.word	0x20002024
 800765c:	20002014 	.word	0x20002014
 8007660:	20002020 	.word	0x20002020

08007664 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800766a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800766e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007670:	4b27      	ldr	r3, [pc, #156]	@ (8007710 <prvHeapInit+0xac>)
 8007672:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f003 0307 	and.w	r3, r3, #7
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00c      	beq.n	8007698 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	3307      	adds	r3, #7
 8007682:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f023 0307 	bic.w	r3, r3, #7
 800768a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	4a1f      	ldr	r2, [pc, #124]	@ (8007710 <prvHeapInit+0xac>)
 8007694:	4413      	add	r3, r2
 8007696:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800769c:	4a1d      	ldr	r2, [pc, #116]	@ (8007714 <prvHeapInit+0xb0>)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80076a2:	4b1c      	ldr	r3, [pc, #112]	@ (8007714 <prvHeapInit+0xb0>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	4413      	add	r3, r2
 80076ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80076b0:	2208      	movs	r2, #8
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	1a9b      	subs	r3, r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f023 0307 	bic.w	r3, r3, #7
 80076be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4a15      	ldr	r2, [pc, #84]	@ (8007718 <prvHeapInit+0xb4>)
 80076c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076c6:	4b14      	ldr	r3, [pc, #80]	@ (8007718 <prvHeapInit+0xb4>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2200      	movs	r2, #0
 80076cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076ce:	4b12      	ldr	r3, [pc, #72]	@ (8007718 <prvHeapInit+0xb4>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	1ad2      	subs	r2, r2, r3
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007718 <prvHeapInit+0xb4>)
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	4a0a      	ldr	r2, [pc, #40]	@ (800771c <prvHeapInit+0xb8>)
 80076f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	4a09      	ldr	r2, [pc, #36]	@ (8007720 <prvHeapInit+0xbc>)
 80076fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076fc:	4b09      	ldr	r3, [pc, #36]	@ (8007724 <prvHeapInit+0xc0>)
 80076fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007702:	601a      	str	r2, [r3, #0]
}
 8007704:	bf00      	nop
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	bc80      	pop	{r7}
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	20001408 	.word	0x20001408
 8007714:	20002008 	.word	0x20002008
 8007718:	20002010 	.word	0x20002010
 800771c:	20002018 	.word	0x20002018
 8007720:	20002014 	.word	0x20002014
 8007724:	20002024 	.word	0x20002024

08007728 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007730:	4b27      	ldr	r3, [pc, #156]	@ (80077d0 <prvInsertBlockIntoFreeList+0xa8>)
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	e002      	b.n	800773c <prvInsertBlockIntoFreeList+0x14>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	429a      	cmp	r2, r3
 8007744:	d8f7      	bhi.n	8007736 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	4413      	add	r3, r2
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	429a      	cmp	r2, r3
 8007756:	d108      	bne.n	800776a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	441a      	add	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	441a      	add	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d118      	bne.n	80077b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	4b14      	ldr	r3, [pc, #80]	@ (80077d4 <prvInsertBlockIntoFreeList+0xac>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d00d      	beq.n	80077a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	441a      	add	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	e008      	b.n	80077b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80077a6:	4b0b      	ldr	r3, [pc, #44]	@ (80077d4 <prvInsertBlockIntoFreeList+0xac>)
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	e003      	b.n	80077b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d002      	beq.n	80077c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077c6:	bf00      	nop
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bc80      	pop	{r7}
 80077ce:	4770      	bx	lr
 80077d0:	20002008 	.word	0x20002008
 80077d4:	20002010 	.word	0x20002010

080077d8 <memset>:
 80077d8:	4603      	mov	r3, r0
 80077da:	4402      	add	r2, r0
 80077dc:	4293      	cmp	r3, r2
 80077de:	d100      	bne.n	80077e2 <memset+0xa>
 80077e0:	4770      	bx	lr
 80077e2:	f803 1b01 	strb.w	r1, [r3], #1
 80077e6:	e7f9      	b.n	80077dc <memset+0x4>

080077e8 <_reclaim_reent>:
 80077e8:	4b2d      	ldr	r3, [pc, #180]	@ (80078a0 <_reclaim_reent+0xb8>)
 80077ea:	b570      	push	{r4, r5, r6, lr}
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4604      	mov	r4, r0
 80077f0:	4283      	cmp	r3, r0
 80077f2:	d053      	beq.n	800789c <_reclaim_reent+0xb4>
 80077f4:	69c3      	ldr	r3, [r0, #28]
 80077f6:	b31b      	cbz	r3, 8007840 <_reclaim_reent+0x58>
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	b163      	cbz	r3, 8007816 <_reclaim_reent+0x2e>
 80077fc:	2500      	movs	r5, #0
 80077fe:	69e3      	ldr	r3, [r4, #28]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	5959      	ldr	r1, [r3, r5]
 8007804:	b9b1      	cbnz	r1, 8007834 <_reclaim_reent+0x4c>
 8007806:	3504      	adds	r5, #4
 8007808:	2d80      	cmp	r5, #128	@ 0x80
 800780a:	d1f8      	bne.n	80077fe <_reclaim_reent+0x16>
 800780c:	69e3      	ldr	r3, [r4, #28]
 800780e:	4620      	mov	r0, r4
 8007810:	68d9      	ldr	r1, [r3, #12]
 8007812:	f000 f87b 	bl	800790c <_free_r>
 8007816:	69e3      	ldr	r3, [r4, #28]
 8007818:	6819      	ldr	r1, [r3, #0]
 800781a:	b111      	cbz	r1, 8007822 <_reclaim_reent+0x3a>
 800781c:	4620      	mov	r0, r4
 800781e:	f000 f875 	bl	800790c <_free_r>
 8007822:	69e3      	ldr	r3, [r4, #28]
 8007824:	689d      	ldr	r5, [r3, #8]
 8007826:	b15d      	cbz	r5, 8007840 <_reclaim_reent+0x58>
 8007828:	4629      	mov	r1, r5
 800782a:	4620      	mov	r0, r4
 800782c:	682d      	ldr	r5, [r5, #0]
 800782e:	f000 f86d 	bl	800790c <_free_r>
 8007832:	e7f8      	b.n	8007826 <_reclaim_reent+0x3e>
 8007834:	680e      	ldr	r6, [r1, #0]
 8007836:	4620      	mov	r0, r4
 8007838:	f000 f868 	bl	800790c <_free_r>
 800783c:	4631      	mov	r1, r6
 800783e:	e7e1      	b.n	8007804 <_reclaim_reent+0x1c>
 8007840:	6961      	ldr	r1, [r4, #20]
 8007842:	b111      	cbz	r1, 800784a <_reclaim_reent+0x62>
 8007844:	4620      	mov	r0, r4
 8007846:	f000 f861 	bl	800790c <_free_r>
 800784a:	69e1      	ldr	r1, [r4, #28]
 800784c:	b111      	cbz	r1, 8007854 <_reclaim_reent+0x6c>
 800784e:	4620      	mov	r0, r4
 8007850:	f000 f85c 	bl	800790c <_free_r>
 8007854:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007856:	b111      	cbz	r1, 800785e <_reclaim_reent+0x76>
 8007858:	4620      	mov	r0, r4
 800785a:	f000 f857 	bl	800790c <_free_r>
 800785e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007860:	b111      	cbz	r1, 8007868 <_reclaim_reent+0x80>
 8007862:	4620      	mov	r0, r4
 8007864:	f000 f852 	bl	800790c <_free_r>
 8007868:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800786a:	b111      	cbz	r1, 8007872 <_reclaim_reent+0x8a>
 800786c:	4620      	mov	r0, r4
 800786e:	f000 f84d 	bl	800790c <_free_r>
 8007872:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007874:	b111      	cbz	r1, 800787c <_reclaim_reent+0x94>
 8007876:	4620      	mov	r0, r4
 8007878:	f000 f848 	bl	800790c <_free_r>
 800787c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800787e:	b111      	cbz	r1, 8007886 <_reclaim_reent+0x9e>
 8007880:	4620      	mov	r0, r4
 8007882:	f000 f843 	bl	800790c <_free_r>
 8007886:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007888:	b111      	cbz	r1, 8007890 <_reclaim_reent+0xa8>
 800788a:	4620      	mov	r0, r4
 800788c:	f000 f83e 	bl	800790c <_free_r>
 8007890:	6a23      	ldr	r3, [r4, #32]
 8007892:	b11b      	cbz	r3, 800789c <_reclaim_reent+0xb4>
 8007894:	4620      	mov	r0, r4
 8007896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800789a:	4718      	bx	r3
 800789c:	bd70      	pop	{r4, r5, r6, pc}
 800789e:	bf00      	nop
 80078a0:	20000070 	.word	0x20000070

080078a4 <__libc_init_array>:
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	2600      	movs	r6, #0
 80078a8:	4d0c      	ldr	r5, [pc, #48]	@ (80078dc <__libc_init_array+0x38>)
 80078aa:	4c0d      	ldr	r4, [pc, #52]	@ (80078e0 <__libc_init_array+0x3c>)
 80078ac:	1b64      	subs	r4, r4, r5
 80078ae:	10a4      	asrs	r4, r4, #2
 80078b0:	42a6      	cmp	r6, r4
 80078b2:	d109      	bne.n	80078c8 <__libc_init_array+0x24>
 80078b4:	f000 f87e 	bl	80079b4 <_init>
 80078b8:	2600      	movs	r6, #0
 80078ba:	4d0a      	ldr	r5, [pc, #40]	@ (80078e4 <__libc_init_array+0x40>)
 80078bc:	4c0a      	ldr	r4, [pc, #40]	@ (80078e8 <__libc_init_array+0x44>)
 80078be:	1b64      	subs	r4, r4, r5
 80078c0:	10a4      	asrs	r4, r4, #2
 80078c2:	42a6      	cmp	r6, r4
 80078c4:	d105      	bne.n	80078d2 <__libc_init_array+0x2e>
 80078c6:	bd70      	pop	{r4, r5, r6, pc}
 80078c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80078cc:	4798      	blx	r3
 80078ce:	3601      	adds	r6, #1
 80078d0:	e7ee      	b.n	80078b0 <__libc_init_array+0xc>
 80078d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80078d6:	4798      	blx	r3
 80078d8:	3601      	adds	r6, #1
 80078da:	e7f2      	b.n	80078c2 <__libc_init_array+0x1e>
 80078dc:	080086fc 	.word	0x080086fc
 80078e0:	080086fc 	.word	0x080086fc
 80078e4:	080086fc 	.word	0x080086fc
 80078e8:	08008700 	.word	0x08008700

080078ec <__retarget_lock_acquire_recursive>:
 80078ec:	4770      	bx	lr

080078ee <__retarget_lock_release_recursive>:
 80078ee:	4770      	bx	lr

080078f0 <memcpy>:
 80078f0:	440a      	add	r2, r1
 80078f2:	4291      	cmp	r1, r2
 80078f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80078f8:	d100      	bne.n	80078fc <memcpy+0xc>
 80078fa:	4770      	bx	lr
 80078fc:	b510      	push	{r4, lr}
 80078fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007902:	4291      	cmp	r1, r2
 8007904:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007908:	d1f9      	bne.n	80078fe <memcpy+0xe>
 800790a:	bd10      	pop	{r4, pc}

0800790c <_free_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	4605      	mov	r5, r0
 8007910:	2900      	cmp	r1, #0
 8007912:	d040      	beq.n	8007996 <_free_r+0x8a>
 8007914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007918:	1f0c      	subs	r4, r1, #4
 800791a:	2b00      	cmp	r3, #0
 800791c:	bfb8      	it	lt
 800791e:	18e4      	addlt	r4, r4, r3
 8007920:	f000 f83c 	bl	800799c <__malloc_lock>
 8007924:	4a1c      	ldr	r2, [pc, #112]	@ (8007998 <_free_r+0x8c>)
 8007926:	6813      	ldr	r3, [r2, #0]
 8007928:	b933      	cbnz	r3, 8007938 <_free_r+0x2c>
 800792a:	6063      	str	r3, [r4, #4]
 800792c:	6014      	str	r4, [r2, #0]
 800792e:	4628      	mov	r0, r5
 8007930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007934:	f000 b838 	b.w	80079a8 <__malloc_unlock>
 8007938:	42a3      	cmp	r3, r4
 800793a:	d908      	bls.n	800794e <_free_r+0x42>
 800793c:	6820      	ldr	r0, [r4, #0]
 800793e:	1821      	adds	r1, r4, r0
 8007940:	428b      	cmp	r3, r1
 8007942:	bf01      	itttt	eq
 8007944:	6819      	ldreq	r1, [r3, #0]
 8007946:	685b      	ldreq	r3, [r3, #4]
 8007948:	1809      	addeq	r1, r1, r0
 800794a:	6021      	streq	r1, [r4, #0]
 800794c:	e7ed      	b.n	800792a <_free_r+0x1e>
 800794e:	461a      	mov	r2, r3
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	b10b      	cbz	r3, 8007958 <_free_r+0x4c>
 8007954:	42a3      	cmp	r3, r4
 8007956:	d9fa      	bls.n	800794e <_free_r+0x42>
 8007958:	6811      	ldr	r1, [r2, #0]
 800795a:	1850      	adds	r0, r2, r1
 800795c:	42a0      	cmp	r0, r4
 800795e:	d10b      	bne.n	8007978 <_free_r+0x6c>
 8007960:	6820      	ldr	r0, [r4, #0]
 8007962:	4401      	add	r1, r0
 8007964:	1850      	adds	r0, r2, r1
 8007966:	4283      	cmp	r3, r0
 8007968:	6011      	str	r1, [r2, #0]
 800796a:	d1e0      	bne.n	800792e <_free_r+0x22>
 800796c:	6818      	ldr	r0, [r3, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	4408      	add	r0, r1
 8007972:	6010      	str	r0, [r2, #0]
 8007974:	6053      	str	r3, [r2, #4]
 8007976:	e7da      	b.n	800792e <_free_r+0x22>
 8007978:	d902      	bls.n	8007980 <_free_r+0x74>
 800797a:	230c      	movs	r3, #12
 800797c:	602b      	str	r3, [r5, #0]
 800797e:	e7d6      	b.n	800792e <_free_r+0x22>
 8007980:	6820      	ldr	r0, [r4, #0]
 8007982:	1821      	adds	r1, r4, r0
 8007984:	428b      	cmp	r3, r1
 8007986:	bf01      	itttt	eq
 8007988:	6819      	ldreq	r1, [r3, #0]
 800798a:	685b      	ldreq	r3, [r3, #4]
 800798c:	1809      	addeq	r1, r1, r0
 800798e:	6021      	streq	r1, [r4, #0]
 8007990:	6063      	str	r3, [r4, #4]
 8007992:	6054      	str	r4, [r2, #4]
 8007994:	e7cb      	b.n	800792e <_free_r+0x22>
 8007996:	bd38      	pop	{r3, r4, r5, pc}
 8007998:	20002164 	.word	0x20002164

0800799c <__malloc_lock>:
 800799c:	4801      	ldr	r0, [pc, #4]	@ (80079a4 <__malloc_lock+0x8>)
 800799e:	f7ff bfa5 	b.w	80078ec <__retarget_lock_acquire_recursive>
 80079a2:	bf00      	nop
 80079a4:	20002160 	.word	0x20002160

080079a8 <__malloc_unlock>:
 80079a8:	4801      	ldr	r0, [pc, #4]	@ (80079b0 <__malloc_unlock+0x8>)
 80079aa:	f7ff bfa0 	b.w	80078ee <__retarget_lock_release_recursive>
 80079ae:	bf00      	nop
 80079b0:	20002160 	.word	0x20002160

080079b4 <_init>:
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	bf00      	nop
 80079b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ba:	bc08      	pop	{r3}
 80079bc:	469e      	mov	lr, r3
 80079be:	4770      	bx	lr

080079c0 <_fini>:
 80079c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c2:	bf00      	nop
 80079c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c6:	bc08      	pop	{r3}
 80079c8:	469e      	mov	lr, r3
 80079ca:	4770      	bx	lr
